
DCMP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00002016  0000208a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002016  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  0080023e  00002154  000021c8  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000021c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000597  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001412  00000000  00000000  000027ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000877  00000000  00000000  00003c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c18  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000440  00000000  00000000  000060a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000550  00000000  00000000  000064e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000435  00000000  00000000  00006a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00006e65  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_30>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e1       	ldi	r30, 0x16	; 22
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 33       	cpi	r26, 0x3E	; 62
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	ae e3       	ldi	r26, 0x3E	; 62
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3d       	cpi	r26, 0xD8	; 216
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 44 01 	call	0x288	; 0x288 <main>
      c6:	0c 94 09 10 	jmp	0x2012	; 0x2012 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <putByte>:
//------------------------------------------------------------------------------
// UART1 Transmit  Routine
//------------------------------------------------------------------------------

void putByte (BYTE b)
{
      ce:	98 2f       	mov	r25, r24
	while ( (UCSR1A & DATA_REGISTER_EMPTY) == 0 );
      d0:	80 91 9b 00 	lds	r24, 0x009B
      d4:	85 ff       	sbrs	r24, 5
      d6:	fc cf       	rjmp	.-8      	; 0xd0 <putByte+0x2>
	UDR1 = b;
      d8:	90 93 9c 00 	sts	0x009C, r25
}
      dc:	08 95       	ret

000000de <__vector_18>:

//------------------------------------------------------------------------------
// UART0 wCK Receive Interrupt Routine
//------------------------------------------------------------------------------
ISR(USART0_RX_vect) // interrupt [USART0_RXC] void usart0_rx_isr(void)
{
      de:	1f 92       	push	r1
      e0:	0f 92       	push	r0
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	0f 92       	push	r0
      e6:	11 24       	eor	r1, r1
      e8:	8f 93       	push	r24
      ea:	9f 93       	push	r25
	RUN_LED1_OFF;
      ec:	dd 9a       	sbi	0x1b, 5	; 27
	
    char	data;	
	data = UDR0;		// get the data
      ee:	9c b1       	in	r25, 0x0c	; 12
	
	while ( (UCSR1A & DATA_REGISTER_EMPTY) == 0 );
      f0:	80 91 9b 00 	lds	r24, 0x009B
      f4:	85 ff       	sbrs	r24, 5
      f6:	fc cf       	rjmp	.-8      	; 0xf0 <__vector_18+0x12>
	UDR1 = data;
      f8:	90 93 9c 00 	sts	0x009C, r25
	return;
}
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	0f 90       	pop	r0
     102:	0f be       	out	0x3f, r0	; 63
     104:	0f 90       	pop	r0
     106:	1f 90       	pop	r1
     108:	18 95       	reti

0000010a <HW_init>:


//------------------------------------------------------------------------------
// Initialise Ports
//------------------------------------------------------------------------------
void HW_init(void) {
     10a:	93 e0       	ldi	r25, 0x03	; 3
     10c:	9b bb       	out	0x1b, r25	; 27
	// Input/Output Ports initialization
	// Port A initialization
	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In 
	// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=P State0=P 
	PORTA=0x03;
	DDRA=0xFC;
     10e:	8c ef       	ldi	r24, 0xFC	; 252
     110:	8a bb       	out	0x1a, r24	; 26

	// Port B initialization
	// Func7=In Func6=Out Func5=Out Func4=Out Func3=In Func2=Out Func1=In Func0=In 
	// State7=T State6=0 State5=0 State4=0 State3=T State2=0 State1=T State0=T 
	PORTB=0x00;
     112:	18 ba       	out	0x18, r1	; 24
	DDRB=0x74;
     114:	84 e7       	ldi	r24, 0x74	; 116
     116:	87 bb       	out	0x17, r24	; 23

	// Port C initialization
	// Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
	// State7=0 State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
	PORTC=0x00;
     118:	15 ba       	out	0x15, r1	; 21
	DDRC=0x80;
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	44 bb       	out	0x14, r20	; 20

	// Port D initialization
	// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
	// State7=T State6=T State5=T State4=T State3=T State2=T State1=P State0=P 
	PORTD=0x03;
     11e:	92 bb       	out	0x12, r25	; 18
	DDRD=0x00;
     120:	11 ba       	out	0x11, r1	; 17

	// Port E initialization
	// Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In 
	// State7=T State6=P State5=P State4=P State3=0 State2=T State1=T State0=T 
	PORTE=0x70;
     122:	80 e7       	ldi	r24, 0x70	; 112
     124:	83 b9       	out	0x03, r24	; 3
	DDRE=0x08;
     126:	88 e0       	ldi	r24, 0x08	; 8
     128:	82 b9       	out	0x02, r24	; 2

	// Port F initialization
	// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
	// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
	PORTF=0x00;
     12a:	10 92 62 00 	sts	0x0062, r1
	DDRF=0x00;
     12e:	10 92 61 00 	sts	0x0061, r1

	// Port G initialization
	// Func4=In Func3=In Func2=Out Func1=In Func0=In 
	// State4=T State3=T State2=0 State1=T State0=T 
	PORTG=0x00;
     132:	10 92 65 00 	sts	0x0065, r1
	DDRG=0x04;
     136:	84 e0       	ldi	r24, 0x04	; 4
     138:	80 93 64 00 	sts	0x0064, r24
	// Clock period = 1/230400 = 4.34us
	// Overflow time = 255*1/230400 = 1.107ms
	// 1ms overflow value =  255-230 = 25
	// Mode: Normal top=FFh
	// OC0 output: Disconnected
	ASSR=0x00;
     13c:	10 be       	out	0x30, r1	; 48
	TCCR0=0x04;
     13e:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
     140:	12 be       	out	0x32, r1	; 50
	OCR0=0x00;
     142:	11 be       	out	0x31, r1	; 49
	// Timer 1 Overflow Interrupt: On
	// Input Capture Interrupt: Off
	// Compare A Match Interrupt: Off
	// Compare B Match Interrupt: Off
	// Compare C Match Interrupt: Off
	TCCR1A=0x00;
     144:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0x05;
     146:	85 e0       	ldi	r24, 0x05	; 5
     148:	8e bd       	out	0x2e, r24	; 46
	TCNT1H=0x00;
     14a:	1d bc       	out	0x2d, r1	; 45
	TCNT1L=0x00;
     14c:	1c bc       	out	0x2c, r1	; 44
	ICR1H=0x00;
     14e:	17 bc       	out	0x27, r1	; 39
	ICR1L=0x00;
     150:	16 bc       	out	0x26, r1	; 38
	OCR1AH=0x00;
     152:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=0x00;
     154:	1a bc       	out	0x2a, r1	; 42
	OCR1BH=0x00;
     156:	19 bc       	out	0x29, r1	; 41
	OCR1BL=0x00;
     158:	18 bc       	out	0x28, r1	; 40
	OCR1CH=0x00;
     15a:	10 92 79 00 	sts	0x0079, r1
	OCR1CL=0x00;
     15e:	10 92 78 00 	sts	0x0078, r1
	// Clock source: System Clock
	// Clock freq: 14.400 kHz
	// Clock period = 1/14400 = 69.4us
	// Mode: Normal top=FFh
	// OC2 output: Disconnected
	TCCR2=0x05;
     162:	85 bd       	out	0x25, r24	; 37
	TCNT2=0x00;
     164:	14 bc       	out	0x24, r1	; 36
	OCR2=0x00;
     166:	13 bc       	out	0x23, r1	; 35

	// Timer 3---------------------------------------------------------------
	// Not used
	TCCR3A=0x00;
     168:	10 92 8b 00 	sts	0x008B, r1
	TCCR3B=0x03;
     16c:	90 93 8a 00 	sts	0x008A, r25
	TCNT3H=0x00;
     170:	10 92 89 00 	sts	0x0089, r1
	TCNT3L=0x00;
     174:	10 92 88 00 	sts	0x0088, r1
	ICR3H=0x00;
     178:	10 92 81 00 	sts	0x0081, r1
	ICR3L=0x00;
     17c:	10 92 80 00 	sts	0x0080, r1
	OCR3AH=0x00;
     180:	10 92 87 00 	sts	0x0087, r1
	OCR3AL=0x00;
     184:	10 92 86 00 	sts	0x0086, r1
	OCR3BH=0x00;
     188:	10 92 85 00 	sts	0x0085, r1
	OCR3BL=0x00;
     18c:	10 92 84 00 	sts	0x0084, r1
	OCR3CH=0x00;
     190:	10 92 83 00 	sts	0x0083, r1
	OCR3CL=0x00;
     194:	10 92 82 00 	sts	0x0082, r1
	// INT3: Off
	// INT4: Off
	// INT5: Off
	// INT6: IR Remote falling edge
	// INT7: Off
	EICRA=0x00;
     198:	10 92 6a 00 	sts	0x006A, r1
	EICRB=0x20;
     19c:	30 e2       	ldi	r19, 0x20	; 32
     19e:	3a bf       	out	0x3a, r19	; 58
	EIMSK=0x40;
     1a0:	80 e4       	ldi	r24, 0x40	; 64
     1a2:	89 bf       	out	0x39, r24	; 57

	// Timer(s)/Counter(s) Interrupt(s) initialization
	TIMSK=0x00;
     1a4:	17 be       	out	0x37, r1	; 55
	ETIMSK=0x00;
     1a6:	10 92 7d 00 	sts	0x007D, r1
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART0 Receiver: Off
	// USART0 Transmitter: On
	// USART0 Mode: Asynchronous
	// USART0 Baud rate: 115200
	UCSR0A=0x00;
     1aa:	1b b8       	out	0x0b, r1	; 11
	//UCSR0B=0x98;
	//UCSR0B=0x48;
	UCSR0B = (1<<RXEN)|(1<<TXEN) |(1<<TXCIE); //enable reads for GetPos !!
     1ac:	88 e5       	ldi	r24, 0x58	; 88
     1ae:	8a b9       	out	0x0a, r24	; 10
	UCSR0C=0x06;
     1b0:	26 e0       	ldi	r18, 0x06	; 6
     1b2:	20 93 95 00 	sts	0x0095, r18
	UBRR0H=0x00;
     1b6:	10 92 90 00 	sts	0x0090, r1
	UBRR0L=0x07;
     1ba:	97 e0       	ldi	r25, 0x07	; 7
     1bc:	99 b9       	out	0x09, r25	; 9
	// Communication Parameters: 8 Data, 1 Stop, No Parity
	// USART1 Receiver: On
	// USART1 Transmitter: On
	// USART1 Mode: Asynchronous
	// USART1 Baud rate: 115200
	UCSR1A=0x00;
     1be:	10 92 9b 00 	sts	0x009B, r1
	UCSR1B= (1<<RXEN)|(1<<TXEN) |(1<<RXCIE); //enable PC read/write ! (old value=0x18;		
     1c2:	88 e9       	ldi	r24, 0x98	; 152
     1c4:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C=0x06;
     1c8:	20 93 9d 00 	sts	0x009D, r18
	UBRR1H=0x00;
     1cc:	10 92 98 00 	sts	0x0098, r1
	UBRR1L=BR115200;
     1d0:	90 93 99 00 	sts	0x0099, r25

	// Analog Comparator initialization
	// Analog Comparator: Off
	// Analog Comparator Input Capture by Timer/Counter 1: Off
	// Analog Comparator Output: Off
	ACSR=0x80;
     1d4:	48 b9       	out	0x08, r20	; 8
	SFIOR=0x00;
     1d6:	10 bc       	out	0x20, r1	; 32
    //ADC initialization
    //ADC Clock frequency: 460.800 kHz
    //ADC Voltage Reference: AREF pin
    //Only the 8 most significant bits of
    //the AD conversion result are used
    ADMUX=ADC_VREF_TYPE;
     1d8:	37 b9       	out	0x07, r19	; 7
    ADCSRA=0x00;	
     1da:	16 b8       	out	0x06, r1	; 6

	TWCR = 0;
     1dc:	10 92 74 00 	sts	0x0074, r1
}
     1e0:	08 95       	ret

000001e2 <SW_init>:


//------------------------------------------------------------------------------
// Initialise software states
//------------------------------------------------------------------------------
void SW_init(void) {
     1e2:	da 9a       	sbi	0x1b, 2	; 27

	PF1_LED1_OFF;			// LED states
	PF1_LED2_OFF;
     1e4:	db 9a       	sbi	0x1b, 3	; 27
	PF2_LED_OFF;
     1e6:	dc 9a       	sbi	0x1b, 4	; 27
	PWR_LED1_OFF;
     1e8:	e5 e6       	ldi	r30, 0x65	; 101
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	80 81       	ld	r24, Z
     1ee:	84 60       	ori	r24, 0x04	; 4
     1f0:	80 83       	st	Z, r24
	PWR_LED2_OFF;
     1f2:	af 9a       	sbi	0x15, 7	; 21
	RUN_LED1_OFF;
     1f4:	dd 9a       	sbi	0x1b, 5	; 27
	RUN_LED2_OFF;
     1f6:	de 9a       	sbi	0x1b, 6	; 27
	ERR_LED_OFF;
     1f8:	df 9a       	sbi	0x1b, 7	; 27

	PSD_OFF;                // PSD distance sensor off
     1fa:	c5 98       	cbi	0x18, 5	; 24
}
     1fc:	08 95       	ret

000001fe <ProcButton>:
//-----------------------------------------------------------------------------

extern void printline(char *c);

void ProcButton(void)
{
     1fe:	80 91 43 02 	lds	r24, 0x0243
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	d9 f4       	brne	.+54     	; 0x23c <ProcButton+0x3e>
	if(gBtn_val == PF1_BTN_PRESSED)
	{
		//look to see if PF2 held down
		printline("charge mode");
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 46 09 	call	0x128c	; 0x128c <printline>
		
		gBtn_val = 0;
     20e:	10 92 43 02 	sts	0x0243, r1
		Get_VOLTAGE();
     212:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Get_VOLTAGE>
		DetectPower();
     216:	0e 94 9c 05 	call	0xb38	; 0xb38 <DetectPower>
		
		if(F_PS_PLUGGED)
     21a:	80 91 5d 02 	lds	r24, 0x025D
     21e:	88 23       	and	r24, r24
     220:	49 f0       	breq	.+18     	; 0x234 <ProcButton+0x36>
		{	
			printline("plugged in");		
     222:	8c e0       	ldi	r24, 0x0C	; 12
     224:	91 e0       	ldi	r25, 0x01	; 1
     226:	0e 94 46 09 	call	0x128c	; 0x128c <printline>
			BreakModeCmdSend();		// put servo in breakmode (power off)
     22a:	0e 94 f7 06 	call	0xdee	; 0xdee <BreakModeCmdSend>
			ChargeNiMH();  			//initiate battery charging	
     22e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ChargeNiMH>
     232:	04 c0       	rjmp	.+8      	; 0x23c <ProcButton+0x3e>
		}	
		else
		{
			printline("Not plugged in");	
     234:	87 e1       	ldi	r24, 0x17	; 23
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	0e 94 46 09 	call	0x128c	; 0x128c <printline>
		}
	}
	
	if(gBtn_val == PF2_BTN_PRESSED)
     23c:	80 91 43 02 	lds	r24, 0x0243
     240:	83 30       	cpi	r24, 0x03	; 3
     242:	21 f4       	brne	.+8      	; 0x24c <ProcButton+0x4e>
	{
		//look to see if PF1 held down
		gBtn_val = 0;
     244:	10 92 43 02 	sts	0x0243, r1
		femto(); 					//start femto
     248:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <femto>
     24c:	08 95       	ret

0000024e <ReadButton>:
//(CHK_BIT5(PORTA))
//------------------------------------------------------------------------------
//  Check Routine
//------------------------------------------------------------------------------
void ReadButton(void)
{
     24e:	89 b3       	in	r24, 0x19	; 25
     250:	83 70       	andi	r24, 0x03	; 3
     252:	81 30       	cpi	r24, 0x01	; 1
     254:	49 f4       	brne	.+18     	; 0x268 <ReadButton+0x1a>
	if((PINA&03) == 1)  // PF1 on, PF2 off
	{
		delay_ms(10);
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 1a 05 	call	0xa34	; 0xa34 <delay_ms>
		if((PINA&1) == 1)
     25e:	c8 9b       	sbis	0x19, 0	; 25
     260:	03 c0       	rjmp	.+6      	; 0x268 <ReadButton+0x1a>
		{
			gBtn_val = PF1_BTN_PRESSED;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 43 02 	sts	0x0243, r24
		}
	}
	if((PINA&3) == 2)  // PF1 on, PF2 off
     268:	89 b3       	in	r24, 0x19	; 25
     26a:	83 70       	andi	r24, 0x03	; 3
     26c:	82 30       	cpi	r24, 0x02	; 2
     26e:	59 f4       	brne	.+22     	; 0x286 <ReadButton+0x38>
	{
		delay_ms(10);
     270:	8a e0       	ldi	r24, 0x0A	; 10
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 1a 05 	call	0xa34	; 0xa34 <delay_ms>
		if((PINA&3) == 2)
     278:	89 b3       	in	r24, 0x19	; 25
     27a:	83 70       	andi	r24, 0x03	; 3
     27c:	82 30       	cpi	r24, 0x02	; 2
     27e:	19 f4       	brne	.+6      	; 0x286 <ReadButton+0x38>
		{
			gBtn_val = PF2_BTN_PRESSED;
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	80 93 43 02 	sts	0x0243, r24
     286:	08 95       	ret

00000288 <main>:
//------------------------------------------------------------------------------
// Main Routine
//------------------------------------------------------------------------------
	
int main(void) 
{
     288:	0e 94 85 00 	call	0x10a	; 0x10a <HW_init>
	HW_init();					// Initialise ATMega Ports
	SW_init();					// Initialise software states
     28c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SW_init>
			
	sei();						// enable interrupts	
     290:	78 94       	sei
	TIMSK |= 0x01;		
     292:	87 b7       	in	r24, 0x37	; 55
     294:	81 60       	ori	r24, 0x01	; 1
     296:	87 bf       	out	0x37, r24	; 55
	
	PWR_LED1_ON; 				// Power green light on
     298:	80 91 65 00 	lds	r24, 0x0065
     29c:	8b 7f       	andi	r24, 0xFB	; 251
     29e:	80 93 65 00 	sts	0x0065, r24
		
	tilt_setup();				// initialise acceleromter
     2a2:	0e 94 04 03 	call	0x608	; 0x608 <tilt_setup>
	
	//call self test

	SelfTest1();	
     2a6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <SelfTest1>
	ReadButton();	
     2aa:	0e 94 27 01 	call	0x24e	; 0x24e <ReadButton>
	ProcButton();
     2ae:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ProcButton>
	
	//otherwise DC mode!
	
	TIMSK &= 0xFE;
     2b2:	87 b7       	in	r24, 0x37	; 55
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	87 bf       	out	0x37, r24	; 55
	EIMSK &= 0xBF;
     2b8:	89 b7       	in	r24, 0x39	; 57
     2ba:	8f 7b       	andi	r24, 0xBF	; 191
     2bc:	89 bf       	out	0x39, r24	; 57
	UCSR0B |= 0x80;
     2be:	57 9a       	sbi	0x0a, 7	; 10
	UCSR0B &= 0xBF;
     2c0:	56 98       	cbi	0x0a, 6	; 10

	RUN_LED2_OFF;
     2c2:	de 9a       	sbi	0x1b, 6	; 27
	PF1_LED1_ON;    //DCmode
     2c4:	da 98       	cbi	0x1b, 2	; 27
	PF1_LED2_OFF;
     2c6:	db 9a       	sbi	0x1b, 3	; 27
	PF2_LED_ON;
     2c8:	dc 98       	cbi	0x1b, 4	; 27
	
	gCMD=0;
     2ca:	10 92 44 02 	sts	0x0244, r1
     2ce:	ff cf       	rjmp	.-2      	; 0x2ce <main+0x46>

000002d0 <__vector_30>:

//------------------------------------------------------------------------------
// UART1 recieve
//------------------------------------------------------------------------------
ISR(USART1_RX_vect) // interrupt [USART1_RXC] void usart1_rx_isr(void)
{
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	0b b6       	in	r0, 0x3b	; 59
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	2f 93       	push	r18
     2e0:	3f 93       	push	r19
     2e2:	4f 93       	push	r20
     2e4:	5f 93       	push	r21
     2e6:	6f 93       	push	r22
     2e8:	7f 93       	push	r23
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
     2ee:	af 93       	push	r26
     2f0:	bf 93       	push	r27
     2f2:	ef 93       	push	r30
     2f4:	ff 93       	push	r31
	if (CHK_BIT5(PORTA))  RUN_LED1_ON; else RUN_LED1_OFF; 
     2f6:	dd 9b       	sbis	0x1b, 5	; 27
     2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__vector_30+0x2e>
     2fa:	dd 98       	cbi	0x1b, 5	; 27
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <__vector_30+0x30>
     2fe:	dd 9a       	sbi	0x1b, 5	; 27

    gRxData = UDR1;
     300:	40 91 9c 00 	lds	r20, 0x009C
     304:	40 93 48 02 	sts	0x0248, r20
	
	while( (UCSR0A & DATA_REGISTER_EMPTY) == 0 );
     308:	5d 9b       	sbis	0x0b, 5	; 11
     30a:	fe cf       	rjmp	.-4      	; 0x308 <__vector_30+0x38>
	UDR0 = gRxData;
     30c:	4c b9       	out	0x0c, r20	; 12
	
	
	if(gRxData == 0xff){
     30e:	4f 3f       	cpi	r20, 0xFF	; 255
     310:	49 f4       	brne	.+18     	; 0x324 <__vector_30+0x54>
		gRx1_DStep = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	90 93 40 02 	sts	0x0240, r25
     31a:	80 93 3f 02 	sts	0x023F, r24
		gFileCheckSum = 0;
     31e:	10 92 45 02 	sts	0x0245, r1
     322:	8a c0       	rjmp	.+276    	; 0x438 <__vector_30+0x168>
		return;
	}
	// check for FF 101 11110   (read Position Servo 30)
	switch(gRx1_DStep){
     324:	80 91 3f 02 	lds	r24, 0x023F
     328:	90 91 40 02 	lds	r25, 0x0240
     32c:	82 30       	cpi	r24, 0x02	; 2
     32e:	91 05       	cpc	r25, r1
     330:	81 f0       	breq	.+32     	; 0x352 <__vector_30+0x82>
     332:	83 30       	cpi	r24, 0x03	; 3
     334:	91 05       	cpc	r25, r1
     336:	d9 f0       	breq	.+54     	; 0x36e <__vector_30+0x9e>
     338:	01 97       	sbiw	r24, 0x01	; 1
     33a:	09 f0       	breq	.+2      	; 0x33e <__vector_30+0x6e>
     33c:	7d c0       	rjmp	.+250    	; 0x438 <__vector_30+0x168>
		case 1:
			if(gRxData == 0xBE) 
     33e:	4e 3b       	cpi	r20, 0xBE	; 190
     340:	19 f4       	brne	.+6      	; 0x348 <__vector_30+0x78>
			{
				gRx1_DStep = 2;
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	09 c0       	rjmp	.+18     	; 0x35a <__vector_30+0x8a>
			}
			else 
				gRx1_DStep = 0;
     348:	10 92 40 02 	sts	0x0240, r1
     34c:	10 92 3f 02 	sts	0x023F, r1
     350:	08 c0       	rjmp	.+16     	; 0x362 <__vector_30+0x92>
			gFileCheckSum ^= gRxData;
			break;
		case 2:
			gCMD = gRxData;
     352:	40 93 44 02 	sts	0x0244, r20
			gRx1_DStep = 3;
     356:	83 e0       	ldi	r24, 0x03	; 3
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	90 93 40 02 	sts	0x0240, r25
     35e:	80 93 3f 02 	sts	0x023F, r24
			gFileCheckSum ^= gRxData;
     362:	80 91 45 02 	lds	r24, 0x0245
     366:	84 27       	eor	r24, r20
     368:	80 93 45 02 	sts	0x0245, r24
     36c:	65 c0       	rjmp	.+202    	; 0x438 <__vector_30+0x168>
			break;
		case 3:
			if(gRxData == (gFileCheckSum & 0x7f))
     36e:	50 91 45 02 	lds	r21, 0x0245
     372:	24 2f       	mov	r18, r20
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	85 2f       	mov	r24, r21
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	8f 77       	andi	r24, 0x7F	; 127
     37c:	90 70       	andi	r25, 0x00	; 0
     37e:	28 17       	cp	r18, r24
     380:	39 07       	cpc	r19, r25
     382:	09 f0       	breq	.+2      	; 0x386 <__vector_30+0xb6>
     384:	47 c0       	rjmp	.+142    	; 0x414 <__vector_30+0x144>
			{
				// Depends on gGMD		
				BYTE b1=0, b2=0;
				switch (gCMD)
     386:	80 91 44 02 	lds	r24, 0x0244
     38a:	83 30       	cpi	r24, 0x03	; 3
     38c:	11 f1       	breq	.+68     	; 0x3d2 <__vector_30+0x102>
     38e:	84 30       	cpi	r24, 0x04	; 4
     390:	28 f4       	brcc	.+10     	; 0x39c <__vector_30+0xcc>
     392:	81 30       	cpi	r24, 0x01	; 1
     394:	51 f0       	breq	.+20     	; 0x3aa <__vector_30+0xda>
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	09 f5       	brne	.+66     	; 0x3dc <__vector_30+0x10c>
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <__vector_30+0xe8>
     39c:	85 30       	cpi	r24, 0x05	; 5
     39e:	01 f1       	breq	.+64     	; 0x3e0 <__vector_30+0x110>
     3a0:	85 30       	cpi	r24, 0x05	; 5
     3a2:	d0 f0       	brcs	.+52     	; 0x3d8 <__vector_30+0x108>
     3a4:	86 30       	cpi	r24, 0x06	; 6
     3a6:	d1 f4       	brne	.+52     	; 0x3dc <__vector_30+0x10c>
     3a8:	20 c0       	rjmp	.+64     	; 0x3ea <__vector_30+0x11a>
				{
				case 0x01:  
					tilt_read();
     3aa:	0e 94 a9 02 	call	0x552	; 0x552 <tilt_read>
					b1 = y_value;
     3ae:	80 91 4b 02 	lds	r24, 0x024B
     3b2:	90 91 4c 02 	lds	r25, 0x024C
     3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <__vector_30+0xf4>
					b2 = z_value;
					break;
				case 0x02:
					tilt_read();
     3b8:	0e 94 a9 02 	call	0x552	; 0x552 <tilt_read>
					b1 = x_value;
     3bc:	80 91 49 02 	lds	r24, 0x0249
     3c0:	90 91 4a 02 	lds	r25, 0x024A
     3c4:	28 2f       	mov	r18, r24
					b2 = z_value;	
     3c6:	80 91 53 02 	lds	r24, 0x0253
     3ca:	90 91 54 02 	lds	r25, 0x0254
     3ce:	98 2f       	mov	r25, r24
     3d0:	14 c0       	rjmp	.+40     	; 0x3fa <__vector_30+0x12a>
					break;
				case 0x03:
					PSD_on();
     3d2:	0e 94 34 04 	call	0x868	; 0x868 <PSD_on>
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__vector_30+0x10c>
					break;
				case 0x04:
					PSD_off();
     3d8:	0e 94 3f 04 	call	0x87e	; 0x87e <PSD_off>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	0c c0       	rjmp	.+24     	; 0x3f8 <__vector_30+0x128>
					break;
				case 0x05:
					Get_AD_PSD();
     3e0:	0e 94 41 04 	call	0x882	; 0x882 <Get_AD_PSD>
					b1 = gDistance;
     3e4:	20 91 5c 02 	lds	r18, 0x025C
     3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <__vector_30+0x128>
					break;
				case 0x06:
					Get_VOLTAGE();
     3ea:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Get_VOLTAGE>
					b1 = gVOLTAGE;
     3ee:	80 91 55 02 	lds	r24, 0x0255
     3f2:	90 91 56 02 	lds	r25, 0x0256
     3f6:	28 2f       	mov	r18, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
// UART1 Transmit  Routine
//------------------------------------------------------------------------------

void putByte (BYTE b)
{
	while ( (UCSR1A & DATA_REGISTER_EMPTY) == 0 );
     3fa:	80 91 9b 00 	lds	r24, 0x009B
     3fe:	85 ff       	sbrs	r24, 5
     400:	fc cf       	rjmp	.-8      	; 0x3fa <__vector_30+0x12a>
	UDR1 = b;
     402:	20 93 9c 00 	sts	0x009C, r18
// UART1 Transmit  Routine
//------------------------------------------------------------------------------

void putByte (BYTE b)
{
	while ( (UCSR1A & DATA_REGISTER_EMPTY) == 0 );
     406:	80 91 9b 00 	lds	r24, 0x009B
     40a:	85 ff       	sbrs	r24, 5
     40c:	fc cf       	rjmp	.-8      	; 0x406 <__vector_30+0x136>
	UDR1 = b;
     40e:	90 93 9c 00 	sts	0x009C, r25
     412:	0c c0       	rjmp	.+24     	; 0x42c <__vector_30+0x15c>
// UART1 Transmit  Routine
//------------------------------------------------------------------------------

void putByte (BYTE b)
{
	while ( (UCSR1A & DATA_REGISTER_EMPTY) == 0 );
     414:	80 91 9b 00 	lds	r24, 0x009B
     418:	85 ff       	sbrs	r24, 5
     41a:	fc cf       	rjmp	.-8      	; 0x414 <__vector_30+0x144>
	UDR1 = b;
     41c:	50 93 9c 00 	sts	0x009C, r21
// UART1 Transmit  Routine
//------------------------------------------------------------------------------

void putByte (BYTE b)
{
	while ( (UCSR1A & DATA_REGISTER_EMPTY) == 0 );
     420:	80 91 9b 00 	lds	r24, 0x009B
     424:	85 ff       	sbrs	r24, 5
     426:	fc cf       	rjmp	.-8      	; 0x420 <__vector_30+0x150>
	UDR1 = b;
     428:	40 93 9c 00 	sts	0x009C, r20
			}
			else
			{
				putByte(gFileCheckSum);
				putByte(gRxData);
				gCMD=0;
     42c:	10 92 44 02 	sts	0x0244, r1
			}
			gRx1_DStep = 0;
     430:	10 92 40 02 	sts	0x0240, r1
     434:	10 92 3f 02 	sts	0x023F, r1
			break;
	}
	return;
}
     438:	ff 91       	pop	r31
     43a:	ef 91       	pop	r30
     43c:	bf 91       	pop	r27
     43e:	af 91       	pop	r26
     440:	9f 91       	pop	r25
     442:	8f 91       	pop	r24
     444:	7f 91       	pop	r23
     446:	6f 91       	pop	r22
     448:	5f 91       	pop	r21
     44a:	4f 91       	pop	r20
     44c:	3f 91       	pop	r19
     44e:	2f 91       	pop	r18
     450:	0f 90       	pop	r0
     452:	0b be       	out	0x3b, r0	; 59
     454:	0f 90       	pop	r0
     456:	0f be       	out	0x3f, r0	; 63
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <start_accel>:
     45e:	14 9a       	sbi	0x02, 4	; 2
     460:	15 9a       	sbi	0x02, 5	; 2
     462:	1d 9a       	sbi	0x03, 5	; 3
     464:	1c 9a       	sbi	0x03, 4	; 3
     466:	00 00       	nop
     468:	00 00       	nop
     46a:	1d 98       	cbi	0x03, 5	; 3
     46c:	00 00       	nop
     46e:	00 00       	nop
     470:	1c 98       	cbi	0x03, 4	; 3
     472:	00 00       	nop
     474:	00 00       	nop
     476:	08 95       	ret

00000478 <stop_accel>:
     478:	14 9a       	sbi	0x02, 4	; 2
     47a:	15 9a       	sbi	0x02, 5	; 2
     47c:	1d 98       	cbi	0x03, 5	; 3
     47e:	1c 9a       	sbi	0x03, 4	; 3
     480:	00 00       	nop
     482:	00 00       	nop
     484:	1d 9a       	sbi	0x03, 5	; 3
     486:	00 00       	nop
     488:	00 00       	nop
     48a:	14 98       	cbi	0x02, 4	; 2
     48c:	15 98       	cbi	0x02, 5	; 2
     48e:	08 95       	ret

00000490 <read_value>:
     490:	15 98       	cbi	0x02, 5	; 2
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	88 0f       	add	r24, r24
	...
     4a0:	1c 9a       	sbi	0x03, 4	; 3
     4a2:	00 00       	nop
     4a4:	00 00       	nop
     4a6:	0d 99       	sbic	0x01, 5	; 1
     4a8:	81 60       	ori	r24, 0x01	; 1
     4aa:	00 00       	nop
     4ac:	00 00       	nop
     4ae:	1c 98       	cbi	0x03, 4	; 3
     4b0:	9f 5f       	subi	r25, 0xFF	; 255
     4b2:	98 30       	cpi	r25, 0x08	; 8
     4b4:	81 f7       	brne	.-32     	; 0x496 <read_value+0x6>
     4b6:	15 9a       	sbi	0x02, 5	; 2
     4b8:	08 95       	ret

000004ba <write_value>:
     4ba:	15 9a       	sbi	0x02, 5	; 2
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	87 ff       	sbrs	r24, 7
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <write_value+0xc>
     4c2:	1d 9a       	sbi	0x03, 5	; 3
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <write_value+0xe>
     4c6:	1d 98       	cbi	0x03, 5	; 3
     4c8:	00 00       	nop
     4ca:	00 00       	nop
     4cc:	1c 9a       	sbi	0x03, 4	; 3
	...
     4d6:	1c 98       	cbi	0x03, 4	; 3
     4d8:	00 00       	nop
     4da:	00 00       	nop
     4dc:	9f 5f       	subi	r25, 0xFF	; 255
     4de:	98 30       	cpi	r25, 0x08	; 8
     4e0:	11 f0       	breq	.+4      	; 0x4e6 <write_value+0x2c>
     4e2:	88 0f       	add	r24, r24
     4e4:	ec cf       	rjmp	.-40     	; 0x4be <write_value+0x4>
     4e6:	08 95       	ret

000004e8 <ack>:
     4e8:	15 98       	cbi	0x02, 5	; 2
     4ea:	00 00       	nop
     4ec:	00 00       	nop
     4ee:	1d 9a       	sbi	0x03, 5	; 3
     4f0:	00 00       	nop
     4f2:	00 00       	nop
     4f4:	1c 9a       	sbi	0x03, 4	; 3
     4f6:	00 00       	nop
     4f8:	00 00       	nop
     4fa:	1c 98       	cbi	0x03, 4	; 3
     4fc:	00 00       	nop
     4fe:	00 00       	nop
     500:	15 9a       	sbi	0x02, 5	; 2
     502:	00 00       	nop
     504:	00 00       	nop
     506:	08 95       	ret

00000508 <next_byte>:
     508:	15 9a       	sbi	0x02, 5	; 2
     50a:	00 00       	nop
     50c:	00 00       	nop
     50e:	1d 98       	cbi	0x03, 5	; 3
     510:	00 00       	nop
     512:	00 00       	nop
     514:	1c 9a       	sbi	0x03, 4	; 3
     516:	00 00       	nop
     518:	00 00       	nop
     51a:	1c 98       	cbi	0x03, 4	; 3
     51c:	00 00       	nop
     51e:	00 00       	nop
     520:	1d 9a       	sbi	0x03, 5	; 3
     522:	00 00       	nop
     524:	00 00       	nop
     526:	08 95       	ret

00000528 <done_read>:
     528:	15 9a       	sbi	0x02, 5	; 2
     52a:	00 00       	nop
     52c:	00 00       	nop
     52e:	1d 9a       	sbi	0x03, 5	; 3
     530:	00 00       	nop
     532:	00 00       	nop
     534:	1c 9a       	sbi	0x03, 4	; 3
     536:	00 00       	nop
     538:	00 00       	nop
     53a:	1c 98       	cbi	0x03, 4	; 3
     53c:	00 00       	nop
     53e:	00 00       	nop
     540:	08 95       	ret

00000542 <cbyte>:
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	87 ff       	sbrs	r24, 7
     548:	02 c0       	rjmp	.+4      	; 0x54e <cbyte+0xc>
     54a:	20 50       	subi	r18, 0x00	; 0
     54c:	31 40       	sbci	r19, 0x01	; 1
     54e:	c9 01       	movw	r24, r18
     550:	08 95       	ret

00000552 <tilt_read>:
     552:	0e 94 2f 02 	call	0x45e	; 0x45e <start_accel>
     556:	80 e7       	ldi	r24, 0x70	; 112
     558:	0e 94 5d 02 	call	0x4ba	; 0x4ba <write_value>
     55c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ack>
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 5d 02 	call	0x4ba	; 0x4ba <write_value>
     566:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ack>
     56a:	0e 94 3c 02 	call	0x478	; 0x478 <stop_accel>
	...
     576:	0e 94 2f 02 	call	0x45e	; 0x45e <start_accel>
     57a:	81 e7       	ldi	r24, 0x71	; 113
     57c:	0e 94 5d 02 	call	0x4ba	; 0x4ba <write_value>
     580:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ack>
     584:	0e 94 48 02 	call	0x490	; 0x490 <read_value>
     588:	0e 94 84 02 	call	0x508	; 0x508 <next_byte>
     58c:	0e 94 48 02 	call	0x490	; 0x490 <read_value>
     590:	28 2f       	mov	r18, r24
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	87 ff       	sbrs	r24, 7
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <tilt_read+0x4e>
     598:	c9 01       	movw	r24, r18
     59a:	80 50       	subi	r24, 0x00	; 0
     59c:	91 40       	sbci	r25, 0x01	; 1
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <tilt_read+0x50>
     5a0:	c9 01       	movw	r24, r18
     5a2:	90 93 4a 02 	sts	0x024A, r25
     5a6:	80 93 49 02 	sts	0x0249, r24
     5aa:	0e 94 84 02 	call	0x508	; 0x508 <next_byte>
     5ae:	0e 94 48 02 	call	0x490	; 0x490 <read_value>
     5b2:	0e 94 84 02 	call	0x508	; 0x508 <next_byte>
     5b6:	0e 94 48 02 	call	0x490	; 0x490 <read_value>
     5ba:	28 2f       	mov	r18, r24
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	87 ff       	sbrs	r24, 7
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <tilt_read+0x78>
     5c2:	c9 01       	movw	r24, r18
     5c4:	80 50       	subi	r24, 0x00	; 0
     5c6:	91 40       	sbci	r25, 0x01	; 1
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <tilt_read+0x7a>
     5ca:	c9 01       	movw	r24, r18
     5cc:	90 93 4c 02 	sts	0x024C, r25
     5d0:	80 93 4b 02 	sts	0x024B, r24
     5d4:	0e 94 84 02 	call	0x508	; 0x508 <next_byte>
     5d8:	0e 94 48 02 	call	0x490	; 0x490 <read_value>
     5dc:	0e 94 84 02 	call	0x508	; 0x508 <next_byte>
     5e0:	0e 94 48 02 	call	0x490	; 0x490 <read_value>
     5e4:	28 2f       	mov	r18, r24
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	87 ff       	sbrs	r24, 7
     5ea:	04 c0       	rjmp	.+8      	; 0x5f4 <tilt_read+0xa2>
     5ec:	c9 01       	movw	r24, r18
     5ee:	80 50       	subi	r24, 0x00	; 0
     5f0:	91 40       	sbci	r25, 0x01	; 1
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <tilt_read+0xa4>
     5f4:	c9 01       	movw	r24, r18
     5f6:	90 93 54 02 	sts	0x0254, r25
     5fa:	80 93 53 02 	sts	0x0253, r24
     5fe:	0e 94 94 02 	call	0x528	; 0x528 <done_read>
     602:	0e 94 3c 02 	call	0x478	; 0x478 <stop_accel>
     606:	08 95       	ret

00000608 <tilt_setup>:
     608:	0e 94 2f 02 	call	0x45e	; 0x45e <start_accel>
     60c:	80 e7       	ldi	r24, 0x70	; 112
     60e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <write_value>
     612:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ack>
     616:	84 e1       	ldi	r24, 0x14	; 20
     618:	0e 94 5d 02 	call	0x4ba	; 0x4ba <write_value>
     61c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ack>
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	0e 94 5d 02 	call	0x4ba	; 0x4ba <write_value>
     626:	0e 94 74 02 	call	0x4e8	; 0x4e8 <ack>
     62a:	0e 94 3c 02 	call	0x478	; 0x478 <stop_accel>
     62e:	08 95       	ret

00000630 <AccStart>:
     630:	15 9a       	sbi	0x02, 5	; 2
     632:	14 9a       	sbi	0x02, 4	; 2
     634:	1d 9a       	sbi	0x03, 5	; 3
     636:	1c 9a       	sbi	0x03, 4	; 3
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	1d 98       	cbi	0x03, 5	; 3
     63e:	00 00       	nop
     640:	00 00       	nop
     642:	1c 98       	cbi	0x03, 4	; 3
     644:	00 00       	nop
     646:	00 00       	nop
     648:	08 95       	ret

0000064a <AccStop>:
     64a:	15 9a       	sbi	0x02, 5	; 2
     64c:	14 9a       	sbi	0x02, 4	; 2
     64e:	1d 98       	cbi	0x03, 5	; 3
     650:	1c 9a       	sbi	0x03, 4	; 3
     652:	00 00       	nop
     654:	00 00       	nop
     656:	1d 9a       	sbi	0x03, 5	; 3
     658:	00 00       	nop
     65a:	00 00       	nop
     65c:	15 98       	cbi	0x02, 5	; 2
     65e:	14 98       	cbi	0x02, 4	; 2
     660:	08 95       	ret

00000662 <AccByteWrite>:
     662:	15 9a       	sbi	0x02, 5	; 2
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	87 ff       	sbrs	r24, 7
     668:	02 c0       	rjmp	.+4      	; 0x66e <AccByteWrite+0xc>
     66a:	1d 9a       	sbi	0x03, 5	; 3
     66c:	01 c0       	rjmp	.+2      	; 0x670 <AccByteWrite+0xe>
     66e:	1d 98       	cbi	0x03, 5	; 3
     670:	00 00       	nop
     672:	00 00       	nop
     674:	1c 9a       	sbi	0x03, 4	; 3
	...
     67e:	1c 98       	cbi	0x03, 4	; 3
     680:	00 00       	nop
     682:	00 00       	nop
     684:	9f 5f       	subi	r25, 0xFF	; 255
     686:	98 30       	cpi	r25, 0x08	; 8
     688:	11 f0       	breq	.+4      	; 0x68e <AccByteWrite+0x2c>
     68a:	88 0f       	add	r24, r24
     68c:	ec cf       	rjmp	.-40     	; 0x666 <AccByteWrite+0x4>
     68e:	08 95       	ret

00000690 <AccByteRead>:
     690:	15 98       	cbi	0x02, 5	; 2
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	88 0f       	add	r24, r24
	...
     6a0:	1c 9a       	sbi	0x03, 4	; 3
     6a2:	00 00       	nop
     6a4:	00 00       	nop
     6a6:	0d 99       	sbic	0x01, 5	; 1
     6a8:	81 60       	ori	r24, 0x01	; 1
     6aa:	00 00       	nop
     6ac:	00 00       	nop
     6ae:	1c 98       	cbi	0x03, 4	; 3
     6b0:	9f 5f       	subi	r25, 0xFF	; 255
     6b2:	98 30       	cpi	r25, 0x08	; 8
     6b4:	81 f7       	brne	.-32     	; 0x696 <AccByteRead+0x6>
     6b6:	15 9a       	sbi	0x02, 5	; 2
     6b8:	08 95       	ret

000006ba <AccAckRead>:
     6ba:	15 98       	cbi	0x02, 5	; 2
     6bc:	00 00       	nop
     6be:	00 00       	nop
     6c0:	1d 9a       	sbi	0x03, 5	; 3
     6c2:	00 00       	nop
     6c4:	00 00       	nop
     6c6:	1c 9a       	sbi	0x03, 4	; 3
     6c8:	00 00       	nop
     6ca:	00 00       	nop
     6cc:	1c 98       	cbi	0x03, 4	; 3
     6ce:	00 00       	nop
     6d0:	00 00       	nop
     6d2:	15 9a       	sbi	0x02, 5	; 2
     6d4:	00 00       	nop
     6d6:	00 00       	nop
     6d8:	08 95       	ret

000006da <AccAckWrite>:
     6da:	15 9a       	sbi	0x02, 5	; 2
     6dc:	00 00       	nop
     6de:	00 00       	nop
     6e0:	1d 98       	cbi	0x03, 5	; 3
     6e2:	00 00       	nop
     6e4:	00 00       	nop
     6e6:	1c 9a       	sbi	0x03, 4	; 3
     6e8:	00 00       	nop
     6ea:	00 00       	nop
     6ec:	1c 98       	cbi	0x03, 4	; 3
     6ee:	00 00       	nop
     6f0:	00 00       	nop
     6f2:	1d 9a       	sbi	0x03, 5	; 3
     6f4:	00 00       	nop
     6f6:	00 00       	nop
     6f8:	08 95       	ret

000006fa <AccNotAckWrite>:
     6fa:	15 9a       	sbi	0x02, 5	; 2
     6fc:	00 00       	nop
     6fe:	00 00       	nop
     700:	1d 9a       	sbi	0x03, 5	; 3
     702:	00 00       	nop
     704:	00 00       	nop
     706:	1c 9a       	sbi	0x03, 4	; 3
     708:	00 00       	nop
     70a:	00 00       	nop
     70c:	1c 98       	cbi	0x03, 4	; 3
     70e:	00 00       	nop
     710:	00 00       	nop
     712:	08 95       	ret

00000714 <Acc_init>:
     714:	0e 94 18 03 	call	0x630	; 0x630 <AccStart>
     718:	80 e7       	ldi	r24, 0x70	; 112
     71a:	0e 94 31 03 	call	0x662	; 0x662 <AccByteWrite>
     71e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <AccAckRead>
     722:	84 e1       	ldi	r24, 0x14	; 20
     724:	0e 94 31 03 	call	0x662	; 0x662 <AccByteWrite>
     728:	0e 94 5d 03 	call	0x6ba	; 0x6ba <AccAckRead>
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	0e 94 31 03 	call	0x662	; 0x662 <AccByteWrite>
     732:	0e 94 5d 03 	call	0x6ba	; 0x6ba <AccAckRead>
     736:	0e 94 25 03 	call	0x64a	; 0x64a <AccStop>
     73a:	08 95       	ret

0000073c <AccGetData>:
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	0e 94 18 03 	call	0x630	; 0x630 <AccStart>
     744:	80 e7       	ldi	r24, 0x70	; 112
     746:	0e 94 31 03 	call	0x662	; 0x662 <AccByteWrite>
     74a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <AccAckRead>
     74e:	82 e0       	ldi	r24, 0x02	; 2
     750:	0e 94 31 03 	call	0x662	; 0x662 <AccByteWrite>
     754:	0e 94 5d 03 	call	0x6ba	; 0x6ba <AccAckRead>
     758:	0e 94 25 03 	call	0x64a	; 0x64a <AccStop>
	...
     764:	0e 94 18 03 	call	0x630	; 0x630 <AccStart>
     768:	81 e7       	ldi	r24, 0x71	; 113
     76a:	0e 94 31 03 	call	0x662	; 0x662 <AccByteWrite>
     76e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <AccAckRead>
     772:	0e 94 48 03 	call	0x690	; 0x690 <AccByteRead>
     776:	0e 94 6d 03 	call	0x6da	; 0x6da <AccAckWrite>
     77a:	0e 94 48 03 	call	0x690	; 0x690 <AccByteRead>
     77e:	08 2f       	mov	r16, r24
     780:	0e 94 6d 03 	call	0x6da	; 0x6da <AccAckWrite>
     784:	11 27       	eor	r17, r17
     786:	07 fd       	sbrc	r16, 7
     788:	10 95       	com	r17
     78a:	10 93 4e 02 	sts	0x024E, r17
     78e:	00 93 4d 02 	sts	0x024D, r16
     792:	0e 94 48 03 	call	0x690	; 0x690 <AccByteRead>
     796:	0e 94 6d 03 	call	0x6da	; 0x6da <AccAckWrite>
     79a:	0e 94 48 03 	call	0x690	; 0x690 <AccByteRead>
     79e:	08 2f       	mov	r16, r24
     7a0:	0e 94 6d 03 	call	0x6da	; 0x6da <AccAckWrite>
     7a4:	11 27       	eor	r17, r17
     7a6:	07 fd       	sbrc	r16, 7
     7a8:	10 95       	com	r17
     7aa:	10 93 50 02 	sts	0x0250, r17
     7ae:	00 93 4f 02 	sts	0x024F, r16
     7b2:	0e 94 48 03 	call	0x690	; 0x690 <AccByteRead>
     7b6:	0e 94 6d 03 	call	0x6da	; 0x6da <AccAckWrite>
     7ba:	0e 94 48 03 	call	0x690	; 0x690 <AccByteRead>
     7be:	08 2f       	mov	r16, r24
     7c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <AccNotAckWrite>
     7c4:	11 27       	eor	r17, r17
     7c6:	07 fd       	sbrc	r16, 7
     7c8:	10 95       	com	r17
     7ca:	10 93 52 02 	sts	0x0252, r17
     7ce:	00 93 51 02 	sts	0x0251, r16
     7d2:	0e 94 25 03 	call	0x64a	; 0x64a <AccStop>
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <adc_volt>:
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 59 02 	sts	0x0259, r24
     7e2:	80 93 3e 02 	sts	0x023E, r24
     7e6:	81 e2       	ldi	r24, 0x21	; 33
     7e8:	87 b9       	out	0x07, r24	; 7
     7ea:	8c ed       	ldi	r24, 0xDC	; 220
     7ec:	86 b9       	out	0x06, r24	; 6
     7ee:	36 99       	sbic	0x06, 6	; 6
     7f0:	fe cf       	rjmp	.-4      	; 0x7ee <adc_volt+0x12>
     7f2:	20 91 55 02 	lds	r18, 0x0255
     7f6:	30 91 56 02 	lds	r19, 0x0256
     7fa:	c9 01       	movw	r24, r18
     7fc:	08 95       	ret

000007fe <__vector_21>:
     7fe:	1f 92       	push	r1
     800:	0f 92       	push	r0
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	0f 92       	push	r0
     806:	11 24       	eor	r1, r1
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	95 b1       	in	r25, 0x05	; 5
     80e:	90 93 58 02 	sts	0x0258, r25
     812:	80 91 59 02 	lds	r24, 0x0259
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	41 f0       	breq	.+16     	; 0x82a <__vector_21+0x2c>
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	18 f0       	brcs	.+6      	; 0x824 <__vector_21+0x26>
     81e:	8f 30       	cpi	r24, 0x0F	; 15
     820:	a1 f4       	brne	.+40     	; 0x84a <__vector_21+0x4c>
     822:	0c c0       	rjmp	.+24     	; 0x83c <__vector_21+0x3e>
     824:	90 93 57 02 	sts	0x0257, r25
     828:	10 c0       	rjmp	.+32     	; 0x84a <__vector_21+0x4c>
     82a:	89 e3       	ldi	r24, 0x39	; 57
     82c:	98 9f       	mul	r25, r24
     82e:	c0 01       	movw	r24, r0
     830:	11 24       	eor	r1, r1
     832:	90 93 56 02 	sts	0x0256, r25
     836:	80 93 55 02 	sts	0x0255, r24
     83a:	07 c0       	rjmp	.+14     	; 0x84a <__vector_21+0x4c>
     83c:	96 3e       	cpi	r25, 0xE6	; 230
     83e:	18 f4       	brcc	.+6      	; 0x846 <__vector_21+0x48>
     840:	90 93 5a 02 	sts	0x025A, r25
     844:	02 c0       	rjmp	.+4      	; 0x84a <__vector_21+0x4c>
     846:	10 92 5a 02 	sts	0x025A, r1
     84a:	10 92 3e 02 	sts	0x023E, r1
     84e:	9f 91       	pop	r25
     850:	8f 91       	pop	r24
     852:	0f 90       	pop	r0
     854:	0f be       	out	0x3f, r0	; 63
     856:	0f 90       	pop	r0
     858:	1f 90       	pop	r1
     85a:	18 95       	reti

0000085c <ADC_set>:
     85c:	90 91 59 02 	lds	r25, 0x0259
     860:	90 62       	ori	r25, 0x20	; 32
     862:	97 b9       	out	0x07, r25	; 7
     864:	86 b9       	out	0x06, r24	; 6
     866:	08 95       	ret

00000868 <PSD_on>:
     868:	c5 9a       	sbi	0x18, 5	; 24
     86a:	84 ef       	ldi	r24, 0xF4	; 244
     86c:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     86e:	20 e7       	ldi	r18, 0x70	; 112
     870:	31 e0       	ldi	r19, 0x01	; 1
     872:	f9 01       	movw	r30, r18
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	f1 f7       	brne	.-4      	; 0x874 <PSD_on+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     878:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     87a:	d9 f7       	brne	.-10     	; 0x872 <PSD_on+0xa>
     87c:	08 95       	ret

0000087e <PSD_off>:
     87e:	c5 98       	cbi	0x18, 5	; 24
     880:	08 95       	ret

00000882 <Get_AD_PSD>:
     882:	ef 92       	push	r14
     884:	ff 92       	push	r15
     886:	0f 93       	push	r16
     888:	1f 93       	push	r17
     88a:	c5 99       	sbic	0x18, 5	; 24
     88c:	0a c0       	rjmp	.+20     	; 0x8a2 <Get_AD_PSD+0x20>
     88e:	c5 9a       	sbi	0x18, 5	; 24
     890:	84 ef       	ldi	r24, 0xF4	; 244
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	20 e7       	ldi	r18, 0x70	; 112
     896:	31 e0       	ldi	r19, 0x01	; 1
     898:	f9 01       	movw	r30, r18
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <Get_AD_PSD+0x18>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a0:	d9 f7       	brne	.-10     	; 0x898 <Get_AD_PSD+0x16>
     8a2:	89 b7       	in	r24, 0x39	; 57
     8a4:	8f 7b       	andi	r24, 0xBF	; 191
     8a6:	89 bf       	out	0x39, r24	; 57
     8a8:	10 92 59 02 	sts	0x0259, r1
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 3e 02 	sts	0x023E, r24
     8b2:	80 e2       	ldi	r24, 0x20	; 32
     8b4:	87 b9       	out	0x07, r24	; 7
     8b6:	8c ed       	ldi	r24, 0xDC	; 220
     8b8:	86 b9       	out	0x06, r24	; 6
     8ba:	36 99       	sbic	0x06, 6	; 6
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <Get_AD_PSD+0x38>
     8be:	60 91 57 02 	lds	r22, 0x0257
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	88 27       	eor	r24, r24
     8c6:	77 fd       	sbrc	r23, 7
     8c8:	80 95       	com	r24
     8ca:	98 2f       	mov	r25, r24
     8cc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__floatsisf>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	0e 94 9d 0b 	call	0x173a	; 0x173a <__addsf3>
     8dc:	21 ee       	ldi	r18, 0xE1	; 225
     8de:	3a e7       	ldi	r19, 0x7A	; 122
     8e0:	4c ed       	ldi	r20, 0xDC	; 220
     8e2:	50 e4       	ldi	r21, 0x40	; 64
     8e4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__subsf3>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	66 e6       	ldi	r22, 0x66	; 102
     8ee:	76 ea       	ldi	r23, 0xA6	; 166
     8f0:	8b e8       	ldi	r24, 0x8B	; 139
     8f2:	94 e4       	ldi	r25, 0x44	; 68
     8f4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divsf3>
     8f8:	7b 01       	movw	r14, r22
     8fa:	8c 01       	movw	r16, r24
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__ltsf2>
     908:	88 23       	and	r24, r24
     90a:	fc f0       	brlt	.+62     	; 0x94a <Get_AD_PSD+0xc8>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e2       	ldi	r20, 0x20	; 32
     912:	51 e4       	ldi	r21, 0x41	; 65
     914:	c8 01       	movw	r24, r16
     916:	b7 01       	movw	r22, r14
     918:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <__ltsf2>
     91c:	88 23       	and	r24, r24
     91e:	5c f4       	brge	.+22     	; 0x936 <Get_AD_PSD+0xb4>
     920:	0f 2e       	mov	r0, r31
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ef 2e       	mov	r14, r31
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	ff 2e       	mov	r15, r31
     92a:	f0 e2       	ldi	r31, 0x20	; 32
     92c:	0f 2f       	mov	r16, r31
     92e:	f1 e4       	ldi	r31, 0x41	; 65
     930:	1f 2f       	mov	r17, r31
     932:	f0 2d       	mov	r31, r0
     934:	14 c0       	rjmp	.+40     	; 0x95e <Get_AD_PSD+0xdc>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	48 e4       	ldi	r20, 0x48	; 72
     93c:	52 e4       	ldi	r21, 0x42	; 66
     93e:	c8 01       	movw	r24, r16
     940:	b7 01       	movw	r22, r14
     942:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__gtsf2>
     946:	18 16       	cp	r1, r24
     948:	54 f4       	brge	.+20     	; 0x95e <Get_AD_PSD+0xdc>
     94a:	0f 2e       	mov	r0, r31
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	ef 2e       	mov	r14, r31
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	ff 2e       	mov	r15, r31
     954:	f8 e4       	ldi	r31, 0x48	; 72
     956:	0f 2f       	mov	r16, r31
     958:	f2 e4       	ldi	r31, 0x42	; 66
     95a:	1f 2f       	mov	r17, r31
     95c:	f0 2d       	mov	r31, r0
     95e:	c8 01       	movw	r24, r16
     960:	b7 01       	movw	r22, r14
     962:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fixunssfsi>
     966:	60 93 5c 02 	sts	0x025C, r22
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <Get_AD_MIC>:
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	8f e0       	ldi	r24, 0x0F	; 15
     988:	80 93 59 02 	sts	0x0259, r24
     98c:	c0 e0       	ldi	r28, 0x00	; 0
     98e:	d0 e0       	ldi	r29, 0x00	; 0
     990:	0f 2e       	mov	r0, r31
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	ef 2e       	mov	r14, r31
     996:	f0 e0       	ldi	r31, 0x00	; 0
     998:	ff 2e       	mov	r15, r31
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	0f 2f       	mov	r16, r31
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	1f 2f       	mov	r17, r31
     9a2:	f0 2d       	mov	r31, r0
     9a4:	bb 24       	eor	r11, r11
     9a6:	b3 94       	inc	r11
     9a8:	9f e2       	ldi	r25, 0x2F	; 47
     9aa:	c9 2e       	mov	r12, r25
     9ac:	8c ed       	ldi	r24, 0xDC	; 220
     9ae:	d8 2e       	mov	r13, r24
     9b0:	b0 92 3e 02 	sts	0x023E, r11
     9b4:	c7 b8       	out	0x07, r12	; 7
     9b6:	d6 b8       	out	0x06, r13	; 6
     9b8:	80 91 3e 02 	lds	r24, 0x023E
     9bc:	88 23       	and	r24, r24
     9be:	e1 f7       	brne	.-8      	; 0x9b8 <Get_AD_MIC+0x44>
     9c0:	60 91 5a 02 	lds	r22, 0x025A
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	88 27       	eor	r24, r24
     9c8:	77 fd       	sbrc	r23, 7
     9ca:	80 95       	com	r24
     9cc:	98 2f       	mov	r25, r24
     9ce:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__floatsisf>
     9d2:	9b 01       	movw	r18, r22
     9d4:	ac 01       	movw	r20, r24
     9d6:	c8 01       	movw	r24, r16
     9d8:	b7 01       	movw	r22, r14
     9da:	0e 94 9d 0b 	call	0x173a	; 0x173a <__addsf3>
     9de:	7b 01       	movw	r14, r22
     9e0:	8c 01       	movw	r16, r24
     9e2:	21 96       	adiw	r28, 0x01	; 1
     9e4:	c2 33       	cpi	r28, 0x32	; 50
     9e6:	d1 05       	cpc	r29, r1
     9e8:	19 f7       	brne	.-58     	; 0x9b0 <Get_AD_MIC+0x3c>
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	40 e2       	ldi	r20, 0x20	; 32
     9f0:	51 e4       	ldi	r21, 0x41	; 65
     9f2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <__divsf3>
     9f6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fixunssfsi>
     9fa:	60 93 5b 02 	sts	0x025B, r22
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	bf 90       	pop	r11
     a10:	08 95       	ret

00000a12 <adc_mic>:
     a12:	0e 94 ba 04 	call	0x974	; 0x974 <Get_AD_MIC>
     a16:	80 91 5b 02 	lds	r24, 0x025B
     a1a:	08 95       	ret

00000a1c <Get_VOLTAGE>:
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 59 02 	sts	0x0259, r24
     a22:	80 93 3e 02 	sts	0x023E, r24
     a26:	81 e2       	ldi	r24, 0x21	; 33
     a28:	87 b9       	out	0x07, r24	; 7
     a2a:	8c ed       	ldi	r24, 0xDC	; 220
     a2c:	86 b9       	out	0x06, r24	; 6
     a2e:	36 99       	sbic	0x06, 6	; 6
     a30:	fe cf       	rjmp	.-4      	; 0xa2e <Get_VOLTAGE+0x12>
     a32:	08 95       	ret

00000a34 <delay_ms>:
extern void printline(char *c);  //femto.c
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
     a34:	6a e0       	ldi	r22, 0x0A	; 10
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
     a3c:	70 93 62 02 	sts	0x0262, r23
     a40:	60 93 61 02 	sts	0x0261, r22
	g10Mtimer=ms/10;
	while (g10Mtimer>0)
     a44:	80 91 61 02 	lds	r24, 0x0261
     a48:	90 91 62 02 	lds	r25, 0x0262
     a4c:	89 2b       	or	r24, r25
     a4e:	d1 f7       	brne	.-12     	; 0xa44 <delay_ms+0x10>
	{
	}
}
     a50:	08 95       	ret

00000a52 <__vector_16>:

//------------------------------------------------------------------------------
// Timer
//------------------------------------------------------------------------------
ISR(TIMER0_OVF_vect)
{
     a52:	1f 92       	push	r1
     a54:	0f 92       	push	r0
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	0f 92       	push	r0
     a5a:	11 24       	eor	r1, r1
     a5c:	8f 93       	push	r24
     a5e:	9f 93       	push	r25
	TCNT0 = 111;
     a60:	8f e6       	ldi	r24, 0x6F	; 111
     a62:	82 bf       	out	0x32, r24	; 50
	if (g10Mtimer>0) g10Mtimer--; //count down timer
     a64:	80 91 61 02 	lds	r24, 0x0261
     a68:	90 91 62 02 	lds	r25, 0x0262
     a6c:	89 2b       	or	r24, r25
     a6e:	49 f0       	breq	.+18     	; 0xa82 <__vector_16+0x30>
     a70:	80 91 61 02 	lds	r24, 0x0261
     a74:	90 91 62 02 	lds	r25, 0x0262
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	90 93 62 02 	sts	0x0262, r25
     a7e:	80 93 61 02 	sts	0x0261, r24
	
	if(++g10MSEC > 99){
     a82:	80 91 65 02 	lds	r24, 0x0265
     a86:	90 91 66 02 	lds	r25, 0x0266
     a8a:	01 96       	adiw	r24, 0x01	; 1
     a8c:	90 93 66 02 	sts	0x0266, r25
     a90:	80 93 65 02 	sts	0x0265, r24
     a94:	80 91 65 02 	lds	r24, 0x0265
     a98:	90 91 66 02 	lds	r25, 0x0266
     a9c:	84 36       	cpi	r24, 0x64	; 100
     a9e:	91 05       	cpc	r25, r1
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <__vector_16+0x52>
     aa2:	43 c0       	rjmp	.+134    	; 0xb2a <__vector_16+0xd8>
        g10MSEC = 0;
     aa4:	10 92 66 02 	sts	0x0266, r1
     aa8:	10 92 65 02 	sts	0x0265, r1
        if(gSEC_DCOUNT > 0)	gSEC_DCOUNT--;
     aac:	80 91 68 02 	lds	r24, 0x0268
     ab0:	90 91 69 02 	lds	r25, 0x0269
     ab4:	89 2b       	or	r24, r25
     ab6:	49 f0       	breq	.+18     	; 0xaca <__vector_16+0x78>
     ab8:	80 91 68 02 	lds	r24, 0x0268
     abc:	90 91 69 02 	lds	r25, 0x0269
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	90 93 69 02 	sts	0x0269, r25
     ac6:	80 93 68 02 	sts	0x0268, r24
        if(++gSEC > 59){
     aca:	80 91 67 02 	lds	r24, 0x0267
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	80 93 67 02 	sts	0x0267, r24
     ad4:	80 91 67 02 	lds	r24, 0x0267
     ad8:	8c 33       	cpi	r24, 0x3C	; 60
     ada:	38 f1       	brcs	.+78     	; 0xb2a <__vector_16+0xd8>
            gSEC = 0;
     adc:	10 92 67 02 	sts	0x0267, r1
	        if(gMIN_DCOUNT > 0)	gMIN_DCOUNT--;
     ae0:	80 91 6c 02 	lds	r24, 0x026C
     ae4:	90 91 6d 02 	lds	r25, 0x026D
     ae8:	89 2b       	or	r24, r25
     aea:	49 f0       	breq	.+18     	; 0xafe <__vector_16+0xac>
     aec:	80 91 6c 02 	lds	r24, 0x026C
     af0:	90 91 6d 02 	lds	r25, 0x026D
     af4:	01 97       	sbiw	r24, 0x01	; 1
     af6:	90 93 6d 02 	sts	0x026D, r25
     afa:	80 93 6c 02 	sts	0x026C, r24
            if(++gMIN > 59){
     afe:	80 91 5e 02 	lds	r24, 0x025E
     b02:	8f 5f       	subi	r24, 0xFF	; 255
     b04:	80 93 5e 02 	sts	0x025E, r24
     b08:	80 91 5e 02 	lds	r24, 0x025E
     b0c:	8c 33       	cpi	r24, 0x3C	; 60
     b0e:	68 f0       	brcs	.+26     	; 0xb2a <__vector_16+0xd8>
                gMIN = 0;
     b10:	10 92 5e 02 	sts	0x025E, r1
                if(++gHOUR > 23)
     b14:	80 91 60 02 	lds	r24, 0x0260
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	80 93 60 02 	sts	0x0260, r24
     b1e:	80 91 60 02 	lds	r24, 0x0260
     b22:	88 31       	cpi	r24, 0x18	; 24
     b24:	10 f0       	brcs	.+4      	; 0xb2a <__vector_16+0xd8>
                    gHOUR = 0;
     b26:	10 92 60 02 	sts	0x0260, r1
            }
		}
    }
}
     b2a:	9f 91       	pop	r25
     b2c:	8f 91       	pop	r24
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	0f 90       	pop	r0
     b34:	1f 90       	pop	r1
     b36:	18 95       	reti

00000b38 <DetectPower>:

//------------------------------------------------------------------------------
// 
//------------------------------------------------------------------------------
void DetectPower(void)
{
     b38:	80 91 5d 02 	lds	r24, 0x025D
     b3c:	88 23       	and	r24, r24
     b3e:	11 f1       	breq	.+68     	; 0xb84 <DetectPower+0x4c>
	if(F_PS_PLUGGED){
		if(gVOLTAGE >= U_T_OF_POWER)
     b40:	80 91 55 02 	lds	r24, 0x0255
     b44:	90 91 56 02 	lds	r25, 0x0256
     b48:	8c 51       	subi	r24, 0x1C	; 28
     b4a:	95 42       	sbci	r25, 0x25	; 37
     b4c:	28 f0       	brcs	.+10     	; 0xb58 <DetectPower+0x20>
			gPSunplugCount = 0;
     b4e:	10 92 6f 02 	sts	0x026F, r1
     b52:	10 92 6e 02 	sts	0x026E, r1
     b56:	09 c0       	rjmp	.+18     	; 0xb6a <DetectPower+0x32>
		else
			gPSunplugCount++;
     b58:	80 91 6e 02 	lds	r24, 0x026E
     b5c:	90 91 6f 02 	lds	r25, 0x026F
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	90 93 6f 02 	sts	0x026F, r25
     b66:	80 93 6e 02 	sts	0x026E, r24
		if(gPSunplugCount > 6){
     b6a:	80 91 6e 02 	lds	r24, 0x026E
     b6e:	90 91 6f 02 	lds	r25, 0x026F
     b72:	07 97       	sbiw	r24, 0x07	; 7
     b74:	68 f1       	brcs	.+90     	; 0xbd0 <DetectPower+0x98>
			F_PS_PLUGGED = 0;
     b76:	10 92 5d 02 	sts	0x025D, r1
			gPSunplugCount = 0;
     b7a:	10 92 6f 02 	sts	0x026F, r1
     b7e:	10 92 6e 02 	sts	0x026E, r1
     b82:	08 95       	ret
		}
	}
	else{
		if(gVOLTAGE >= U_T_OF_POWER){
     b84:	80 91 55 02 	lds	r24, 0x0255
     b88:	90 91 56 02 	lds	r25, 0x0256
     b8c:	8c 51       	subi	r24, 0x1C	; 28
     b8e:	95 42       	sbci	r25, 0x25	; 37
     b90:	70 f0       	brcs	.+28     	; 0xbae <DetectPower+0x76>
			gPSunplugCount = 0;
     b92:	10 92 6f 02 	sts	0x026F, r1
     b96:	10 92 6e 02 	sts	0x026E, r1
			gPSplugCount++;
     b9a:	80 91 63 02 	lds	r24, 0x0263
     b9e:	90 91 64 02 	lds	r25, 0x0264
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 64 02 	sts	0x0264, r25
     ba8:	80 93 63 02 	sts	0x0263, r24
     bac:	04 c0       	rjmp	.+8      	; 0xbb6 <DetectPower+0x7e>
		}
		else{
			gPSplugCount = 0;
     bae:	10 92 64 02 	sts	0x0264, r1
     bb2:	10 92 63 02 	sts	0x0263, r1
		}

		if(gPSplugCount>2){
     bb6:	80 91 63 02 	lds	r24, 0x0263
     bba:	90 91 64 02 	lds	r25, 0x0264
     bbe:	03 97       	sbiw	r24, 0x03	; 3
     bc0:	38 f0       	brcs	.+14     	; 0xbd0 <DetectPower+0x98>
			F_PS_PLUGGED = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 5d 02 	sts	0x025D, r24
			gPSplugCount = 0;
     bc8:	10 92 64 02 	sts	0x0264, r1
     bcc:	10 92 63 02 	sts	0x0263, r1
     bd0:	08 95       	ret

00000bd2 <SelfTest1>:
//------------------------------------------------------------------------------
// Simple self test
//------------------------------------------------------------------------------

void SelfTest1(void)
{
     bd2:	80 91 65 00 	lds	r24, 0x0065
     bd6:	8b 7f       	andi	r24, 0xFB	; 251
     bd8:	80 93 65 00 	sts	0x0065, r24
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     bdc:	86 e0       	ldi	r24, 0x06	; 6
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 62 02 	sts	0x0262, r25
     be4:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     be8:	80 91 61 02 	lds	r24, 0x0261
     bec:	90 91 62 02 	lds	r25, 0x0262
     bf0:	89 2b       	or	r24, r25
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <SelfTest1+0x16>
// Simple self test
//------------------------------------------------------------------------------

void SelfTest1(void)
{
	PWR_LED1_ON;	delay_ms(60);	PWR_LED1_OFF;
     bf4:	80 91 65 00 	lds	r24, 0x0065
     bf8:	84 60       	ori	r24, 0x04	; 4
     bfa:	80 93 65 00 	sts	0x0065, r24
	PWR_LED2_ON;	delay_ms(60);	PWR_LED2_OFF;
     bfe:	af 98       	cbi	0x15, 7	; 21
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     c00:	86 e0       	ldi	r24, 0x06	; 6
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 62 02 	sts	0x0262, r25
     c08:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     c0c:	80 91 61 02 	lds	r24, 0x0261
     c10:	90 91 62 02 	lds	r25, 0x0262
     c14:	89 2b       	or	r24, r25
     c16:	d1 f7       	brne	.-12     	; 0xc0c <SelfTest1+0x3a>
//------------------------------------------------------------------------------

void SelfTest1(void)
{
	PWR_LED1_ON;	delay_ms(60);	PWR_LED1_OFF;
	PWR_LED2_ON;	delay_ms(60);	PWR_LED2_OFF;
     c18:	af 9a       	sbi	0x15, 7	; 21
	RUN_LED1_ON;	delay_ms(60);	RUN_LED1_OFF;
     c1a:	dd 98       	cbi	0x1b, 5	; 27
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	90 93 62 02 	sts	0x0262, r25
     c24:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     c28:	80 91 61 02 	lds	r24, 0x0261
     c2c:	90 91 62 02 	lds	r25, 0x0262
     c30:	89 2b       	or	r24, r25
     c32:	d1 f7       	brne	.-12     	; 0xc28 <SelfTest1+0x56>

void SelfTest1(void)
{
	PWR_LED1_ON;	delay_ms(60);	PWR_LED1_OFF;
	PWR_LED2_ON;	delay_ms(60);	PWR_LED2_OFF;
	RUN_LED1_ON;	delay_ms(60);	RUN_LED1_OFF;
     c34:	dd 9a       	sbi	0x1b, 5	; 27
	RUN_LED2_ON;	delay_ms(60);	RUN_LED2_OFF;
     c36:	de 98       	cbi	0x1b, 6	; 27
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     c38:	86 e0       	ldi	r24, 0x06	; 6
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	90 93 62 02 	sts	0x0262, r25
     c40:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     c44:	80 91 61 02 	lds	r24, 0x0261
     c48:	90 91 62 02 	lds	r25, 0x0262
     c4c:	89 2b       	or	r24, r25
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <SelfTest1+0x72>
void SelfTest1(void)
{
	PWR_LED1_ON;	delay_ms(60);	PWR_LED1_OFF;
	PWR_LED2_ON;	delay_ms(60);	PWR_LED2_OFF;
	RUN_LED1_ON;	delay_ms(60);	RUN_LED1_OFF;
	RUN_LED2_ON;	delay_ms(60);	RUN_LED2_OFF;
     c50:	de 9a       	sbi	0x1b, 6	; 27
	ERR_LED_ON;		delay_ms(60);	ERR_LED_OFF;
     c52:	df 98       	cbi	0x1b, 7	; 27
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     c54:	86 e0       	ldi	r24, 0x06	; 6
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	90 93 62 02 	sts	0x0262, r25
     c5c:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     c60:	80 91 61 02 	lds	r24, 0x0261
     c64:	90 91 62 02 	lds	r25, 0x0262
     c68:	89 2b       	or	r24, r25
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <SelfTest1+0x8e>
{
	PWR_LED1_ON;	delay_ms(60);	PWR_LED1_OFF;
	PWR_LED2_ON;	delay_ms(60);	PWR_LED2_OFF;
	RUN_LED1_ON;	delay_ms(60);	RUN_LED1_OFF;
	RUN_LED2_ON;	delay_ms(60);	RUN_LED2_OFF;
	ERR_LED_ON;		delay_ms(60);	ERR_LED_OFF;
     c6c:	df 9a       	sbi	0x1b, 7	; 27

	PF2_LED_ON;		delay_ms(60);	PF2_LED_OFF;
     c6e:	dc 98       	cbi	0x1b, 4	; 27
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     c70:	86 e0       	ldi	r24, 0x06	; 6
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	90 93 62 02 	sts	0x0262, r25
     c78:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     c7c:	80 91 61 02 	lds	r24, 0x0261
     c80:	90 91 62 02 	lds	r25, 0x0262
     c84:	89 2b       	or	r24, r25
     c86:	d1 f7       	brne	.-12     	; 0xc7c <SelfTest1+0xaa>
	PWR_LED2_ON;	delay_ms(60);	PWR_LED2_OFF;
	RUN_LED1_ON;	delay_ms(60);	RUN_LED1_OFF;
	RUN_LED2_ON;	delay_ms(60);	RUN_LED2_OFF;
	ERR_LED_ON;		delay_ms(60);	ERR_LED_OFF;

	PF2_LED_ON;		delay_ms(60);	PF2_LED_OFF;
     c88:	dc 9a       	sbi	0x1b, 4	; 27
	PF1_LED2_ON;	delay_ms(60);	PF1_LED2_OFF;
     c8a:	db 98       	cbi	0x1b, 3	; 27
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     c8c:	86 e0       	ldi	r24, 0x06	; 6
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	90 93 62 02 	sts	0x0262, r25
     c94:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     c98:	80 91 61 02 	lds	r24, 0x0261
     c9c:	90 91 62 02 	lds	r25, 0x0262
     ca0:	89 2b       	or	r24, r25
     ca2:	d1 f7       	brne	.-12     	; 0xc98 <SelfTest1+0xc6>
	RUN_LED1_ON;	delay_ms(60);	RUN_LED1_OFF;
	RUN_LED2_ON;	delay_ms(60);	RUN_LED2_OFF;
	ERR_LED_ON;		delay_ms(60);	ERR_LED_OFF;

	PF2_LED_ON;		delay_ms(60);	PF2_LED_OFF;
	PF1_LED2_ON;	delay_ms(60);	PF1_LED2_OFF;
     ca4:	db 9a       	sbi	0x1b, 3	; 27
	PF1_LED1_ON;	delay_ms(60);	PF1_LED1_OFF;
     ca6:	da 98       	cbi	0x1b, 2	; 27
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	90 93 62 02 	sts	0x0262, r25
     cb0:	80 93 61 02 	sts	0x0261, r24
	while (g10Mtimer>0)
     cb4:	80 91 61 02 	lds	r24, 0x0261
     cb8:	90 91 62 02 	lds	r25, 0x0262
     cbc:	89 2b       	or	r24, r25
     cbe:	d1 f7       	brne	.-12     	; 0xcb4 <SelfTest1+0xe2>
	RUN_LED2_ON;	delay_ms(60);	RUN_LED2_OFF;
	ERR_LED_ON;		delay_ms(60);	ERR_LED_OFF;

	PF2_LED_ON;		delay_ms(60);	PF2_LED_OFF;
	PF1_LED2_ON;	delay_ms(60);	PF1_LED2_OFF;
	PF1_LED1_ON;	delay_ms(60);	PF1_LED1_OFF;
     cc0:	da 9a       	sbi	0x1b, 2	; 27
}
     cc2:	08 95       	ret

00000cc4 <ChargeNiMH>:

//-----------------------------------------------------------------------------
// 
//-----------------------------------------------------------------------------
void ChargeNiMH(void)
{
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
	F_CHARGING = 1;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	80 93 5f 02 	sts	0x025F, r24
	gMIN_DCOUNT = 5;
     cd6:	85 e0       	ldi	r24, 0x05	; 5
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	90 93 6d 02 	sts	0x026D, r25
     cde:	80 93 6c 02 	sts	0x026C, r24
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     ce2:	84 e0       	ldi	r24, 0x04	; 4
     ce4:	e8 2e       	mov	r14, r24
     ce6:	f1 2c       	mov	r15, r1
void ChargeNiMH(void)
{
	F_CHARGING = 1;
	gMIN_DCOUNT = 5;
	while(gMIN_DCOUNT){
		PWR_LED2_OFF;
     ce8:	0e e2       	ldi	r16, 0x2E	; 46
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	c2 e3       	ldi	r28, 0x32	; 50
     cee:	d0 e0       	ldi	r29, 0x00	; 0
     cf0:	3b c0       	rjmp	.+118    	; 0xd68 <ChargeNiMH+0xa4>
     cf2:	af 9a       	sbi	0x15, 7	; 21
		PWR_LED1_ON;
     cf4:	80 91 65 00 	lds	r24, 0x0065
     cf8:	8b 7f       	andi	r24, 0xFB	; 251
     cfa:	80 93 65 00 	sts	0x0065, r24
		Get_VOLTAGE();	DetectPower();
     cfe:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Get_VOLTAGE>
     d02:	0e 94 9c 05 	call	0xb38	; 0xb38 <DetectPower>
		if(F_PS_PLUGGED == 0) break;
     d06:	80 91 5d 02 	lds	r24, 0x025D
     d0a:	88 23       	and	r24, r24
     d0c:	a1 f1       	breq	.+104    	; 0xd76 <ChargeNiMH+0xb2>
		CHARGE_ENABLE;
     d0e:	c4 9a       	sbi	0x18, 4	; 24
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     d10:	f0 92 62 02 	sts	0x0262, r15
     d14:	e0 92 61 02 	sts	0x0261, r14
	while (g10Mtimer>0)
     d18:	80 91 61 02 	lds	r24, 0x0261
     d1c:	90 91 62 02 	lds	r25, 0x0262
     d20:	89 2b       	or	r24, r25
     d22:	d1 f7       	brne	.-12     	; 0xd18 <ChargeNiMH+0x54>
		PWR_LED1_ON;
		Get_VOLTAGE();	DetectPower();
		if(F_PS_PLUGGED == 0) break;
		CHARGE_ENABLE;
		delay_ms(40);
		CHARGE_DISABLE;
     d24:	c4 98       	cbi	0x18, 4	; 24
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     d26:	10 93 62 02 	sts	0x0262, r17
     d2a:	00 93 61 02 	sts	0x0261, r16
	while (g10Mtimer>0)
     d2e:	80 91 61 02 	lds	r24, 0x0261
     d32:	90 91 62 02 	lds	r25, 0x0262
     d36:	89 2b       	or	r24, r25
     d38:	d1 f7       	brne	.-12     	; 0xd2e <ChargeNiMH+0x6a>
		if(F_PS_PLUGGED == 0) break;
		CHARGE_ENABLE;
		delay_ms(40);
		CHARGE_DISABLE;
		delay_ms(500-40);
		PWR_LED1_OFF;
     d3a:	80 91 65 00 	lds	r24, 0x0065
     d3e:	84 60       	ori	r24, 0x04	; 4
     d40:	80 93 65 00 	sts	0x0065, r24
		Get_VOLTAGE();	DetectPower();
     d44:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Get_VOLTAGE>
     d48:	0e 94 9c 05 	call	0xb38	; 0xb38 <DetectPower>
		if(F_PS_PLUGGED == 0) break;
     d4c:	80 91 5d 02 	lds	r24, 0x025D
     d50:	88 23       	and	r24, r24
     d52:	89 f0       	breq	.+34     	; 0xd76 <ChargeNiMH+0xb2>
extern void printint(int);  	 //femto.c
#define HEADER			0xFF 

void delay_ms(int ms)
{
	g10Mtimer=ms/10;
     d54:	d0 93 62 02 	sts	0x0262, r29
     d58:	c0 93 61 02 	sts	0x0261, r28
	while (g10Mtimer>0)
     d5c:	80 91 61 02 	lds	r24, 0x0261
     d60:	90 91 62 02 	lds	r25, 0x0262
     d64:	89 2b       	or	r24, r25
     d66:	d1 f7       	brne	.-12     	; 0xd5c <ChargeNiMH+0x98>
//-----------------------------------------------------------------------------
void ChargeNiMH(void)
{
	F_CHARGING = 1;
	gMIN_DCOUNT = 5;
	while(gMIN_DCOUNT){
     d68:	80 91 6c 02 	lds	r24, 0x026C
     d6c:	90 91 6d 02 	lds	r25, 0x026D
     d70:	89 2b       	or	r24, r25
     d72:	09 f0       	breq	.+2      	; 0xd76 <ChargeNiMH+0xb2>
     d74:	be cf       	rjmp	.-132    	; 0xcf2 <ChargeNiMH+0x2e>
		PWR_LED1_OFF;
		Get_VOLTAGE();	DetectPower();
		if(F_PS_PLUGGED == 0) break;
		delay_ms(500);
	}
	gMIN_DCOUNT = 85;
     d76:	85 e5       	ldi	r24, 0x55	; 85
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	90 93 6d 02 	sts	0x026D, r25
     d7e:	80 93 6c 02 	sts	0x026C, r24
     d82:	25 c0       	rjmp	.+74     	; 0xdce <ChargeNiMH+0x10a>
	while(gMIN_DCOUNT){
		PWR_LED2_OFF;
     d84:	af 9a       	sbi	0x15, 7	; 21
		if(g10MSEC > 50)	PWR_LED1_ON;
     d86:	80 91 65 02 	lds	r24, 0x0265
     d8a:	90 91 66 02 	lds	r25, 0x0266
     d8e:	c3 97       	sbiw	r24, 0x33	; 51
     d90:	20 f0       	brcs	.+8      	; 0xd9a <ChargeNiMH+0xd6>
     d92:	80 91 65 00 	lds	r24, 0x0065
     d96:	8b 7f       	andi	r24, 0xFB	; 251
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <ChargeNiMH+0xdc>
		else			PWR_LED1_OFF;
     d9a:	80 91 65 00 	lds	r24, 0x0065
     d9e:	84 60       	ori	r24, 0x04	; 4
     da0:	80 93 65 00 	sts	0x0065, r24
		if(g10MSEC == 0 || g10MSEC == 50){
     da4:	80 91 65 02 	lds	r24, 0x0265
     da8:	90 91 66 02 	lds	r25, 0x0266
     dac:	89 2b       	or	r24, r25
     dae:	31 f0       	breq	.+12     	; 0xdbc <ChargeNiMH+0xf8>
     db0:	80 91 65 02 	lds	r24, 0x0265
     db4:	90 91 66 02 	lds	r25, 0x0266
     db8:	c2 97       	sbiw	r24, 0x32	; 50
     dba:	21 f4       	brne	.+8      	; 0xdc4 <ChargeNiMH+0x100>
			Get_VOLTAGE();
     dbc:	0e 94 0e 05 	call	0xa1c	; 0xa1c <Get_VOLTAGE>
			DetectPower();
     dc0:	0e 94 9c 05 	call	0xb38	; 0xb38 <DetectPower>
		}
		if(F_PS_PLUGGED == 0) break;
     dc4:	80 91 5d 02 	lds	r24, 0x025D
     dc8:	88 23       	and	r24, r24
     dca:	39 f0       	breq	.+14     	; 0xdda <ChargeNiMH+0x116>
		CHARGE_ENABLE;
     dcc:	c4 9a       	sbi	0x18, 4	; 24
		Get_VOLTAGE();	DetectPower();
		if(F_PS_PLUGGED == 0) break;
		delay_ms(500);
	}
	gMIN_DCOUNT = 85;
	while(gMIN_DCOUNT){
     dce:	80 91 6c 02 	lds	r24, 0x026C
     dd2:	90 91 6d 02 	lds	r25, 0x026D
     dd6:	89 2b       	or	r24, r25
     dd8:	a9 f6       	brne	.-86     	; 0xd84 <ChargeNiMH+0xc0>
			DetectPower();
		}
		if(F_PS_PLUGGED == 0) break;
		CHARGE_ENABLE;
	}
	CHARGE_DISABLE;
     dda:	c4 98       	cbi	0x18, 4	; 24
	F_CHARGING = 0;
     ddc:	10 92 5f 02 	sts	0x025F, r1
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <BreakModeCmdSend>:

//------------------------------------------------------------------------------
// set wck modules to btreak mode
//------------------------------------------------------------------------------
void BreakModeCmdSend(void)
{
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 67 00 	call	0xce	; 0xce <putByte>
	Data1 = (6<<5) | 31;
	Data2 = 0x20;
	CheckSum = (Data1^Data2)&0x7f;

	putByte(HEADER);
	putByte(Data1);
     df6:	8f ed       	ldi	r24, 0xDF	; 223
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 67 00 	call	0xce	; 0xce <putByte>
	putByte(Data2);
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 67 00 	call	0xce	; 0xce <putByte>
	putByte(CheckSum);
     e06:	8f e7       	ldi	r24, 0x7F	; 127
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 67 00 	call	0xce	; 0xce <putByte>
} 
     e0e:	08 95       	ret

00000e10 <test>:
	CHARGE_DISABLE;
	F_CHARGING = 0;
}

void test()
{
     e10:	80 91 55 02 	lds	r24, 0x0255
     e14:	90 91 56 02 	lds	r25, 0x0256
     e18:	89 59       	subi	r24, 0x99	; 153
     e1a:	91 42       	sbci	r25, 0x21	; 33
     e1c:	58 f0       	brcs	.+22     	; 0xe34 <test+0x24>
	if(gVOLTAGE>M_T_OF_POWER){
		PWR_LED1_ON;
     e1e:	80 91 65 00 	lds	r24, 0x0065
     e22:	8b 7f       	andi	r24, 0xFB	; 251
     e24:	80 93 65 00 	sts	0x0065, r24
		PWR_LED2_OFF;
     e28:	af 9a       	sbi	0x15, 7	; 21
		gPwrLowCount = 0;
     e2a:	10 92 6b 02 	sts	0x026B, r1
     e2e:	10 92 6a 02 	sts	0x026A, r1
     e32:	08 95       	ret
	}
	else if(gVOLTAGE>L_T_OF_POWER){
     e34:	80 91 55 02 	lds	r24, 0x0255
     e38:	90 91 56 02 	lds	r25, 0x0256
     e3c:	85 5a       	subi	r24, 0xA5	; 165
     e3e:	9f 41       	sbci	r25, 0x1F	; 31
     e40:	f0 f0       	brcs	.+60     	; 0xe7e <test+0x6e>
		PWR_LED1_OFF;
     e42:	80 91 65 00 	lds	r24, 0x0065
     e46:	84 60       	ori	r24, 0x04	; 4
     e48:	80 93 65 00 	sts	0x0065, r24
		PWR_LED2_ON;
     e4c:	af 98       	cbi	0x15, 7	; 21
		gPwrLowCount++;
     e4e:	80 91 6a 02 	lds	r24, 0x026A
     e52:	90 91 6b 02 	lds	r25, 0x026B
     e56:	01 96       	adiw	r24, 0x01	; 1
     e58:	90 93 6b 02 	sts	0x026B, r25
     e5c:	80 93 6a 02 	sts	0x026A, r24
		if(gPwrLowCount>5000){
     e60:	80 91 6a 02 	lds	r24, 0x026A
     e64:	90 91 6b 02 	lds	r25, 0x026B
     e68:	89 58       	subi	r24, 0x89	; 137
     e6a:	93 41       	sbci	r25, 0x13	; 19
     e6c:	08 f4       	brcc	.+2      	; 0xe70 <test+0x60>
     e6e:	3f c0       	rjmp	.+126    	; 0xeee <test+0xde>
			gPwrLowCount = 0;
     e70:	10 92 6b 02 	sts	0x026B, r1
     e74:	10 92 6a 02 	sts	0x026A, r1
			BreakModeCmdSend();
     e78:	0e 94 f7 06 	call	0xdee	; 0xdee <BreakModeCmdSend>
     e7c:	08 95       	ret
		}
	}
	else{
		PWR_LED1_OFF;
     e7e:	80 91 65 00 	lds	r24, 0x0065
     e82:	84 60       	ori	r24, 0x04	; 4
     e84:	80 93 65 00 	sts	0x0065, r24
		if(g10MSEC<25)			PWR_LED2_ON;
     e88:	80 91 65 02 	lds	r24, 0x0265
     e8c:	90 91 66 02 	lds	r25, 0x0266
     e90:	49 97       	sbiw	r24, 0x19	; 25
     e92:	68 f0       	brcs	.+26     	; 0xeae <test+0x9e>
		else if(g10MSEC<50)		PWR_LED2_OFF;
     e94:	80 91 65 02 	lds	r24, 0x0265
     e98:	90 91 66 02 	lds	r25, 0x0266
     e9c:	c2 97       	sbiw	r24, 0x32	; 50
     e9e:	80 f0       	brcs	.+32     	; 0xec0 <test+0xb0>
		else if(g10MSEC<75)		PWR_LED2_ON;
     ea0:	80 91 65 02 	lds	r24, 0x0265
     ea4:	90 91 66 02 	lds	r25, 0x0266
     ea8:	8b 34       	cpi	r24, 0x4B	; 75
     eaa:	91 05       	cpc	r25, r1
     eac:	10 f4       	brcc	.+4      	; 0xeb2 <test+0xa2>
     eae:	af 98       	cbi	0x15, 7	; 21
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <test+0xb2>
		else if(g10MSEC<100)	PWR_LED2_OFF;
     eb2:	80 91 65 02 	lds	r24, 0x0265
     eb6:	90 91 66 02 	lds	r25, 0x0266
     eba:	84 36       	cpi	r24, 0x64	; 100
     ebc:	91 05       	cpc	r25, r1
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <test+0xb2>
     ec0:	af 9a       	sbi	0x15, 7	; 21
		gPwrLowCount++;
     ec2:	80 91 6a 02 	lds	r24, 0x026A
     ec6:	90 91 6b 02 	lds	r25, 0x026B
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	90 93 6b 02 	sts	0x026B, r25
     ed0:	80 93 6a 02 	sts	0x026A, r24
		if(gPwrLowCount>3000){
     ed4:	80 91 6a 02 	lds	r24, 0x026A
     ed8:	90 91 6b 02 	lds	r25, 0x026B
     edc:	89 5b       	subi	r24, 0xB9	; 185
     ede:	9b 40       	sbci	r25, 0x0B	; 11
     ee0:	30 f0       	brcs	.+12     	; 0xeee <test+0xde>
			gPwrLowCount=0;
     ee2:	10 92 6b 02 	sts	0x026B, r1
     ee6:	10 92 6a 02 	sts	0x026A, r1
			BreakModeCmdSend();
     eea:	0e 94 f7 06 	call	0xdee	; 0xdee <BreakModeCmdSend>
     eee:	08 95       	ret

00000ef0 <getByte>:
#define RX_COMPLETE			(1<<RXC)

extern void putByte (BYTE b);

int getByte()
{
     ef0:	80 91 9b 00 	lds	r24, 0x009B
     ef4:	87 ff       	sbrs	r24, 7
     ef6:	fc cf       	rjmp	.-8      	; 0xef0 <getByte>
	while(!(UCSR1A & RX_COMPLETE)) ;
	return UDR1;
     ef8:	80 91 9c 00 	lds	r24, 0x009C
}
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	08 95       	ret

00000f00 <ungetch>:
	}		
	inputbuffer[ibcnt]=0;
}

void ungetch(int c)
{
     f00:	e0 91 d6 02 	lds	r30, 0x02D6
     f04:	f0 91 d7 02 	lds	r31, 0x02D7
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	e2 37       	cpi	r30, 0x72	; 114
     f0c:	f9 07       	cpc	r31, r25
     f0e:	39 f0       	breq	.+14     	; 0xf1e <ungetch+0x1e>
     f10:	30 f0       	brcs	.+12     	; 0xf1e <ungetch+0x1e>
	if (ibptr>inputbuffer)
	{
		--ibptr;
     f12:	31 97       	sbiw	r30, 0x01	; 1
     f14:	f0 93 d7 02 	sts	0x02D7, r31
     f18:	e0 93 d6 02 	sts	0x02D6, r30
		*ibptr=c;
     f1c:	80 83       	st	Z, r24
     f1e:	08 95       	ret

00000f20 <getch>:
	}
}

int getch()
{
     f20:	e0 91 d6 02 	lds	r30, 0x02D6
     f24:	f0 91 d7 02 	lds	r31, 0x02D7
     f28:	80 81       	ld	r24, Z
     f2a:	88 23       	and	r24, r24
     f2c:	19 f4       	brne	.+6      	; 0xf34 <getch+0x14>
     f2e:	2f ef       	ldi	r18, 0xFF	; 255
     f30:	3f ef       	ldi	r19, 0xFF	; 255
     f32:	07 c0       	rjmp	.+14     	; 0xf42 <getch+0x22>
	if (*ibptr!=0)
		return *ibptr++;
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	31 96       	adiw	r30, 0x01	; 1
     f3a:	f0 93 d7 02 	sts	0x02D7, r31
     f3e:	e0 93 d6 02 	sts	0x02D6, r30
	return -1;
}
     f42:	c9 01       	movw	r24, r18
     f44:	08 95       	ret

00000f46 <readdigit>:
	int type;
	union { int n; struct cell c; char *s;};
};

int readdigit()
{
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	1c c0       	rjmp	.+56     	; 0xf84 <readdigit+0x3e>
	int num = 0;
	int ch = 0;
	while ((ch = getch()) > 0)
	{
		if (!(ch>='0' && ch<='9'))
     f4c:	ac 01       	movw	r20, r24
     f4e:	40 53       	subi	r20, 0x30	; 48
     f50:	50 40       	sbci	r21, 0x00	; 0
     f52:	4a 30       	cpi	r20, 0x0A	; 10
     f54:	51 05       	cpc	r21, r1
     f56:	50 f0       	brcs	.+20     	; 0xf6c <readdigit+0x26>
	inputbuffer[ibcnt]=0;
}

void ungetch(int c)
{
	if (ibptr>inputbuffer)
     f58:	62 57       	subi	r22, 0x72	; 114
     f5a:	72 40       	sbci	r23, 0x02	; 2
     f5c:	21 f1       	breq	.+72     	; 0xfa6 <readdigit+0x60>
     f5e:	18 f1       	brcs	.+70     	; 0xfa6 <readdigit+0x60>
	{
		--ibptr;
     f60:	f0 93 d7 02 	sts	0x02D7, r31
     f64:	e0 93 d6 02 	sts	0x02D6, r30
		*ibptr=c;
     f68:	80 83       	st	Z, r24
     f6a:	1d c0       	rjmp	.+58     	; 0xfa6 <readdigit+0x60>
		if (!(ch>='0' && ch<='9'))
		{
			ungetch(ch);
			return num;
		}
		num = num * 10 + (ch - '0');
     f6c:	c9 01       	movw	r24, r18
     f6e:	73 e0       	ldi	r23, 0x03	; 3
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	7a 95       	dec	r23
     f76:	e1 f7       	brne	.-8      	; 0xf70 <readdigit+0x2a>
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	28 0f       	add	r18, r24
     f7e:	39 1f       	adc	r19, r25
     f80:	24 0f       	add	r18, r20
     f82:	35 1f       	adc	r19, r21
	}
}

int getch()
{
	if (*ibptr!=0)
     f84:	e0 91 d6 02 	lds	r30, 0x02D6
     f88:	f0 91 d7 02 	lds	r31, 0x02D7
     f8c:	80 81       	ld	r24, Z
     f8e:	88 23       	and	r24, r24
     f90:	51 f0       	breq	.+20     	; 0xfa6 <readdigit+0x60>
		return *ibptr++;
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	bf 01       	movw	r22, r30
     f96:	6f 5f       	subi	r22, 0xFF	; 255
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	70 93 d7 02 	sts	0x02D7, r23
     f9e:	60 93 d6 02 	sts	0x02D6, r22

int readdigit()
{
	int num = 0;
	int ch = 0;
	while ((ch = getch()) > 0)
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	99 f6       	brne	.-90     	; 0xf4c <readdigit+0x6>
			return num;
		}
		num = num * 10 + (ch - '0');
	}
	return num;
}
     fa6:	c9 01       	movw	r24, r18
     fa8:	08 95       	ret

00000faa <readstring>:

char * readstring()
{
     faa:	46 e2       	ldi	r20, 0x26	; 38
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	05 c0       	rjmp	.+10     	; 0xfba <readstring+0x10>
	char* str = "";
	int ch = 0;
	while ((ch = getch()) > 0)
	{
		if (ch=='"')
     fb0:	22 32       	cpi	r18, 0x22	; 34
     fb2:	31 05       	cpc	r19, r1
     fb4:	99 f0       	breq	.+38     	; 0xfdc <readstring+0x32>
			return str;
		str += (char)ch;
     fb6:	42 0f       	add	r20, r18
     fb8:	53 1f       	adc	r21, r19
	}
}

int getch()
{
	if (*ibptr!=0)
     fba:	e0 91 d6 02 	lds	r30, 0x02D6
     fbe:	f0 91 d7 02 	lds	r31, 0x02D7
     fc2:	80 81       	ld	r24, Z
     fc4:	88 23       	and	r24, r24
     fc6:	51 f0       	breq	.+20     	; 0xfdc <readstring+0x32>
		return *ibptr++;
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	31 96       	adiw	r30, 0x01	; 1
     fce:	f0 93 d7 02 	sts	0x02D7, r31
     fd2:	e0 93 d6 02 	sts	0x02D6, r30

char * readstring()
{
	char* str = "";
	int ch = 0;
	while ((ch = getch()) > 0)
     fd6:	21 15       	cp	r18, r1
     fd8:	31 05       	cpc	r19, r1
     fda:	51 f7       	brne	.-44     	; 0xfb0 <readstring+0x6>
		if (ch=='"')
			return str;
		str += (char)ch;
	}
	return str;
}
     fdc:	ca 01       	movw	r24, r20
     fde:	08 95       	ret

00000fe0 <readtoken>:

char * readtoken()
{
     fe0:	46 e2       	ldi	r20, 0x26	; 38
     fe2:	51 e0       	ldi	r21, 0x01	; 1
     fe4:	0d c0       	rjmp	.+26     	; 0x1000 <readtoken+0x20>
	return str;
}
		
bool isWhiteSpace(int ch)
{
	return (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n');
     fe6:	20 32       	cpi	r18, 0x20	; 32
     fe8:	31 05       	cpc	r19, r1
     fea:	d9 f0       	breq	.+54     	; 0x1022 <readtoken+0x42>
     fec:	29 30       	cpi	r18, 0x09	; 9
     fee:	31 05       	cpc	r19, r1
     ff0:	c1 f0       	breq	.+48     	; 0x1022 <readtoken+0x42>
     ff2:	2d 30       	cpi	r18, 0x0D	; 13
     ff4:	31 05       	cpc	r19, r1
     ff6:	a9 f0       	breq	.+42     	; 0x1022 <readtoken+0x42>
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	31 05       	cpc	r19, r1
     ffc:	a1 f4       	brne	.+40     	; 0x1026 <readtoken+0x46>
     ffe:	11 c0       	rjmp	.+34     	; 0x1022 <readtoken+0x42>
	}
}

int getch()
{
	if (*ibptr!=0)
    1000:	e0 91 d6 02 	lds	r30, 0x02D6
    1004:	f0 91 d7 02 	lds	r31, 0x02D7
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	51 f0       	breq	.+20     	; 0x1022 <readtoken+0x42>
		return *ibptr++;
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	31 96       	adiw	r30, 0x01	; 1
    1014:	f0 93 d7 02 	sts	0x02D7, r31
    1018:	e0 93 d6 02 	sts	0x02D6, r30

char * readtoken()
{
	char * str = "";
	int ch = 0;
	while ((ch = getch()) > 0)
    101c:	21 15       	cp	r18, r1
    101e:	31 05       	cpc	r19, r1
    1020:	11 f7       	brne	.-60     	; 0xfe6 <readtoken+0x6>
		if (isWhiteSpace((char)ch))
			return str;
		str += (char)ch;
	}
	return str;
}
    1022:	ca 01       	movw	r24, r20
    1024:	08 95       	ret
	int ch = 0;
	while ((ch = getch()) > 0)
	{
		if (isWhiteSpace((char)ch))
			return str;
		str += (char)ch;
    1026:	42 0f       	add	r20, r18
    1028:	53 1f       	adc	r21, r19
    102a:	ea cf       	rjmp	.-44     	; 0x1000 <readtoken+0x20>

0000102c <isWhiteSpace>:
	}
	return str;
}
		
bool isWhiteSpace(int ch)
{
    102c:	80 32       	cpi	r24, 0x20	; 32
    102e:	91 05       	cpc	r25, r1
    1030:	51 f0       	breq	.+20     	; 0x1046 <isWhiteSpace+0x1a>
    1032:	89 30       	cpi	r24, 0x09	; 9
    1034:	91 05       	cpc	r25, r1
    1036:	39 f0       	breq	.+14     	; 0x1046 <isWhiteSpace+0x1a>
    1038:	8d 30       	cpi	r24, 0x0D	; 13
    103a:	91 05       	cpc	r25, r1
    103c:	21 f0       	breq	.+8      	; 0x1046 <isWhiteSpace+0x1a>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	0a 97       	sbiw	r24, 0x0a	; 10
    1044:	11 f4       	brne	.+4      	; 0x104a <isWhiteSpace+0x1e>
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	30 e0       	ldi	r19, 0x00	; 0
	return (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n');
}
    104a:	c9 01       	movw	r24, r18
    104c:	08 95       	ret

0000104e <isSymbol>:

bool isSymbol(int ch)
{
    104e:	8b 32       	cpi	r24, 0x2B	; 43
    1050:	91 05       	cpc	r25, r1
    1052:	51 f0       	breq	.+20     	; 0x1068 <isSymbol+0x1a>
    1054:	8d 32       	cpi	r24, 0x2D	; 45
    1056:	91 05       	cpc	r25, r1
    1058:	39 f0       	breq	.+14     	; 0x1068 <isSymbol+0x1a>
    105a:	8f 35       	cpi	r24, 0x5F	; 95
    105c:	91 05       	cpc	r25, r1
    105e:	21 f0       	breq	.+8      	; 0x1068 <isSymbol+0x1a>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	8e 97       	sbiw	r24, 0x2e	; 46
    1066:	11 f4       	brne	.+4      	; 0x106c <isSymbol+0x1e>
    1068:	21 e0       	ldi	r18, 0x01	; 1
    106a:	30 e0       	ldi	r19, 0x00	; 0
	return (ch == '+' || ch == '-' || ch == '_' || ch == '.');
}
    106c:	c9 01       	movw	r24, r18
    106e:	08 95       	ret

00001070 <isLetterorDigit>:

bool isLetterorDigit(int ch)
{
    1070:	9c 01       	movw	r18, r24
    1072:	81 54       	subi	r24, 0x41	; 65
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	4a 97       	sbiw	r24, 0x1a	; 26
    1078:	60 f0       	brcs	.+24     	; 0x1092 <isLetterorDigit+0x22>
    107a:	c9 01       	movw	r24, r18
    107c:	81 56       	subi	r24, 0x61	; 97
    107e:	90 40       	sbci	r25, 0x00	; 0
    1080:	4a 97       	sbiw	r24, 0x1a	; 26
    1082:	38 f0       	brcs	.+14     	; 0x1092 <isLetterorDigit+0x22>
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	20 53       	subi	r18, 0x30	; 48
    108a:	30 40       	sbci	r19, 0x00	; 0
    108c:	2a 30       	cpi	r18, 0x0A	; 10
    108e:	31 05       	cpc	r19, r1
    1090:	10 f4       	brcc	.+4      	; 0x1096 <isLetterorDigit+0x26>
    1092:	41 e0       	ldi	r20, 0x01	; 1
    1094:	50 e0       	ldi	r21, 0x00	; 0
	return ((ch >= 'A' && ch <= 'Z' ) ||
	 (ch >= 'a' && ch <= 'z' ) ||
	 (ch >= '0' && ch <= '9' ) );
}
    1096:	ca 01       	movw	r24, r20
    1098:	08 95       	ret

0000109a <readwhitespace>:

void readwhitespace()
{
    109a:	e0 91 d6 02 	lds	r30, 0x02D6
    109e:	f0 91 d7 02 	lds	r31, 0x02D7
    10a2:	80 81       	ld	r24, Z
    10a4:	88 23       	and	r24, r24
    10a6:	19 f4       	brne	.+6      	; 0x10ae <readwhitespace+0x14>
    10a8:	2f ef       	ldi	r18, 0xFF	; 255
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	16 c0       	rjmp	.+44     	; 0x10da <readwhitespace+0x40>
}

int getch()
{
	if (*ibptr!=0)
		return *ibptr++;
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	31 96       	adiw	r30, 0x01	; 1
    10b4:	f0 93 d7 02 	sts	0x02D7, r31
    10b8:	e0 93 d6 02 	sts	0x02D6, r30
}

void readwhitespace()
{
	int ch = 0;
	while ((ch = getch()) > 0 && isWhiteSpace((char)ch)) ;
    10bc:	21 15       	cp	r18, r1
    10be:	31 05       	cpc	r19, r1
    10c0:	61 f0       	breq	.+24     	; 0x10da <readwhitespace+0x40>
    10c2:	c9 01       	movw	r24, r18
	return str;
}
		
bool isWhiteSpace(int ch)
{
	return (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n');
    10c4:	80 32       	cpi	r24, 0x20	; 32
    10c6:	91 05       	cpc	r25, r1
    10c8:	41 f3       	breq	.-48     	; 0x109a <readwhitespace>
    10ca:	89 30       	cpi	r24, 0x09	; 9
    10cc:	91 05       	cpc	r25, r1
    10ce:	29 f3       	breq	.-54     	; 0x109a <readwhitespace>
    10d0:	8d 30       	cpi	r24, 0x0D	; 13
    10d2:	91 05       	cpc	r25, r1
    10d4:	11 f3       	breq	.-60     	; 0x109a <readwhitespace>
    10d6:	0a 97       	sbiw	r24, 0x0a	; 10
    10d8:	01 f3       	breq	.-64     	; 0x109a <readwhitespace>
	inputbuffer[ibcnt]=0;
}

void ungetch(int c)
{
	if (ibptr>inputbuffer)
    10da:	e0 91 d6 02 	lds	r30, 0x02D6
    10de:	f0 91 d7 02 	lds	r31, 0x02D7
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	e2 37       	cpi	r30, 0x72	; 114
    10e6:	f8 07       	cpc	r31, r24
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <readwhitespace+0x5e>
    10ea:	30 f0       	brcs	.+12     	; 0x10f8 <readwhitespace+0x5e>
	{
		--ibptr;
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	f0 93 d7 02 	sts	0x02D7, r31
    10f2:	e0 93 d6 02 	sts	0x02D6, r30
		*ibptr=c;
    10f6:	20 83       	st	Z, r18
    10f8:	08 95       	ret

000010fa <eval>:
}
		
/**************************************************************************************************/

struct object eval()
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	2c 97       	sbiw	r28, 0x0c	; 12
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	42 c0       	rjmp	.+132    	; 0x1194 <__stack+0x95>
	int ch;
	bool qf = false;

	while ((ch = getch()) > 0)
	{
		if (isWhiteSpace((char)ch))
    1110:	42 2f       	mov	r20, r18
    1112:	82 2f       	mov	r24, r18
    1114:	90 e0       	ldi	r25, 0x00	; 0
	return str;
}
		
bool isWhiteSpace(int ch)
{
	return (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n');
    1116:	80 32       	cpi	r24, 0x20	; 32
    1118:	91 05       	cpc	r25, r1
    111a:	49 f0       	breq	.+18     	; 0x112e <__stack+0x2f>
    111c:	89 30       	cpi	r24, 0x09	; 9
    111e:	91 05       	cpc	r25, r1
    1120:	31 f0       	breq	.+12     	; 0x112e <__stack+0x2f>
    1122:	8d 30       	cpi	r24, 0x0D	; 13
    1124:	91 05       	cpc	r25, r1
    1126:	19 f0       	breq	.+6      	; 0x112e <__stack+0x2f>
    1128:	0a 97       	sbiw	r24, 0x0a	; 10
    112a:	09 f0       	breq	.+2      	; 0x112e <__stack+0x2f>
    112c:	62 c0       	rjmp	.+196    	; 0x11f2 <__stack+0xf3>
	while ((ch = getch()) > 0)
	{
		if (isWhiteSpace((char)ch))
		{
			qf = false;
			readwhitespace();
    112e:	0e 94 4d 08 	call	0x109a	; 0x109a <readwhitespace>
    1132:	30 c0       	rjmp	.+96     	; 0x1194 <__stack+0x95>
	inputbuffer[ibcnt]=0;
}

void ungetch(int c)
{
	if (ibptr>inputbuffer)
    1134:	e2 57       	subi	r30, 0x72	; 114
    1136:	f2 40       	sbci	r31, 0x02	; 2
    1138:	31 f0       	breq	.+12     	; 0x1146 <__stack+0x47>
    113a:	28 f0       	brcs	.+10     	; 0x1146 <__stack+0x47>
	{
		--ibptr;
    113c:	b0 93 d7 02 	sts	0x02D7, r27
    1140:	a0 93 d6 02 	sts	0x02D6, r26
		*ibptr=c;
    1144:	2c 93       	st	X, r18

		if (ch >= '0' && ch <= '9')
		{
			ungetch(ch);       
			r.type=INT;
			r.n=readdigit();
    1146:	0e 94 a3 07 	call	0xf46	; 0xf46 <readdigit>
    114a:	9c 83       	std	Y+4, r25	; 0x04
    114c:	8b 83       	std	Y+3, r24	; 0x03
			return r;
    114e:	1a 82       	std	Y+2, r1	; 0x02
    1150:	19 82       	std	Y+1, r1	; 0x01
    1152:	de 01       	movw	r26, r28
    1154:	17 96       	adiw	r26, 0x07	; 7
    1156:	fe 01       	movw	r30, r28
    1158:	31 96       	adiw	r30, 0x01	; 1
    115a:	86 e0       	ldi	r24, 0x06	; 6
    115c:	01 90       	ld	r0, Z+
    115e:	0d 92       	st	X+, r0
    1160:	81 50       	subi	r24, 0x01	; 1
    1162:	e1 f7       	brne	.-8      	; 0x115c <__stack+0x5d>
    1164:	35 c0       	rjmp	.+106    	; 0x11d0 <__stack+0xd1>
			//	return callFunction(args);
			//else
			//	return args;
		}

		if ( (ch>= 'A' && ch<= 'Z' ) || (ch>= 'a' && ch<= 'z' ))
    1166:	c9 01       	movw	r24, r18
    1168:	81 54       	subi	r24, 0x41	; 65
    116a:	90 40       	sbci	r25, 0x00	; 0
    116c:	4a 97       	sbiw	r24, 0x1a	; 26
    116e:	28 f0       	brcs	.+10     	; 0x117a <__stack+0x7b>
    1170:	21 56       	subi	r18, 0x61	; 97
    1172:	30 40       	sbci	r19, 0x00	; 0
    1174:	2a 31       	cpi	r18, 0x1A	; 26
    1176:	31 05       	cpc	r19, r1
    1178:	68 f4       	brcc	.+26     	; 0x1194 <__stack+0x95>
	inputbuffer[ibcnt]=0;
}

void ungetch(int c)
{
	if (ibptr>inputbuffer)
    117a:	82 e0       	ldi	r24, 0x02	; 2
    117c:	e2 37       	cpi	r30, 0x72	; 114
    117e:	f8 07       	cpc	r31, r24
    1180:	39 f0       	breq	.+14     	; 0x1190 <__stack+0x91>
    1182:	30 f0       	brcs	.+12     	; 0x1190 <__stack+0x91>
	{
		--ibptr;
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	f0 93 d7 02 	sts	0x02D7, r31
    118a:	e0 93 d6 02 	sts	0x02D6, r30
		*ibptr=c;
    118e:	40 83       	st	Z, r20
		}

		if ( (ch>= 'A' && ch<= 'Z' ) || (ch>= 'a' && ch<= 'z' ))
		{
			ungetch(ch);
			char* t=readtoken();
    1190:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <readtoken>
	}
}

int getch()
{
	if (*ibptr!=0)
    1194:	a0 91 d6 02 	lds	r26, 0x02D6
    1198:	b0 91 d7 02 	lds	r27, 0x02D7
    119c:	8c 91       	ld	r24, X
    119e:	88 23       	and	r24, r24
    11a0:	61 f0       	breq	.+24     	; 0x11ba <__stack+0xbb>
		return *ibptr++;
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	fd 01       	movw	r30, r26
    11a8:	31 96       	adiw	r30, 0x01	; 1
    11aa:	f0 93 d7 02 	sts	0x02D7, r31
    11ae:	e0 93 d6 02 	sts	0x02D6, r30
	struct object r;
	
	int ch;
	bool qf = false;

	while ((ch = getch()) > 0)
    11b2:	21 15       	cp	r18, r1
    11b4:	31 05       	cpc	r19, r1
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__stack+0xbb>
    11b8:	ab cf       	rjmp	.-170    	; 0x1110 <__stack+0x11>
				return t;
			}
			*/
		}
	}
	return r;
    11ba:	1a 82       	std	Y+2, r1	; 0x02
    11bc:	19 82       	std	Y+1, r1	; 0x01
    11be:	de 01       	movw	r26, r28
    11c0:	17 96       	adiw	r26, 0x07	; 7
    11c2:	fe 01       	movw	r30, r28
    11c4:	31 96       	adiw	r30, 0x01	; 1
    11c6:	86 e0       	ldi	r24, 0x06	; 6
    11c8:	01 90       	ld	r0, Z+
    11ca:	0d 92       	st	X+, r0
    11cc:	81 50       	subi	r24, 0x01	; 1
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <__stack+0xc9>
    11d0:	2f 81       	ldd	r18, Y+7	; 0x07
    11d2:	38 85       	ldd	r19, Y+8	; 0x08
    11d4:	49 85       	ldd	r20, Y+9	; 0x09
    11d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    11d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11da:	7c 85       	ldd	r23, Y+12	; 0x0c
}
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	2c 96       	adiw	r28, 0x0c	; 12
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret
			qf = false;
			readwhitespace();
			continue;
		}

		if (ch >= '0' && ch <= '9')
    11f2:	c9 01       	movw	r24, r18
    11f4:	c0 97       	sbiw	r24, 0x30	; 48
    11f6:	0a 97       	sbiw	r24, 0x0a	; 10
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <__stack+0xfd>
    11fa:	b5 cf       	rjmp	.-150    	; 0x1166 <__stack+0x67>
    11fc:	9b cf       	rjmp	.-202    	; 0x1134 <__stack+0x35>

000011fe <pr>:
	}
	return r;
}

void pr(struct cell x)
{
    11fe:	08 95       	ret

00001200 <putch>:
		return *ibptr++;
	return -1;
}

void putch(char c)
{
    1200:	0e 94 67 00 	call	0xce	; 0xce <putByte>
	putByte(c);
}
    1204:	08 95       	ret

00001206 <printstr>:

void printstr(char *c)
{
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	ec 01       	movw	r28, r24
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <printstr+0xc>
	return -1;
}

void putch(char c)
{
	putByte(c);
    120e:	0e 94 67 00 	call	0xce	; 0xce <putByte>
}

void printstr(char *c)
{
	char ch;
	while ((ch=*c++) != 0) putch(ch);
    1212:	89 91       	ld	r24, Y+
    1214:	88 23       	and	r24, r24
    1216:	d9 f7       	brne	.-10     	; 0x120e <printstr+0x8>
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <printint>:
	putch(13);
	putch(10);
}

void printint(int n) //tbd
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	2a 97       	sbiw	r28, 0x0a	; 10
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	9c 01       	movw	r18, r24
	char tb[10];
	tb[0]='0'+ ((n/100) % 10);
    1234:	64 e6       	ldi	r22, 0x64	; 100
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    123c:	cb 01       	movw	r24, r22
    123e:	6a e0       	ldi	r22, 0x0A	; 10
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    1246:	80 5d       	subi	r24, 0xD0	; 208
    1248:	89 83       	std	Y+1, r24	; 0x01
	tb[1]='0'+ ((n/10) % 10);
    124a:	c9 01       	movw	r24, r18
    124c:	6a e0       	ldi	r22, 0x0A	; 10
    124e:	70 e0       	ldi	r23, 0x00	; 0
    1250:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    1254:	cb 01       	movw	r24, r22
    1256:	6a e0       	ldi	r22, 0x0A	; 10
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    125e:	80 5d       	subi	r24, 0xD0	; 208
    1260:	8a 83       	std	Y+2, r24	; 0x02
	tb[2]='0'+ (n % 10);
    1262:	c9 01       	movw	r24, r18
    1264:	6a e0       	ldi	r22, 0x0A	; 10
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <__divmodhi4>
    126c:	80 5d       	subi	r24, 0xD0	; 208
    126e:	8b 83       	std	Y+3, r24	; 0x03
	tb[3]=0;
    1270:	1c 82       	std	Y+4, r1	; 0x04
			
	printstr(tb);
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	0e 94 03 09 	call	0x1206	; 0x1206 <printstr>
}
    127a:	2a 96       	adiw	r28, 0x0a	; 10
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <printline>:
	char ch;
	while ((ch=*c++) != 0) putch(ch);
}

void printline(char *c)
{
    128c:	0e 94 03 09 	call	0x1206	; 0x1206 <printstr>
	return -1;
}

void putch(char c)
{
	putByte(c);
    1290:	8d e0       	ldi	r24, 0x0D	; 13
    1292:	0e 94 67 00 	call	0xce	; 0xce <putByte>
void printline(char *c)
{
	printstr(c);
	putch(13);
	putch(10);
}
    1296:	8a e0       	ldi	r24, 0x0A	; 10
    1298:	0e 94 67 00 	call	0xce	; 0xce <putByte>
    129c:	08 95       	ret

0000129e <prn>:
	return r;
}
*/

void prn(struct cell x)
{
    129e:	86 e2       	ldi	r24, 0x26	; 38
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 46 09 	call	0x128c	; 0x128c <printline>
	pr(x);
	printline("");
	return ;
}
    12a6:	08 95       	ret

000012a8 <readline>:
char inputbuffer[MAX];
int  ibcnt;
char *ibptr;

void readline()
{
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
	int ch=0;
	ibcnt=0;
    12ae:	10 92 71 02 	sts	0x0271, r1
    12b2:	10 92 70 02 	sts	0x0270, r1
	ibptr=&inputbuffer[0];
    12b6:	82 e7       	ldi	r24, 0x72	; 114
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	90 93 d7 02 	sts	0x02D7, r25
    12be:	80 93 d6 02 	sts	0x02D6, r24
    12c2:	2e c0       	rjmp	.+92     	; 0x1320 <readline+0x78>

extern void putByte (BYTE b);

int getByte()
{
	while(!(UCSR1A & RX_COMPLETE)) ;
    12c4:	80 91 9b 00 	lds	r24, 0x009B
    12c8:	87 ff       	sbrs	r24, 7
    12ca:	fc cf       	rjmp	.-8      	; 0x12c4 <readline+0x1c>
	return UDR1;
    12cc:	10 91 9c 00 	lds	r17, 0x009C
    12d0:	c1 2f       	mov	r28, r17
    12d2:	d0 e0       	ldi	r29, 0x00	; 0
	ibptr=&inputbuffer[0];
	
	while (ibcnt<MAX-1) 
	{
		ch=getByte();
		putByte(ch);            //echo input
    12d4:	81 2f       	mov	r24, r17
    12d6:	0e 94 67 00 	call	0xce	; 0xce <putByte>

		if (ch == 13) 
    12da:	cd 30       	cpi	r28, 0x0D	; 13
    12dc:	d1 05       	cpc	r29, r1
    12de:	21 f4       	brne	.+8      	; 0x12e8 <readline+0x40>
		{
			putByte(10);
    12e0:	8a e0       	ldi	r24, 0x0A	; 10
    12e2:	0e 94 67 00 	call	0xce	; 0xce <putByte>
    12e6:	23 c0       	rjmp	.+70     	; 0x132e <readline+0x86>
		    break;
		}
		if (ch==8 || ch==127)   //Bsapce ?
    12e8:	c8 30       	cpi	r28, 0x08	; 8
    12ea:	d1 05       	cpc	r29, r1
    12ec:	19 f0       	breq	.+6      	; 0x12f4 <readline+0x4c>
    12ee:	cf 37       	cpi	r28, 0x7F	; 127
    12f0:	d1 05       	cpc	r29, r1
    12f2:	49 f4       	brne	.+18     	; 0x1306 <readline+0x5e>
		{
			if (ibcnt>0) ibcnt--;
    12f4:	80 91 70 02 	lds	r24, 0x0270
    12f8:	90 91 71 02 	lds	r25, 0x0271
    12fc:	18 16       	cp	r1, r24
    12fe:	19 06       	cpc	r1, r25
    1300:	7c f4       	brge	.+30     	; 0x1320 <readline+0x78>
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	09 c0       	rjmp	.+18     	; 0x1318 <readline+0x70>
		}
		else
			inputbuffer[ibcnt++] = ch;
    1306:	80 91 70 02 	lds	r24, 0x0270
    130a:	90 91 71 02 	lds	r25, 0x0271
    130e:	fc 01       	movw	r30, r24
    1310:	ee 58       	subi	r30, 0x8E	; 142
    1312:	fd 4f       	sbci	r31, 0xFD	; 253
    1314:	10 83       	st	Z, r17
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	90 93 71 02 	sts	0x0271, r25
    131c:	80 93 70 02 	sts	0x0270, r24
{
	int ch=0;
	ibcnt=0;
	ibptr=&inputbuffer[0];
	
	while (ibcnt<MAX-1) 
    1320:	80 91 70 02 	lds	r24, 0x0270
    1324:	90 91 71 02 	lds	r25, 0x0271
    1328:	83 36       	cpi	r24, 0x63	; 99
    132a:	91 05       	cpc	r25, r1
    132c:	5c f2       	brlt	.-106    	; 0x12c4 <readline+0x1c>
			if (ibcnt>0) ibcnt--;
		}
		else
			inputbuffer[ibcnt++] = ch;
	}		
	inputbuffer[ibcnt]=0;
    132e:	e0 91 70 02 	lds	r30, 0x0270
    1332:	f0 91 71 02 	lds	r31, 0x0271
    1336:	ee 58       	subi	r30, 0x8E	; 142
    1338:	fd 4f       	sbci	r31, 0xFD	; 253
    133a:	10 82       	st	Z, r1
}
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	08 95       	ret

00001344 <repl>:
	printline("");
	return ;
}

void repl()
{
    1344:	ef 92       	push	r14
    1346:	ff 92       	push	r15
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	2c 97       	sbiw	r28, 0x0c	; 12
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
	{
		printstr("> ");
		readline();
		while (ibptr-inputbuffer < ibcnt)
		{
			struct object r = eval();
    1360:	7e 01       	movw	r14, r28
    1362:	08 94       	sec
    1364:	e1 1c       	adc	r14, r1
    1366:	f1 1c       	adc	r15, r1
    1368:	8e 01       	movw	r16, r28
    136a:	09 5f       	subi	r16, 0xF9	; 249
    136c:	1f 4f       	sbci	r17, 0xFF	; 255

void repl()
{
	while (true)
	{
		printstr("> ");
    136e:	87 e2       	ldi	r24, 0x27	; 39
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 03 09 	call	0x1206	; 0x1206 <printstr>
		readline();
    1376:	0e 94 54 09 	call	0x12a8	; 0x12a8 <readline>
    137a:	1e c0       	rjmp	.+60     	; 0x13b8 <repl+0x74>
		while (ibptr-inputbuffer < ibcnt)
		{
			struct object r = eval();
    137c:	0e 94 7d 08 	call	0x10fa	; 0x10fa <eval>
    1380:	2f 83       	std	Y+7, r18	; 0x07
    1382:	38 87       	std	Y+8, r19	; 0x08
    1384:	49 87       	std	Y+9, r20	; 0x09
    1386:	5a 87       	std	Y+10, r21	; 0x0a
    1388:	6b 87       	std	Y+11, r22	; 0x0b
    138a:	7c 87       	std	Y+12, r23	; 0x0c
    138c:	d7 01       	movw	r26, r14
    138e:	f8 01       	movw	r30, r16
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	01 90       	ld	r0, Z+
    1394:	0d 92       	st	X+, r0
    1396:	81 50       	subi	r24, 0x01	; 1
    1398:	e1 f7       	brne	.-8      	; 0x1392 <repl+0x4e>
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	9a 81       	ldd	r25, Y+2	; 0x02

			if (r.type == CELL)
    139e:	84 30       	cpi	r24, 0x04	; 4
    13a0:	91 05       	cpc	r25, r1
    13a2:	31 f0       	breq	.+12     	; 0x13b0 <repl+0x6c>
			{
				pr(r.c);
				printline("");
			}
			if (r.type == INT)
    13a4:	89 2b       	or	r24, r25
    13a6:	41 f4       	brne	.+16     	; 0x13b8 <repl+0x74>
			{
				printint(r.n);
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	0e 94 0f 09 	call	0x121e	; 0x121e <printint>
				printline("");
    13b0:	86 e2       	ldi	r24, 0x26	; 38
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 46 09 	call	0x128c	; 0x128c <printline>
{
	while (true)
	{
		printstr("> ");
		readline();
		while (ibptr-inputbuffer < ibcnt)
    13b8:	80 91 d6 02 	lds	r24, 0x02D6
    13bc:	90 91 d7 02 	lds	r25, 0x02D7
    13c0:	82 57       	subi	r24, 0x72	; 114
    13c2:	92 40       	sbci	r25, 0x02	; 2
    13c4:	20 91 70 02 	lds	r18, 0x0270
    13c8:	30 91 71 02 	lds	r19, 0x0271
    13cc:	82 17       	cp	r24, r18
    13ce:	93 07       	cpc	r25, r19
    13d0:	74 f6       	brge	.-100    	; 0x136e <repl+0x2a>
    13d2:	d4 cf       	rjmp	.-88     	; 0x137c <repl+0x38>

000013d4 <femto>:
		}
	}
}

void femto()
{
    13d4:	8a e2       	ldi	r24, 0x2A	; 42
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 03 09 	call	0x1206	; 0x1206 <printstr>
	printstr("Femto 0.1\r\n");
	
	UCSR1B= (1<<RXEN)|(1<<TXEN) ; //enable PC read/write Not interupt;	
    13dc:	88 e1       	ldi	r24, 0x18	; 24
    13de:	80 93 9a 00 	sts	0x009A, r24
	repl();
    13e2:	0e 94 a2 09 	call	0x1344	; 0x1344 <repl>
    13e6:	08 95       	ret

000013e8 <__fixunssfsi>:
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	7b 01       	movw	r14, r22
    13f2:	8c 01       	movw	r16, r24
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	5f e4       	ldi	r21, 0x4F	; 79
    13fc:	0e 94 a4 0c 	call	0x1948	; 0x1948 <__gesf2>
    1400:	88 23       	and	r24, r24
    1402:	8c f0       	brlt	.+34     	; 0x1426 <__fixunssfsi+0x3e>
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	5f e4       	ldi	r21, 0x4F	; 79
    140c:	c8 01       	movw	r24, r16
    140e:	b7 01       	movw	r22, r14
    1410:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__subsf3>
    1414:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fixsfsi>
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	20 50       	subi	r18, 0x00	; 0
    141e:	30 40       	sbci	r19, 0x00	; 0
    1420:	40 40       	sbci	r20, 0x00	; 0
    1422:	50 48       	sbci	r21, 0x80	; 128
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <__fixunssfsi+0x4a>
    1426:	c8 01       	movw	r24, r16
    1428:	b7 01       	movw	r22, r14
    142a:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <__fixsfsi>
    142e:	9b 01       	movw	r18, r22
    1430:	ac 01       	movw	r20, r24
    1432:	b9 01       	movw	r22, r18
    1434:	ca 01       	movw	r24, r20
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	08 95       	ret

00001440 <_fpadd_parts>:
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e6 e2       	ldi	r30, 0x26	; 38
    1446:	fa e0       	ldi	r31, 0x0A	; 10
    1448:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__prologue_saves__>
    144c:	dc 01       	movw	r26, r24
    144e:	2b 01       	movw	r4, r22
    1450:	fa 01       	movw	r30, r20
    1452:	9c 91       	ld	r25, X
    1454:	92 30       	cpi	r25, 0x02	; 2
    1456:	08 f4       	brcc	.+2      	; 0x145a <_fpadd_parts+0x1a>
    1458:	39 c1       	rjmp	.+626    	; 0x16cc <_fpadd_parts+0x28c>
    145a:	eb 01       	movw	r28, r22
    145c:	88 81       	ld	r24, Y
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	08 f4       	brcc	.+2      	; 0x1464 <_fpadd_parts+0x24>
    1462:	33 c1       	rjmp	.+614    	; 0x16ca <_fpadd_parts+0x28a>
    1464:	94 30       	cpi	r25, 0x04	; 4
    1466:	69 f4       	brne	.+26     	; 0x1482 <_fpadd_parts+0x42>
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	09 f0       	breq	.+2      	; 0x146e <_fpadd_parts+0x2e>
    146c:	2f c1       	rjmp	.+606    	; 0x16cc <_fpadd_parts+0x28c>
    146e:	11 96       	adiw	r26, 0x01	; 1
    1470:	9c 91       	ld	r25, X
    1472:	11 97       	sbiw	r26, 0x01	; 1
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	98 17       	cp	r25, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <_fpadd_parts+0x3c>
    147a:	28 c1       	rjmp	.+592    	; 0x16cc <_fpadd_parts+0x28c>
    147c:	a6 e3       	ldi	r26, 0x36	; 54
    147e:	b1 e0       	ldi	r27, 0x01	; 1
    1480:	25 c1       	rjmp	.+586    	; 0x16cc <_fpadd_parts+0x28c>
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	09 f4       	brne	.+2      	; 0x1488 <_fpadd_parts+0x48>
    1486:	21 c1       	rjmp	.+578    	; 0x16ca <_fpadd_parts+0x28a>
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	a9 f4       	brne	.+42     	; 0x14b6 <_fpadd_parts+0x76>
    148c:	92 30       	cpi	r25, 0x02	; 2
    148e:	09 f0       	breq	.+2      	; 0x1492 <_fpadd_parts+0x52>
    1490:	1d c1       	rjmp	.+570    	; 0x16cc <_fpadd_parts+0x28c>
    1492:	9a 01       	movw	r18, r20
    1494:	ad 01       	movw	r20, r26
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	ea 01       	movw	r28, r20
    149a:	09 90       	ld	r0, Y+
    149c:	ae 01       	movw	r20, r28
    149e:	e9 01       	movw	r28, r18
    14a0:	09 92       	st	Y+, r0
    14a2:	9e 01       	movw	r18, r28
    14a4:	81 50       	subi	r24, 0x01	; 1
    14a6:	c1 f7       	brne	.-16     	; 0x1498 <_fpadd_parts+0x58>
    14a8:	e2 01       	movw	r28, r4
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	9c 91       	ld	r25, X
    14b0:	89 23       	and	r24, r25
    14b2:	81 83       	std	Z+1, r24	; 0x01
    14b4:	08 c1       	rjmp	.+528    	; 0x16c6 <_fpadd_parts+0x286>
    14b6:	92 30       	cpi	r25, 0x02	; 2
    14b8:	09 f4       	brne	.+2      	; 0x14bc <_fpadd_parts+0x7c>
    14ba:	07 c1       	rjmp	.+526    	; 0x16ca <_fpadd_parts+0x28a>
    14bc:	12 96       	adiw	r26, 0x02	; 2
    14be:	2d 90       	ld	r2, X+
    14c0:	3c 90       	ld	r3, X
    14c2:	13 97       	sbiw	r26, 0x03	; 3
    14c4:	eb 01       	movw	r28, r22
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	14 96       	adiw	r26, 0x04	; 4
    14cc:	ad 90       	ld	r10, X+
    14ce:	bd 90       	ld	r11, X+
    14d0:	cd 90       	ld	r12, X+
    14d2:	dc 90       	ld	r13, X
    14d4:	17 97       	sbiw	r26, 0x07	; 7
    14d6:	ec 80       	ldd	r14, Y+4	; 0x04
    14d8:	fd 80       	ldd	r15, Y+5	; 0x05
    14da:	0e 81       	ldd	r16, Y+6	; 0x06
    14dc:	1f 81       	ldd	r17, Y+7	; 0x07
    14de:	91 01       	movw	r18, r2
    14e0:	28 1b       	sub	r18, r24
    14e2:	39 0b       	sbc	r19, r25
    14e4:	b9 01       	movw	r22, r18
    14e6:	37 ff       	sbrs	r19, 7
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <_fpadd_parts+0xb2>
    14ea:	66 27       	eor	r22, r22
    14ec:	77 27       	eor	r23, r23
    14ee:	62 1b       	sub	r22, r18
    14f0:	73 0b       	sbc	r23, r19
    14f2:	60 32       	cpi	r22, 0x20	; 32
    14f4:	71 05       	cpc	r23, r1
    14f6:	0c f0       	brlt	.+2      	; 0x14fa <_fpadd_parts+0xba>
    14f8:	61 c0       	rjmp	.+194    	; 0x15bc <_fpadd_parts+0x17c>
    14fa:	12 16       	cp	r1, r18
    14fc:	13 06       	cpc	r1, r19
    14fe:	6c f5       	brge	.+90     	; 0x155a <_fpadd_parts+0x11a>
    1500:	37 01       	movw	r6, r14
    1502:	48 01       	movw	r8, r16
    1504:	06 2e       	mov	r0, r22
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <_fpadd_parts+0xd0>
    1508:	96 94       	lsr	r9
    150a:	87 94       	ror	r8
    150c:	77 94       	ror	r7
    150e:	67 94       	ror	r6
    1510:	0a 94       	dec	r0
    1512:	d2 f7       	brpl	.-12     	; 0x1508 <_fpadd_parts+0xc8>
    1514:	21 e0       	ldi	r18, 0x01	; 1
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	04 c0       	rjmp	.+8      	; 0x1526 <_fpadd_parts+0xe6>
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	44 1f       	adc	r20, r20
    1524:	55 1f       	adc	r21, r21
    1526:	6a 95       	dec	r22
    1528:	d2 f7       	brpl	.-12     	; 0x151e <_fpadd_parts+0xde>
    152a:	21 50       	subi	r18, 0x01	; 1
    152c:	30 40       	sbci	r19, 0x00	; 0
    152e:	40 40       	sbci	r20, 0x00	; 0
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	2e 21       	and	r18, r14
    1534:	3f 21       	and	r19, r15
    1536:	40 23       	and	r20, r16
    1538:	51 23       	and	r21, r17
    153a:	21 15       	cp	r18, r1
    153c:	31 05       	cpc	r19, r1
    153e:	41 05       	cpc	r20, r1
    1540:	51 05       	cpc	r21, r1
    1542:	21 f0       	breq	.+8      	; 0x154c <_fpadd_parts+0x10c>
    1544:	21 e0       	ldi	r18, 0x01	; 1
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	79 01       	movw	r14, r18
    154e:	8a 01       	movw	r16, r20
    1550:	e6 28       	or	r14, r6
    1552:	f7 28       	or	r15, r7
    1554:	08 29       	or	r16, r8
    1556:	19 29       	or	r17, r9
    1558:	3c c0       	rjmp	.+120    	; 0x15d2 <_fpadd_parts+0x192>
    155a:	23 2b       	or	r18, r19
    155c:	d1 f1       	breq	.+116    	; 0x15d2 <_fpadd_parts+0x192>
    155e:	26 0e       	add	r2, r22
    1560:	37 1e       	adc	r3, r23
    1562:	35 01       	movw	r6, r10
    1564:	46 01       	movw	r8, r12
    1566:	06 2e       	mov	r0, r22
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <_fpadd_parts+0x132>
    156a:	96 94       	lsr	r9
    156c:	87 94       	ror	r8
    156e:	77 94       	ror	r7
    1570:	67 94       	ror	r6
    1572:	0a 94       	dec	r0
    1574:	d2 f7       	brpl	.-12     	; 0x156a <_fpadd_parts+0x12a>
    1576:	21 e0       	ldi	r18, 0x01	; 1
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	04 c0       	rjmp	.+8      	; 0x1588 <_fpadd_parts+0x148>
    1580:	22 0f       	add	r18, r18
    1582:	33 1f       	adc	r19, r19
    1584:	44 1f       	adc	r20, r20
    1586:	55 1f       	adc	r21, r21
    1588:	6a 95       	dec	r22
    158a:	d2 f7       	brpl	.-12     	; 0x1580 <_fpadd_parts+0x140>
    158c:	21 50       	subi	r18, 0x01	; 1
    158e:	30 40       	sbci	r19, 0x00	; 0
    1590:	40 40       	sbci	r20, 0x00	; 0
    1592:	50 40       	sbci	r21, 0x00	; 0
    1594:	2a 21       	and	r18, r10
    1596:	3b 21       	and	r19, r11
    1598:	4c 21       	and	r20, r12
    159a:	5d 21       	and	r21, r13
    159c:	21 15       	cp	r18, r1
    159e:	31 05       	cpc	r19, r1
    15a0:	41 05       	cpc	r20, r1
    15a2:	51 05       	cpc	r21, r1
    15a4:	21 f0       	breq	.+8      	; 0x15ae <_fpadd_parts+0x16e>
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	50 e0       	ldi	r21, 0x00	; 0
    15ae:	59 01       	movw	r10, r18
    15b0:	6a 01       	movw	r12, r20
    15b2:	a6 28       	or	r10, r6
    15b4:	b7 28       	or	r11, r7
    15b6:	c8 28       	or	r12, r8
    15b8:	d9 28       	or	r13, r9
    15ba:	0b c0       	rjmp	.+22     	; 0x15d2 <_fpadd_parts+0x192>
    15bc:	82 15       	cp	r24, r2
    15be:	93 05       	cpc	r25, r3
    15c0:	2c f0       	brlt	.+10     	; 0x15cc <_fpadd_parts+0x18c>
    15c2:	1c 01       	movw	r2, r24
    15c4:	aa 24       	eor	r10, r10
    15c6:	bb 24       	eor	r11, r11
    15c8:	65 01       	movw	r12, r10
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <_fpadd_parts+0x192>
    15cc:	ee 24       	eor	r14, r14
    15ce:	ff 24       	eor	r15, r15
    15d0:	87 01       	movw	r16, r14
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	9c 91       	ld	r25, X
    15d6:	d2 01       	movw	r26, r4
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	8c 91       	ld	r24, X
    15dc:	98 17       	cp	r25, r24
    15de:	09 f4       	brne	.+2      	; 0x15e2 <_fpadd_parts+0x1a2>
    15e0:	45 c0       	rjmp	.+138    	; 0x166c <_fpadd_parts+0x22c>
    15e2:	99 23       	and	r25, r25
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <_fpadd_parts+0x1b4>
    15e6:	a8 01       	movw	r20, r16
    15e8:	97 01       	movw	r18, r14
    15ea:	2a 19       	sub	r18, r10
    15ec:	3b 09       	sbc	r19, r11
    15ee:	4c 09       	sbc	r20, r12
    15f0:	5d 09       	sbc	r21, r13
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <_fpadd_parts+0x1c0>
    15f4:	a6 01       	movw	r20, r12
    15f6:	95 01       	movw	r18, r10
    15f8:	2e 19       	sub	r18, r14
    15fa:	3f 09       	sbc	r19, r15
    15fc:	40 0b       	sbc	r20, r16
    15fe:	51 0b       	sbc	r21, r17
    1600:	57 fd       	sbrc	r21, 7
    1602:	08 c0       	rjmp	.+16     	; 0x1614 <_fpadd_parts+0x1d4>
    1604:	11 82       	std	Z+1, r1	; 0x01
    1606:	33 82       	std	Z+3, r3	; 0x03
    1608:	22 82       	std	Z+2, r2	; 0x02
    160a:	24 83       	std	Z+4, r18	; 0x04
    160c:	35 83       	std	Z+5, r19	; 0x05
    160e:	46 83       	std	Z+6, r20	; 0x06
    1610:	57 83       	std	Z+7, r21	; 0x07
    1612:	1d c0       	rjmp	.+58     	; 0x164e <_fpadd_parts+0x20e>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	81 83       	std	Z+1, r24	; 0x01
    1618:	33 82       	std	Z+3, r3	; 0x03
    161a:	22 82       	std	Z+2, r2	; 0x02
    161c:	88 27       	eor	r24, r24
    161e:	99 27       	eor	r25, r25
    1620:	dc 01       	movw	r26, r24
    1622:	82 1b       	sub	r24, r18
    1624:	93 0b       	sbc	r25, r19
    1626:	a4 0b       	sbc	r26, r20
    1628:	b5 0b       	sbc	r27, r21
    162a:	84 83       	std	Z+4, r24	; 0x04
    162c:	95 83       	std	Z+5, r25	; 0x05
    162e:	a6 83       	std	Z+6, r26	; 0x06
    1630:	b7 83       	std	Z+7, r27	; 0x07
    1632:	0d c0       	rjmp	.+26     	; 0x164e <_fpadd_parts+0x20e>
    1634:	22 0f       	add	r18, r18
    1636:	33 1f       	adc	r19, r19
    1638:	44 1f       	adc	r20, r20
    163a:	55 1f       	adc	r21, r21
    163c:	24 83       	std	Z+4, r18	; 0x04
    163e:	35 83       	std	Z+5, r19	; 0x05
    1640:	46 83       	std	Z+6, r20	; 0x06
    1642:	57 83       	std	Z+7, r21	; 0x07
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	93 83       	std	Z+3, r25	; 0x03
    164c:	82 83       	std	Z+2, r24	; 0x02
    164e:	24 81       	ldd	r18, Z+4	; 0x04
    1650:	35 81       	ldd	r19, Z+5	; 0x05
    1652:	46 81       	ldd	r20, Z+6	; 0x06
    1654:	57 81       	ldd	r21, Z+7	; 0x07
    1656:	da 01       	movw	r26, r20
    1658:	c9 01       	movw	r24, r18
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	a1 09       	sbc	r26, r1
    165e:	b1 09       	sbc	r27, r1
    1660:	8f 5f       	subi	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	af 4f       	sbci	r26, 0xFF	; 255
    1666:	bf 43       	sbci	r27, 0x3F	; 63
    1668:	28 f3       	brcs	.-54     	; 0x1634 <_fpadd_parts+0x1f4>
    166a:	0b c0       	rjmp	.+22     	; 0x1682 <_fpadd_parts+0x242>
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	33 82       	std	Z+3, r3	; 0x03
    1670:	22 82       	std	Z+2, r2	; 0x02
    1672:	ea 0c       	add	r14, r10
    1674:	fb 1c       	adc	r15, r11
    1676:	0c 1d       	adc	r16, r12
    1678:	1d 1d       	adc	r17, r13
    167a:	e4 82       	std	Z+4, r14	; 0x04
    167c:	f5 82       	std	Z+5, r15	; 0x05
    167e:	06 83       	std	Z+6, r16	; 0x06
    1680:	17 83       	std	Z+7, r17	; 0x07
    1682:	83 e0       	ldi	r24, 0x03	; 3
    1684:	80 83       	st	Z, r24
    1686:	24 81       	ldd	r18, Z+4	; 0x04
    1688:	35 81       	ldd	r19, Z+5	; 0x05
    168a:	46 81       	ldd	r20, Z+6	; 0x06
    168c:	57 81       	ldd	r21, Z+7	; 0x07
    168e:	57 ff       	sbrs	r21, 7
    1690:	1a c0       	rjmp	.+52     	; 0x16c6 <_fpadd_parts+0x286>
    1692:	c9 01       	movw	r24, r18
    1694:	aa 27       	eor	r26, r26
    1696:	97 fd       	sbrc	r25, 7
    1698:	a0 95       	com	r26
    169a:	ba 2f       	mov	r27, r26
    169c:	81 70       	andi	r24, 0x01	; 1
    169e:	90 70       	andi	r25, 0x00	; 0
    16a0:	a0 70       	andi	r26, 0x00	; 0
    16a2:	b0 70       	andi	r27, 0x00	; 0
    16a4:	56 95       	lsr	r21
    16a6:	47 95       	ror	r20
    16a8:	37 95       	ror	r19
    16aa:	27 95       	ror	r18
    16ac:	82 2b       	or	r24, r18
    16ae:	93 2b       	or	r25, r19
    16b0:	a4 2b       	or	r26, r20
    16b2:	b5 2b       	or	r27, r21
    16b4:	84 83       	std	Z+4, r24	; 0x04
    16b6:	95 83       	std	Z+5, r25	; 0x05
    16b8:	a6 83       	std	Z+6, r26	; 0x06
    16ba:	b7 83       	std	Z+7, r27	; 0x07
    16bc:	82 81       	ldd	r24, Z+2	; 0x02
    16be:	93 81       	ldd	r25, Z+3	; 0x03
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	93 83       	std	Z+3, r25	; 0x03
    16c4:	82 83       	std	Z+2, r24	; 0x02
    16c6:	df 01       	movw	r26, r30
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <_fpadd_parts+0x28c>
    16ca:	d2 01       	movw	r26, r4
    16cc:	cd 01       	movw	r24, r26
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	e2 e1       	ldi	r30, 0x12	; 18
    16d4:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__epilogue_restores__>

000016d8 <__subsf3>:
    16d8:	a0 e2       	ldi	r26, 0x20	; 32
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e7       	ldi	r30, 0x72	; 114
    16de:	fb e0       	ldi	r31, 0x0B	; 11
    16e0:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    16e4:	69 83       	std	Y+1, r22	; 0x01
    16e6:	7a 83       	std	Y+2, r23	; 0x02
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    16ea:	9c 83       	std	Y+4, r25	; 0x04
    16ec:	2d 83       	std	Y+5, r18	; 0x05
    16ee:	3e 83       	std	Y+6, r19	; 0x06
    16f0:	4f 83       	std	Y+7, r20	; 0x07
    16f2:	58 87       	std	Y+8, r21	; 0x08
    16f4:	e9 e0       	ldi	r30, 0x09	; 9
    16f6:	ee 2e       	mov	r14, r30
    16f8:	f1 2c       	mov	r15, r1
    16fa:	ec 0e       	add	r14, r28
    16fc:	fd 1e       	adc	r15, r29
    16fe:	b7 01       	movw	r22, r14
    1700:	ce 01       	movw	r24, r28
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1708:	8e 01       	movw	r16, r28
    170a:	0f 5e       	subi	r16, 0xEF	; 239
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	b8 01       	movw	r22, r16
    1710:	ce 01       	movw	r24, r28
    1712:	05 96       	adiw	r24, 0x05	; 5
    1714:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1718:	8a 89       	ldd	r24, Y+18	; 0x12
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	89 27       	eor	r24, r25
    171e:	8a 8b       	std	Y+18, r24	; 0x12
    1720:	ae 01       	movw	r20, r28
    1722:	47 5e       	subi	r20, 0xE7	; 231
    1724:	5f 4f       	sbci	r21, 0xFF	; 255
    1726:	b8 01       	movw	r22, r16
    1728:	c7 01       	movw	r24, r14
    172a:	0e 94 20 0a 	call	0x1440	; 0x1440 <_fpadd_parts>
    172e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__pack_f>
    1732:	a0 96       	adiw	r28, 0x20	; 32
    1734:	e6 e0       	ldi	r30, 0x06	; 6
    1736:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

0000173a <__addsf3>:
    173a:	a0 e2       	ldi	r26, 0x20	; 32
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 ea       	ldi	r30, 0xA3	; 163
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    1746:	69 83       	std	Y+1, r22	; 0x01
    1748:	7a 83       	std	Y+2, r23	; 0x02
    174a:	8b 83       	std	Y+3, r24	; 0x03
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	2d 83       	std	Y+5, r18	; 0x05
    1750:	3e 83       	std	Y+6, r19	; 0x06
    1752:	4f 83       	std	Y+7, r20	; 0x07
    1754:	58 87       	std	Y+8, r21	; 0x08
    1756:	f9 e0       	ldi	r31, 0x09	; 9
    1758:	ef 2e       	mov	r14, r31
    175a:	f1 2c       	mov	r15, r1
    175c:	ec 0e       	add	r14, r28
    175e:	fd 1e       	adc	r15, r29
    1760:	b7 01       	movw	r22, r14
    1762:	ce 01       	movw	r24, r28
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    176a:	8e 01       	movw	r16, r28
    176c:	0f 5e       	subi	r16, 0xEF	; 239
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	b8 01       	movw	r22, r16
    1772:	ce 01       	movw	r24, r28
    1774:	05 96       	adiw	r24, 0x05	; 5
    1776:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    177a:	ae 01       	movw	r20, r28
    177c:	47 5e       	subi	r20, 0xE7	; 231
    177e:	5f 4f       	sbci	r21, 0xFF	; 255
    1780:	b8 01       	movw	r22, r16
    1782:	c7 01       	movw	r24, r14
    1784:	0e 94 20 0a 	call	0x1440	; 0x1440 <_fpadd_parts>
    1788:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__pack_f>
    178c:	a0 96       	adiw	r28, 0x20	; 32
    178e:	e6 e0       	ldi	r30, 0x06	; 6
    1790:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001794 <__divsf3>:
    1794:	a8 e1       	ldi	r26, 0x18	; 24
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e0 ed       	ldi	r30, 0xD0	; 208
    179a:	fb e0       	ldi	r31, 0x0B	; 11
    179c:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__prologue_saves__+0x10>
    17a0:	69 83       	std	Y+1, r22	; 0x01
    17a2:	7a 83       	std	Y+2, r23	; 0x02
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	2d 83       	std	Y+5, r18	; 0x05
    17aa:	3e 83       	std	Y+6, r19	; 0x06
    17ac:	4f 83       	std	Y+7, r20	; 0x07
    17ae:	58 87       	std	Y+8, r21	; 0x08
    17b0:	b9 e0       	ldi	r27, 0x09	; 9
    17b2:	eb 2e       	mov	r14, r27
    17b4:	f1 2c       	mov	r15, r1
    17b6:	ec 0e       	add	r14, r28
    17b8:	fd 1e       	adc	r15, r29
    17ba:	b7 01       	movw	r22, r14
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    17c4:	8e 01       	movw	r16, r28
    17c6:	0f 5e       	subi	r16, 0xEF	; 239
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	b8 01       	movw	r22, r16
    17cc:	ce 01       	movw	r24, r28
    17ce:	05 96       	adiw	r24, 0x05	; 5
    17d0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    17d4:	29 85       	ldd	r18, Y+9	; 0x09
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	08 f4       	brcc	.+2      	; 0x17dc <__divsf3+0x48>
    17da:	7c c0       	rjmp	.+248    	; 0x18d4 <__divsf3+0x140>
    17dc:	39 89       	ldd	r19, Y+17	; 0x11
    17de:	32 30       	cpi	r19, 0x02	; 2
    17e0:	10 f4       	brcc	.+4      	; 0x17e6 <__divsf3+0x52>
    17e2:	b8 01       	movw	r22, r16
    17e4:	7a c0       	rjmp	.+244    	; 0x18da <__divsf3+0x146>
    17e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e8:	9a 89       	ldd	r25, Y+18	; 0x12
    17ea:	89 27       	eor	r24, r25
    17ec:	8a 87       	std	Y+10, r24	; 0x0a
    17ee:	24 30       	cpi	r18, 0x04	; 4
    17f0:	11 f0       	breq	.+4      	; 0x17f6 <__divsf3+0x62>
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 f4       	brne	.+12     	; 0x1802 <__divsf3+0x6e>
    17f6:	23 17       	cp	r18, r19
    17f8:	09 f0       	breq	.+2      	; 0x17fc <__divsf3+0x68>
    17fa:	6c c0       	rjmp	.+216    	; 0x18d4 <__divsf3+0x140>
    17fc:	66 e3       	ldi	r22, 0x36	; 54
    17fe:	71 e0       	ldi	r23, 0x01	; 1
    1800:	6c c0       	rjmp	.+216    	; 0x18da <__divsf3+0x146>
    1802:	34 30       	cpi	r19, 0x04	; 4
    1804:	39 f4       	brne	.+14     	; 0x1814 <__divsf3+0x80>
    1806:	1d 86       	std	Y+13, r1	; 0x0d
    1808:	1e 86       	std	Y+14, r1	; 0x0e
    180a:	1f 86       	std	Y+15, r1	; 0x0f
    180c:	18 8a       	std	Y+16, r1	; 0x10
    180e:	1c 86       	std	Y+12, r1	; 0x0c
    1810:	1b 86       	std	Y+11, r1	; 0x0b
    1812:	04 c0       	rjmp	.+8      	; 0x181c <__divsf3+0x88>
    1814:	32 30       	cpi	r19, 0x02	; 2
    1816:	21 f4       	brne	.+8      	; 0x1820 <__divsf3+0x8c>
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	89 87       	std	Y+9, r24	; 0x09
    181c:	b7 01       	movw	r22, r14
    181e:	5d c0       	rjmp	.+186    	; 0x18da <__divsf3+0x146>
    1820:	2b 85       	ldd	r18, Y+11	; 0x0b
    1822:	3c 85       	ldd	r19, Y+12	; 0x0c
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	9c 89       	ldd	r25, Y+20	; 0x14
    1828:	28 1b       	sub	r18, r24
    182a:	39 0b       	sbc	r19, r25
    182c:	3c 87       	std	Y+12, r19	; 0x0c
    182e:	2b 87       	std	Y+11, r18	; 0x0b
    1830:	ed 84       	ldd	r14, Y+13	; 0x0d
    1832:	fe 84       	ldd	r15, Y+14	; 0x0e
    1834:	0f 85       	ldd	r16, Y+15	; 0x0f
    1836:	18 89       	ldd	r17, Y+16	; 0x10
    1838:	ad 88       	ldd	r10, Y+21	; 0x15
    183a:	be 88       	ldd	r11, Y+22	; 0x16
    183c:	cf 88       	ldd	r12, Y+23	; 0x17
    183e:	d8 8c       	ldd	r13, Y+24	; 0x18
    1840:	ea 14       	cp	r14, r10
    1842:	fb 04       	cpc	r15, r11
    1844:	0c 05       	cpc	r16, r12
    1846:	1d 05       	cpc	r17, r13
    1848:	40 f4       	brcc	.+16     	; 0x185a <__divsf3+0xc6>
    184a:	ee 0c       	add	r14, r14
    184c:	ff 1c       	adc	r15, r15
    184e:	00 1f       	adc	r16, r16
    1850:	11 1f       	adc	r17, r17
    1852:	21 50       	subi	r18, 0x01	; 1
    1854:	30 40       	sbci	r19, 0x00	; 0
    1856:	3c 87       	std	Y+12, r19	; 0x0c
    1858:	2b 87       	std	Y+11, r18	; 0x0b
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	50 e0       	ldi	r21, 0x00	; 0
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e4       	ldi	r27, 0x40	; 64
    186a:	6f e1       	ldi	r22, 0x1F	; 31
    186c:	70 e0       	ldi	r23, 0x00	; 0
    186e:	ea 14       	cp	r14, r10
    1870:	fb 04       	cpc	r15, r11
    1872:	0c 05       	cpc	r16, r12
    1874:	1d 05       	cpc	r17, r13
    1876:	40 f0       	brcs	.+16     	; 0x1888 <__divsf3+0xf4>
    1878:	28 2b       	or	r18, r24
    187a:	39 2b       	or	r19, r25
    187c:	4a 2b       	or	r20, r26
    187e:	5b 2b       	or	r21, r27
    1880:	ea 18       	sub	r14, r10
    1882:	fb 08       	sbc	r15, r11
    1884:	0c 09       	sbc	r16, r12
    1886:	1d 09       	sbc	r17, r13
    1888:	b6 95       	lsr	r27
    188a:	a7 95       	ror	r26
    188c:	97 95       	ror	r25
    188e:	87 95       	ror	r24
    1890:	ee 0c       	add	r14, r14
    1892:	ff 1c       	adc	r15, r15
    1894:	00 1f       	adc	r16, r16
    1896:	11 1f       	adc	r17, r17
    1898:	61 50       	subi	r22, 0x01	; 1
    189a:	70 40       	sbci	r23, 0x00	; 0
    189c:	41 f7       	brne	.-48     	; 0x186e <__divsf3+0xda>
    189e:	da 01       	movw	r26, r20
    18a0:	c9 01       	movw	r24, r18
    18a2:	8f 77       	andi	r24, 0x7F	; 127
    18a4:	90 70       	andi	r25, 0x00	; 0
    18a6:	a0 70       	andi	r26, 0x00	; 0
    18a8:	b0 70       	andi	r27, 0x00	; 0
    18aa:	80 34       	cpi	r24, 0x40	; 64
    18ac:	91 05       	cpc	r25, r1
    18ae:	a1 05       	cpc	r26, r1
    18b0:	b1 05       	cpc	r27, r1
    18b2:	61 f4       	brne	.+24     	; 0x18cc <__divsf3+0x138>
    18b4:	27 fd       	sbrc	r18, 7
    18b6:	0a c0       	rjmp	.+20     	; 0x18cc <__divsf3+0x138>
    18b8:	e1 14       	cp	r14, r1
    18ba:	f1 04       	cpc	r15, r1
    18bc:	01 05       	cpc	r16, r1
    18be:	11 05       	cpc	r17, r1
    18c0:	29 f0       	breq	.+10     	; 0x18cc <__divsf3+0x138>
    18c2:	20 5c       	subi	r18, 0xC0	; 192
    18c4:	3f 4f       	sbci	r19, 0xFF	; 255
    18c6:	4f 4f       	sbci	r20, 0xFF	; 255
    18c8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ca:	20 78       	andi	r18, 0x80	; 128
    18cc:	2d 87       	std	Y+13, r18	; 0x0d
    18ce:	3e 87       	std	Y+14, r19	; 0x0e
    18d0:	4f 87       	std	Y+15, r20	; 0x0f
    18d2:	58 8b       	std	Y+16, r21	; 0x10
    18d4:	be 01       	movw	r22, r28
    18d6:	67 5f       	subi	r22, 0xF7	; 247
    18d8:	7f 4f       	sbci	r23, 0xFF	; 255
    18da:	cb 01       	movw	r24, r22
    18dc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__pack_f>
    18e0:	68 96       	adiw	r28, 0x18	; 24
    18e2:	ea e0       	ldi	r30, 0x0A	; 10
    18e4:	0c 94 f6 0f 	jmp	0x1fec	; 0x1fec <__epilogue_restores__+0x10>

000018e8 <__gtsf2>:
    18e8:	a8 e1       	ldi	r26, 0x18	; 24
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	ea e7       	ldi	r30, 0x7A	; 122
    18ee:	fc e0       	ldi	r31, 0x0C	; 12
    18f0:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	7a 83       	std	Y+2, r23	; 0x02
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	2d 83       	std	Y+5, r18	; 0x05
    18fe:	3e 83       	std	Y+6, r19	; 0x06
    1900:	4f 83       	std	Y+7, r20	; 0x07
    1902:	58 87       	std	Y+8, r21	; 0x08
    1904:	89 e0       	ldi	r24, 0x09	; 9
    1906:	e8 2e       	mov	r14, r24
    1908:	f1 2c       	mov	r15, r1
    190a:	ec 0e       	add	r14, r28
    190c:	fd 1e       	adc	r15, r29
    190e:	b7 01       	movw	r22, r14
    1910:	ce 01       	movw	r24, r28
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1918:	8e 01       	movw	r16, r28
    191a:	0f 5e       	subi	r16, 0xEF	; 239
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	b8 01       	movw	r22, r16
    1920:	ce 01       	movw	r24, r28
    1922:	05 96       	adiw	r24, 0x05	; 5
    1924:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1928:	89 85       	ldd	r24, Y+9	; 0x09
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	40 f0       	brcs	.+16     	; 0x193e <__gtsf2+0x56>
    192e:	89 89       	ldd	r24, Y+17	; 0x11
    1930:	82 30       	cpi	r24, 0x02	; 2
    1932:	28 f0       	brcs	.+10     	; 0x193e <__gtsf2+0x56>
    1934:	b8 01       	movw	r22, r16
    1936:	c7 01       	movw	r24, r14
    1938:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__fpcmp_parts_f>
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <__gtsf2+0x58>
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	68 96       	adiw	r28, 0x18	; 24
    1942:	e6 e0       	ldi	r30, 0x06	; 6
    1944:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001948 <__gesf2>:
    1948:	a8 e1       	ldi	r26, 0x18	; 24
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	ea ea       	ldi	r30, 0xAA	; 170
    194e:	fc e0       	ldi	r31, 0x0C	; 12
    1950:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    1954:	69 83       	std	Y+1, r22	; 0x01
    1956:	7a 83       	std	Y+2, r23	; 0x02
    1958:	8b 83       	std	Y+3, r24	; 0x03
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	2d 83       	std	Y+5, r18	; 0x05
    195e:	3e 83       	std	Y+6, r19	; 0x06
    1960:	4f 83       	std	Y+7, r20	; 0x07
    1962:	58 87       	std	Y+8, r21	; 0x08
    1964:	89 e0       	ldi	r24, 0x09	; 9
    1966:	e8 2e       	mov	r14, r24
    1968:	f1 2c       	mov	r15, r1
    196a:	ec 0e       	add	r14, r28
    196c:	fd 1e       	adc	r15, r29
    196e:	b7 01       	movw	r22, r14
    1970:	ce 01       	movw	r24, r28
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1978:	8e 01       	movw	r16, r28
    197a:	0f 5e       	subi	r16, 0xEF	; 239
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	b8 01       	movw	r22, r16
    1980:	ce 01       	movw	r24, r28
    1982:	05 96       	adiw	r24, 0x05	; 5
    1984:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	40 f0       	brcs	.+16     	; 0x199e <__gesf2+0x56>
    198e:	89 89       	ldd	r24, Y+17	; 0x11
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	28 f0       	brcs	.+10     	; 0x199e <__gesf2+0x56>
    1994:	b8 01       	movw	r22, r16
    1996:	c7 01       	movw	r24, r14
    1998:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__fpcmp_parts_f>
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <__gesf2+0x58>
    199e:	8f ef       	ldi	r24, 0xFF	; 255
    19a0:	68 96       	adiw	r28, 0x18	; 24
    19a2:	e6 e0       	ldi	r30, 0x06	; 6
    19a4:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

000019a8 <__ltsf2>:
    19a8:	a8 e1       	ldi	r26, 0x18	; 24
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ea ed       	ldi	r30, 0xDA	; 218
    19ae:	fc e0       	ldi	r31, 0x0C	; 12
    19b0:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__prologue_saves__+0x18>
    19b4:	69 83       	std	Y+1, r22	; 0x01
    19b6:	7a 83       	std	Y+2, r23	; 0x02
    19b8:	8b 83       	std	Y+3, r24	; 0x03
    19ba:	9c 83       	std	Y+4, r25	; 0x04
    19bc:	2d 83       	std	Y+5, r18	; 0x05
    19be:	3e 83       	std	Y+6, r19	; 0x06
    19c0:	4f 83       	std	Y+7, r20	; 0x07
    19c2:	58 87       	std	Y+8, r21	; 0x08
    19c4:	89 e0       	ldi	r24, 0x09	; 9
    19c6:	e8 2e       	mov	r14, r24
    19c8:	f1 2c       	mov	r15, r1
    19ca:	ec 0e       	add	r14, r28
    19cc:	fd 1e       	adc	r15, r29
    19ce:	b7 01       	movw	r22, r14
    19d0:	ce 01       	movw	r24, r28
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    19d8:	8e 01       	movw	r16, r28
    19da:	0f 5e       	subi	r16, 0xEF	; 239
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	b8 01       	movw	r22, r16
    19e0:	ce 01       	movw	r24, r28
    19e2:	05 96       	adiw	r24, 0x05	; 5
    19e4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	82 30       	cpi	r24, 0x02	; 2
    19ec:	40 f0       	brcs	.+16     	; 0x19fe <__ltsf2+0x56>
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	82 30       	cpi	r24, 0x02	; 2
    19f2:	28 f0       	brcs	.+10     	; 0x19fe <__ltsf2+0x56>
    19f4:	b8 01       	movw	r22, r16
    19f6:	c7 01       	movw	r24, r14
    19f8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__fpcmp_parts_f>
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <__ltsf2+0x58>
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	68 96       	adiw	r28, 0x18	; 24
    1a02:	e6 e0       	ldi	r30, 0x06	; 6
    1a04:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__epilogue_restores__+0x18>

00001a08 <__floatsisf>:
    1a08:	a8 e0       	ldi	r26, 0x08	; 8
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ea e0       	ldi	r30, 0x0A	; 10
    1a0e:	fd e0       	ldi	r31, 0x0D	; 13
    1a10:	0c 94 db 0f 	jmp	0x1fb6	; 0x1fb6 <__prologue_saves__+0x12>
    1a14:	9b 01       	movw	r18, r22
    1a16:	ac 01       	movw	r20, r24
    1a18:	83 e0       	ldi	r24, 0x03	; 3
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	da 01       	movw	r26, r20
    1a1e:	c9 01       	movw	r24, r18
    1a20:	88 27       	eor	r24, r24
    1a22:	b7 fd       	sbrc	r27, 7
    1a24:	83 95       	inc	r24
    1a26:	99 27       	eor	r25, r25
    1a28:	aa 27       	eor	r26, r26
    1a2a:	bb 27       	eor	r27, r27
    1a2c:	b8 2e       	mov	r11, r24
    1a2e:	21 15       	cp	r18, r1
    1a30:	31 05       	cpc	r19, r1
    1a32:	41 05       	cpc	r20, r1
    1a34:	51 05       	cpc	r21, r1
    1a36:	19 f4       	brne	.+6      	; 0x1a3e <__floatsisf+0x36>
    1a38:	82 e0       	ldi	r24, 0x02	; 2
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	3a c0       	rjmp	.+116    	; 0x1ab2 <__floatsisf+0xaa>
    1a3e:	88 23       	and	r24, r24
    1a40:	a9 f0       	breq	.+42     	; 0x1a6c <__floatsisf+0x64>
    1a42:	20 30       	cpi	r18, 0x00	; 0
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	38 07       	cpc	r19, r24
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	48 07       	cpc	r20, r24
    1a4c:	80 e8       	ldi	r24, 0x80	; 128
    1a4e:	58 07       	cpc	r21, r24
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <__floatsisf+0x54>
    1a52:	60 e0       	ldi	r22, 0x00	; 0
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	9f ec       	ldi	r25, 0xCF	; 207
    1a5a:	30 c0       	rjmp	.+96     	; 0x1abc <__floatsisf+0xb4>
    1a5c:	ee 24       	eor	r14, r14
    1a5e:	ff 24       	eor	r15, r15
    1a60:	87 01       	movw	r16, r14
    1a62:	e2 1a       	sub	r14, r18
    1a64:	f3 0a       	sbc	r15, r19
    1a66:	04 0b       	sbc	r16, r20
    1a68:	15 0b       	sbc	r17, r21
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <__floatsisf+0x68>
    1a6c:	79 01       	movw	r14, r18
    1a6e:	8a 01       	movw	r16, r20
    1a70:	8e e1       	ldi	r24, 0x1E	; 30
    1a72:	c8 2e       	mov	r12, r24
    1a74:	d1 2c       	mov	r13, r1
    1a76:	dc 82       	std	Y+4, r13	; 0x04
    1a78:	cb 82       	std	Y+3, r12	; 0x03
    1a7a:	ed 82       	std	Y+5, r14	; 0x05
    1a7c:	fe 82       	std	Y+6, r15	; 0x06
    1a7e:	0f 83       	std	Y+7, r16	; 0x07
    1a80:	18 87       	std	Y+8, r17	; 0x08
    1a82:	c8 01       	movw	r24, r16
    1a84:	b7 01       	movw	r22, r14
    1a86:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__clzsi2>
    1a8a:	01 97       	sbiw	r24, 0x01	; 1
    1a8c:	18 16       	cp	r1, r24
    1a8e:	19 06       	cpc	r1, r25
    1a90:	84 f4       	brge	.+32     	; 0x1ab2 <__floatsisf+0xaa>
    1a92:	08 2e       	mov	r0, r24
    1a94:	04 c0       	rjmp	.+8      	; 0x1a9e <__floatsisf+0x96>
    1a96:	ee 0c       	add	r14, r14
    1a98:	ff 1c       	adc	r15, r15
    1a9a:	00 1f       	adc	r16, r16
    1a9c:	11 1f       	adc	r17, r17
    1a9e:	0a 94       	dec	r0
    1aa0:	d2 f7       	brpl	.-12     	; 0x1a96 <__floatsisf+0x8e>
    1aa2:	ed 82       	std	Y+5, r14	; 0x05
    1aa4:	fe 82       	std	Y+6, r15	; 0x06
    1aa6:	0f 83       	std	Y+7, r16	; 0x07
    1aa8:	18 87       	std	Y+8, r17	; 0x08
    1aaa:	c8 1a       	sub	r12, r24
    1aac:	d9 0a       	sbc	r13, r25
    1aae:	dc 82       	std	Y+4, r13	; 0x04
    1ab0:	cb 82       	std	Y+3, r12	; 0x03
    1ab2:	ba 82       	std	Y+2, r11	; 0x02
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__pack_f>
    1abc:	28 96       	adiw	r28, 0x08	; 8
    1abe:	e9 e0       	ldi	r30, 0x09	; 9
    1ac0:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <__epilogue_restores__+0x12>

00001ac4 <__fixsfsi>:
    1ac4:	ac e0       	ldi	r26, 0x0C	; 12
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e8 e6       	ldi	r30, 0x68	; 104
    1aca:	fd e0       	ldi	r31, 0x0D	; 13
    1acc:	0c 94 e2 0f 	jmp	0x1fc4	; 0x1fc4 <__prologue_saves__+0x20>
    1ad0:	69 83       	std	Y+1, r22	; 0x01
    1ad2:	7a 83       	std	Y+2, r23	; 0x02
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	9c 83       	std	Y+4, r25	; 0x04
    1ad8:	be 01       	movw	r22, r28
    1ada:	6b 5f       	subi	r22, 0xFB	; 251
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	ce 01       	movw	r24, r28
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__unpack_f>
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	82 30       	cpi	r24, 0x02	; 2
    1aea:	61 f1       	breq	.+88     	; 0x1b44 <__fixsfsi+0x80>
    1aec:	82 30       	cpi	r24, 0x02	; 2
    1aee:	50 f1       	brcs	.+84     	; 0x1b44 <__fixsfsi+0x80>
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	21 f4       	brne	.+8      	; 0x1afc <__fixsfsi+0x38>
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	88 23       	and	r24, r24
    1af8:	51 f1       	breq	.+84     	; 0x1b4e <__fixsfsi+0x8a>
    1afa:	2e c0       	rjmp	.+92     	; 0x1b58 <__fixsfsi+0x94>
    1afc:	2f 81       	ldd	r18, Y+7	; 0x07
    1afe:	38 85       	ldd	r19, Y+8	; 0x08
    1b00:	37 fd       	sbrc	r19, 7
    1b02:	20 c0       	rjmp	.+64     	; 0x1b44 <__fixsfsi+0x80>
    1b04:	6e 81       	ldd	r22, Y+6	; 0x06
    1b06:	2f 31       	cpi	r18, 0x1F	; 31
    1b08:	31 05       	cpc	r19, r1
    1b0a:	1c f0       	brlt	.+6      	; 0x1b12 <__fixsfsi+0x4e>
    1b0c:	66 23       	and	r22, r22
    1b0e:	f9 f0       	breq	.+62     	; 0x1b4e <__fixsfsi+0x8a>
    1b10:	23 c0       	rjmp	.+70     	; 0x1b58 <__fixsfsi+0x94>
    1b12:	8e e1       	ldi	r24, 0x1E	; 30
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	82 1b       	sub	r24, r18
    1b18:	93 0b       	sbc	r25, r19
    1b1a:	29 85       	ldd	r18, Y+9	; 0x09
    1b1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b1e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b20:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <__fixsfsi+0x68>
    1b24:	56 95       	lsr	r21
    1b26:	47 95       	ror	r20
    1b28:	37 95       	ror	r19
    1b2a:	27 95       	ror	r18
    1b2c:	8a 95       	dec	r24
    1b2e:	d2 f7       	brpl	.-12     	; 0x1b24 <__fixsfsi+0x60>
    1b30:	66 23       	and	r22, r22
    1b32:	b1 f0       	breq	.+44     	; 0x1b60 <__fixsfsi+0x9c>
    1b34:	50 95       	com	r21
    1b36:	40 95       	com	r20
    1b38:	30 95       	com	r19
    1b3a:	21 95       	neg	r18
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	4f 4f       	sbci	r20, 0xFF	; 255
    1b40:	5f 4f       	sbci	r21, 0xFF	; 255
    1b42:	0e c0       	rjmp	.+28     	; 0x1b60 <__fixsfsi+0x9c>
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e0       	ldi	r20, 0x00	; 0
    1b4a:	50 e0       	ldi	r21, 0x00	; 0
    1b4c:	09 c0       	rjmp	.+18     	; 0x1b60 <__fixsfsi+0x9c>
    1b4e:	2f ef       	ldi	r18, 0xFF	; 255
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f ef       	ldi	r20, 0xFF	; 255
    1b54:	5f e7       	ldi	r21, 0x7F	; 127
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <__fixsfsi+0x9c>
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e0       	ldi	r20, 0x00	; 0
    1b5e:	50 e8       	ldi	r21, 0x80	; 128
    1b60:	b9 01       	movw	r22, r18
    1b62:	ca 01       	movw	r24, r20
    1b64:	2c 96       	adiw	r28, 0x0c	; 12
    1b66:	e2 e0       	ldi	r30, 0x02	; 2
    1b68:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__epilogue_restores__+0x20>

00001b6c <__clzsi2>:
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	7b 01       	movw	r14, r22
    1b76:	8c 01       	movw	r16, r24
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	e8 16       	cp	r14, r24
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	f8 06       	cpc	r15, r24
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	08 07       	cpc	r16, r24
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	18 07       	cpc	r17, r24
    1b88:	88 f4       	brcc	.+34     	; 0x1bac <__clzsi2+0x40>
    1b8a:	8f ef       	ldi	r24, 0xFF	; 255
    1b8c:	e8 16       	cp	r14, r24
    1b8e:	f1 04       	cpc	r15, r1
    1b90:	01 05       	cpc	r16, r1
    1b92:	11 05       	cpc	r17, r1
    1b94:	31 f0       	breq	.+12     	; 0x1ba2 <__clzsi2+0x36>
    1b96:	28 f0       	brcs	.+10     	; 0x1ba2 <__clzsi2+0x36>
    1b98:	88 e0       	ldi	r24, 0x08	; 8
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a0 e0       	ldi	r26, 0x00	; 0
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	17 c0       	rjmp	.+46     	; 0x1bd0 <__clzsi2+0x64>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	12 c0       	rjmp	.+36     	; 0x1bd0 <__clzsi2+0x64>
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	e8 16       	cp	r14, r24
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	f8 06       	cpc	r15, r24
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	08 07       	cpc	r16, r24
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	18 07       	cpc	r17, r24
    1bbc:	28 f0       	brcs	.+10     	; 0x1bc8 <__clzsi2+0x5c>
    1bbe:	88 e1       	ldi	r24, 0x18	; 24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	a0 e0       	ldi	r26, 0x00	; 0
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	04 c0       	rjmp	.+8      	; 0x1bd0 <__clzsi2+0x64>
    1bc8:	80 e1       	ldi	r24, 0x10	; 16
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a0 e0       	ldi	r26, 0x00	; 0
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	20 e2       	ldi	r18, 0x20	; 32
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	28 1b       	sub	r18, r24
    1bda:	39 0b       	sbc	r19, r25
    1bdc:	4a 0b       	sbc	r20, r26
    1bde:	5b 0b       	sbc	r21, r27
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <__clzsi2+0x7e>
    1be2:	16 95       	lsr	r17
    1be4:	07 95       	ror	r16
    1be6:	f7 94       	ror	r15
    1be8:	e7 94       	ror	r14
    1bea:	8a 95       	dec	r24
    1bec:	d2 f7       	brpl	.-12     	; 0x1be2 <__clzsi2+0x76>
    1bee:	f7 01       	movw	r30, r14
    1bf0:	e2 5c       	subi	r30, 0xC2	; 194
    1bf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf4:	80 81       	ld	r24, Z
    1bf6:	28 1b       	sub	r18, r24
    1bf8:	31 09       	sbc	r19, r1
    1bfa:	41 09       	sbc	r20, r1
    1bfc:	51 09       	sbc	r21, r1
    1bfe:	c9 01       	movw	r24, r18
    1c00:	1f 91       	pop	r17
    1c02:	0f 91       	pop	r16
    1c04:	ff 90       	pop	r15
    1c06:	ef 90       	pop	r14
    1c08:	08 95       	ret

00001c0a <__pack_f>:
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	fc 01       	movw	r30, r24
    1c16:	e4 80       	ldd	r14, Z+4	; 0x04
    1c18:	f5 80       	ldd	r15, Z+5	; 0x05
    1c1a:	06 81       	ldd	r16, Z+6	; 0x06
    1c1c:	17 81       	ldd	r17, Z+7	; 0x07
    1c1e:	d1 80       	ldd	r13, Z+1	; 0x01
    1c20:	80 81       	ld	r24, Z
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	48 f4       	brcc	.+18     	; 0x1c38 <__pack_f+0x2e>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e1       	ldi	r26, 0x10	; 16
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e8 2a       	or	r14, r24
    1c30:	f9 2a       	or	r15, r25
    1c32:	0a 2b       	or	r16, r26
    1c34:	1b 2b       	or	r17, r27
    1c36:	a5 c0       	rjmp	.+330    	; 0x1d82 <__pack_f+0x178>
    1c38:	84 30       	cpi	r24, 0x04	; 4
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <__pack_f+0x34>
    1c3c:	9f c0       	rjmp	.+318    	; 0x1d7c <__pack_f+0x172>
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <__pack_f+0x40>
    1c42:	ee 24       	eor	r14, r14
    1c44:	ff 24       	eor	r15, r15
    1c46:	87 01       	movw	r16, r14
    1c48:	05 c0       	rjmp	.+10     	; 0x1c54 <__pack_f+0x4a>
    1c4a:	e1 14       	cp	r14, r1
    1c4c:	f1 04       	cpc	r15, r1
    1c4e:	01 05       	cpc	r16, r1
    1c50:	11 05       	cpc	r17, r1
    1c52:	19 f4       	brne	.+6      	; 0x1c5a <__pack_f+0x50>
    1c54:	e0 e0       	ldi	r30, 0x00	; 0
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	96 c0       	rjmp	.+300    	; 0x1d86 <__pack_f+0x17c>
    1c5a:	62 81       	ldd	r22, Z+2	; 0x02
    1c5c:	73 81       	ldd	r23, Z+3	; 0x03
    1c5e:	9f ef       	ldi	r25, 0xFF	; 255
    1c60:	62 38       	cpi	r22, 0x82	; 130
    1c62:	79 07       	cpc	r23, r25
    1c64:	0c f0       	brlt	.+2      	; 0x1c68 <__pack_f+0x5e>
    1c66:	5b c0       	rjmp	.+182    	; 0x1d1e <__pack_f+0x114>
    1c68:	22 e8       	ldi	r18, 0x82	; 130
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	26 1b       	sub	r18, r22
    1c6e:	37 0b       	sbc	r19, r23
    1c70:	2a 31       	cpi	r18, 0x1A	; 26
    1c72:	31 05       	cpc	r19, r1
    1c74:	2c f0       	brlt	.+10     	; 0x1c80 <__pack_f+0x76>
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	2a c0       	rjmp	.+84     	; 0x1cd4 <__pack_f+0xca>
    1c80:	b8 01       	movw	r22, r16
    1c82:	a7 01       	movw	r20, r14
    1c84:	02 2e       	mov	r0, r18
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <__pack_f+0x86>
    1c88:	76 95       	lsr	r23
    1c8a:	67 95       	ror	r22
    1c8c:	57 95       	ror	r21
    1c8e:	47 95       	ror	r20
    1c90:	0a 94       	dec	r0
    1c92:	d2 f7       	brpl	.-12     	; 0x1c88 <__pack_f+0x7e>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e0       	ldi	r26, 0x00	; 0
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	04 c0       	rjmp	.+8      	; 0x1ca6 <__pack_f+0x9c>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	2a 95       	dec	r18
    1ca8:	d2 f7       	brpl	.-12     	; 0x1c9e <__pack_f+0x94>
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	a1 09       	sbc	r26, r1
    1cae:	b1 09       	sbc	r27, r1
    1cb0:	8e 21       	and	r24, r14
    1cb2:	9f 21       	and	r25, r15
    1cb4:	a0 23       	and	r26, r16
    1cb6:	b1 23       	and	r27, r17
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	a1 05       	cpc	r26, r1
    1cbc:	b1 05       	cpc	r27, r1
    1cbe:	21 f0       	breq	.+8      	; 0x1cc8 <__pack_f+0xbe>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a0 e0       	ldi	r26, 0x00	; 0
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	9a 01       	movw	r18, r20
    1cca:	ab 01       	movw	r20, r22
    1ccc:	28 2b       	or	r18, r24
    1cce:	39 2b       	or	r19, r25
    1cd0:	4a 2b       	or	r20, r26
    1cd2:	5b 2b       	or	r21, r27
    1cd4:	da 01       	movw	r26, r20
    1cd6:	c9 01       	movw	r24, r18
    1cd8:	8f 77       	andi	r24, 0x7F	; 127
    1cda:	90 70       	andi	r25, 0x00	; 0
    1cdc:	a0 70       	andi	r26, 0x00	; 0
    1cde:	b0 70       	andi	r27, 0x00	; 0
    1ce0:	80 34       	cpi	r24, 0x40	; 64
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	a1 05       	cpc	r26, r1
    1ce6:	b1 05       	cpc	r27, r1
    1ce8:	39 f4       	brne	.+14     	; 0x1cf8 <__pack_f+0xee>
    1cea:	27 ff       	sbrs	r18, 7
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <__pack_f+0xf6>
    1cee:	20 5c       	subi	r18, 0xC0	; 192
    1cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf6:	04 c0       	rjmp	.+8      	; 0x1d00 <__pack_f+0xf6>
    1cf8:	21 5c       	subi	r18, 0xC1	; 193
    1cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1cfc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1d00:	e0 e0       	ldi	r30, 0x00	; 0
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	20 30       	cpi	r18, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	3a 07       	cpc	r19, r26
    1d0a:	a0 e0       	ldi	r26, 0x00	; 0
    1d0c:	4a 07       	cpc	r20, r26
    1d0e:	a0 e4       	ldi	r26, 0x40	; 64
    1d10:	5a 07       	cpc	r21, r26
    1d12:	10 f0       	brcs	.+4      	; 0x1d18 <__pack_f+0x10e>
    1d14:	e1 e0       	ldi	r30, 0x01	; 1
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	79 01       	movw	r14, r18
    1d1a:	8a 01       	movw	r16, r20
    1d1c:	27 c0       	rjmp	.+78     	; 0x1d6c <__pack_f+0x162>
    1d1e:	60 38       	cpi	r22, 0x80	; 128
    1d20:	71 05       	cpc	r23, r1
    1d22:	64 f5       	brge	.+88     	; 0x1d7c <__pack_f+0x172>
    1d24:	fb 01       	movw	r30, r22
    1d26:	e1 58       	subi	r30, 0x81	; 129
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	d8 01       	movw	r26, r16
    1d2c:	c7 01       	movw	r24, r14
    1d2e:	8f 77       	andi	r24, 0x7F	; 127
    1d30:	90 70       	andi	r25, 0x00	; 0
    1d32:	a0 70       	andi	r26, 0x00	; 0
    1d34:	b0 70       	andi	r27, 0x00	; 0
    1d36:	80 34       	cpi	r24, 0x40	; 64
    1d38:	91 05       	cpc	r25, r1
    1d3a:	a1 05       	cpc	r26, r1
    1d3c:	b1 05       	cpc	r27, r1
    1d3e:	39 f4       	brne	.+14     	; 0x1d4e <__pack_f+0x144>
    1d40:	e7 fe       	sbrs	r14, 7
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <__pack_f+0x154>
    1d44:	80 e4       	ldi	r24, 0x40	; 64
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <__pack_f+0x14c>
    1d4e:	8f e3       	ldi	r24, 0x3F	; 63
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e8 0e       	add	r14, r24
    1d58:	f9 1e       	adc	r15, r25
    1d5a:	0a 1f       	adc	r16, r26
    1d5c:	1b 1f       	adc	r17, r27
    1d5e:	17 ff       	sbrs	r17, 7
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <__pack_f+0x162>
    1d62:	16 95       	lsr	r17
    1d64:	07 95       	ror	r16
    1d66:	f7 94       	ror	r15
    1d68:	e7 94       	ror	r14
    1d6a:	31 96       	adiw	r30, 0x01	; 1
    1d6c:	87 e0       	ldi	r24, 0x07	; 7
    1d6e:	16 95       	lsr	r17
    1d70:	07 95       	ror	r16
    1d72:	f7 94       	ror	r15
    1d74:	e7 94       	ror	r14
    1d76:	8a 95       	dec	r24
    1d78:	d1 f7       	brne	.-12     	; 0x1d6e <__pack_f+0x164>
    1d7a:	05 c0       	rjmp	.+10     	; 0x1d86 <__pack_f+0x17c>
    1d7c:	ee 24       	eor	r14, r14
    1d7e:	ff 24       	eor	r15, r15
    1d80:	87 01       	movw	r16, r14
    1d82:	ef ef       	ldi	r30, 0xFF	; 255
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	6e 2f       	mov	r22, r30
    1d88:	67 95       	ror	r22
    1d8a:	66 27       	eor	r22, r22
    1d8c:	67 95       	ror	r22
    1d8e:	90 2f       	mov	r25, r16
    1d90:	9f 77       	andi	r25, 0x7F	; 127
    1d92:	d7 94       	ror	r13
    1d94:	dd 24       	eor	r13, r13
    1d96:	d7 94       	ror	r13
    1d98:	8e 2f       	mov	r24, r30
    1d9a:	86 95       	lsr	r24
    1d9c:	49 2f       	mov	r20, r25
    1d9e:	46 2b       	or	r20, r22
    1da0:	58 2f       	mov	r21, r24
    1da2:	5d 29       	or	r21, r13
    1da4:	b7 01       	movw	r22, r14
    1da6:	ca 01       	movw	r24, r20
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	08 95       	ret

00001db4 <__unpack_f>:
    1db4:	fc 01       	movw	r30, r24
    1db6:	db 01       	movw	r26, r22
    1db8:	40 81       	ld	r20, Z
    1dba:	51 81       	ldd	r21, Z+1	; 0x01
    1dbc:	22 81       	ldd	r18, Z+2	; 0x02
    1dbe:	62 2f       	mov	r22, r18
    1dc0:	6f 77       	andi	r22, 0x7F	; 127
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	22 1f       	adc	r18, r18
    1dc6:	22 27       	eor	r18, r18
    1dc8:	22 1f       	adc	r18, r18
    1dca:	93 81       	ldd	r25, Z+3	; 0x03
    1dcc:	89 2f       	mov	r24, r25
    1dce:	88 0f       	add	r24, r24
    1dd0:	82 2b       	or	r24, r18
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	99 27       	eor	r25, r25
    1dda:	99 1f       	adc	r25, r25
    1ddc:	11 96       	adiw	r26, 0x01	; 1
    1dde:	9c 93       	st	X, r25
    1de0:	11 97       	sbiw	r26, 0x01	; 1
    1de2:	21 15       	cp	r18, r1
    1de4:	31 05       	cpc	r19, r1
    1de6:	a9 f5       	brne	.+106    	; 0x1e52 <__unpack_f+0x9e>
    1de8:	41 15       	cp	r20, r1
    1dea:	51 05       	cpc	r21, r1
    1dec:	61 05       	cpc	r22, r1
    1dee:	71 05       	cpc	r23, r1
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <__unpack_f+0x42>
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	37 c0       	rjmp	.+110    	; 0x1e64 <__unpack_f+0xb0>
    1df6:	82 e8       	ldi	r24, 0x82	; 130
    1df8:	9f ef       	ldi	r25, 0xFF	; 255
    1dfa:	13 96       	adiw	r26, 0x03	; 3
    1dfc:	9c 93       	st	X, r25
    1dfe:	8e 93       	st	-X, r24
    1e00:	12 97       	sbiw	r26, 0x02	; 2
    1e02:	9a 01       	movw	r18, r20
    1e04:	ab 01       	movw	r20, r22
    1e06:	67 e0       	ldi	r22, 0x07	; 7
    1e08:	22 0f       	add	r18, r18
    1e0a:	33 1f       	adc	r19, r19
    1e0c:	44 1f       	adc	r20, r20
    1e0e:	55 1f       	adc	r21, r21
    1e10:	6a 95       	dec	r22
    1e12:	d1 f7       	brne	.-12     	; 0x1e08 <__unpack_f+0x54>
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	8c 93       	st	X, r24
    1e18:	0d c0       	rjmp	.+26     	; 0x1e34 <__unpack_f+0x80>
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	44 1f       	adc	r20, r20
    1e20:	55 1f       	adc	r21, r21
    1e22:	12 96       	adiw	r26, 0x02	; 2
    1e24:	8d 91       	ld	r24, X+
    1e26:	9c 91       	ld	r25, X
    1e28:	13 97       	sbiw	r26, 0x03	; 3
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	13 96       	adiw	r26, 0x03	; 3
    1e2e:	9c 93       	st	X, r25
    1e30:	8e 93       	st	-X, r24
    1e32:	12 97       	sbiw	r26, 0x02	; 2
    1e34:	20 30       	cpi	r18, 0x00	; 0
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	38 07       	cpc	r19, r24
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	48 07       	cpc	r20, r24
    1e3e:	80 e4       	ldi	r24, 0x40	; 64
    1e40:	58 07       	cpc	r21, r24
    1e42:	58 f3       	brcs	.-42     	; 0x1e1a <__unpack_f+0x66>
    1e44:	14 96       	adiw	r26, 0x04	; 4
    1e46:	2d 93       	st	X+, r18
    1e48:	3d 93       	st	X+, r19
    1e4a:	4d 93       	st	X+, r20
    1e4c:	5c 93       	st	X, r21
    1e4e:	17 97       	sbiw	r26, 0x07	; 7
    1e50:	08 95       	ret
    1e52:	2f 3f       	cpi	r18, 0xFF	; 255
    1e54:	31 05       	cpc	r19, r1
    1e56:	79 f4       	brne	.+30     	; 0x1e76 <__unpack_f+0xc2>
    1e58:	41 15       	cp	r20, r1
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	61 05       	cpc	r22, r1
    1e5e:	71 05       	cpc	r23, r1
    1e60:	19 f4       	brne	.+6      	; 0x1e68 <__unpack_f+0xb4>
    1e62:	84 e0       	ldi	r24, 0x04	; 4
    1e64:	8c 93       	st	X, r24
    1e66:	08 95       	ret
    1e68:	64 ff       	sbrs	r22, 4
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <__unpack_f+0xbe>
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	8c 93       	st	X, r24
    1e70:	12 c0       	rjmp	.+36     	; 0x1e96 <__unpack_f+0xe2>
    1e72:	1c 92       	st	X, r1
    1e74:	10 c0       	rjmp	.+32     	; 0x1e96 <__unpack_f+0xe2>
    1e76:	2f 57       	subi	r18, 0x7F	; 127
    1e78:	30 40       	sbci	r19, 0x00	; 0
    1e7a:	13 96       	adiw	r26, 0x03	; 3
    1e7c:	3c 93       	st	X, r19
    1e7e:	2e 93       	st	-X, r18
    1e80:	12 97       	sbiw	r26, 0x02	; 2
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	8c 93       	st	X, r24
    1e86:	87 e0       	ldi	r24, 0x07	; 7
    1e88:	44 0f       	add	r20, r20
    1e8a:	55 1f       	adc	r21, r21
    1e8c:	66 1f       	adc	r22, r22
    1e8e:	77 1f       	adc	r23, r23
    1e90:	8a 95       	dec	r24
    1e92:	d1 f7       	brne	.-12     	; 0x1e88 <__unpack_f+0xd4>
    1e94:	70 64       	ori	r23, 0x40	; 64
    1e96:	14 96       	adiw	r26, 0x04	; 4
    1e98:	4d 93       	st	X+, r20
    1e9a:	5d 93       	st	X+, r21
    1e9c:	6d 93       	st	X+, r22
    1e9e:	7c 93       	st	X, r23
    1ea0:	17 97       	sbiw	r26, 0x07	; 7
    1ea2:	08 95       	ret

00001ea4 <__fpcmp_parts_f>:
    1ea4:	1f 93       	push	r17
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	fb 01       	movw	r30, r22
    1eaa:	9c 91       	ld	r25, X
    1eac:	92 30       	cpi	r25, 0x02	; 2
    1eae:	08 f4       	brcc	.+2      	; 0x1eb2 <__fpcmp_parts_f+0xe>
    1eb0:	47 c0       	rjmp	.+142    	; 0x1f40 <__fpcmp_parts_f+0x9c>
    1eb2:	80 81       	ld	r24, Z
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	08 f4       	brcc	.+2      	; 0x1eba <__fpcmp_parts_f+0x16>
    1eb8:	43 c0       	rjmp	.+134    	; 0x1f40 <__fpcmp_parts_f+0x9c>
    1eba:	94 30       	cpi	r25, 0x04	; 4
    1ebc:	51 f4       	brne	.+20     	; 0x1ed2 <__fpcmp_parts_f+0x2e>
    1ebe:	11 96       	adiw	r26, 0x01	; 1
    1ec0:	1c 91       	ld	r17, X
    1ec2:	84 30       	cpi	r24, 0x04	; 4
    1ec4:	99 f5       	brne	.+102    	; 0x1f2c <__fpcmp_parts_f+0x88>
    1ec6:	81 81       	ldd	r24, Z+1	; 0x01
    1ec8:	68 2f       	mov	r22, r24
    1eca:	70 e0       	ldi	r23, 0x00	; 0
    1ecc:	61 1b       	sub	r22, r17
    1ece:	71 09       	sbc	r23, r1
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <__fpcmp_parts_f+0xac>
    1ed2:	84 30       	cpi	r24, 0x04	; 4
    1ed4:	21 f0       	breq	.+8      	; 0x1ede <__fpcmp_parts_f+0x3a>
    1ed6:	92 30       	cpi	r25, 0x02	; 2
    1ed8:	31 f4       	brne	.+12     	; 0x1ee6 <__fpcmp_parts_f+0x42>
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	b9 f1       	breq	.+110    	; 0x1f4c <__fpcmp_parts_f+0xa8>
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	88 23       	and	r24, r24
    1ee2:	89 f1       	breq	.+98     	; 0x1f46 <__fpcmp_parts_f+0xa2>
    1ee4:	2d c0       	rjmp	.+90     	; 0x1f40 <__fpcmp_parts_f+0x9c>
    1ee6:	11 96       	adiw	r26, 0x01	; 1
    1ee8:	1c 91       	ld	r17, X
    1eea:	11 97       	sbiw	r26, 0x01	; 1
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	f1 f0       	breq	.+60     	; 0x1f2c <__fpcmp_parts_f+0x88>
    1ef0:	81 81       	ldd	r24, Z+1	; 0x01
    1ef2:	18 17       	cp	r17, r24
    1ef4:	d9 f4       	brne	.+54     	; 0x1f2c <__fpcmp_parts_f+0x88>
    1ef6:	12 96       	adiw	r26, 0x02	; 2
    1ef8:	2d 91       	ld	r18, X+
    1efa:	3c 91       	ld	r19, X
    1efc:	13 97       	sbiw	r26, 0x03	; 3
    1efe:	82 81       	ldd	r24, Z+2	; 0x02
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	82 17       	cp	r24, r18
    1f04:	93 07       	cpc	r25, r19
    1f06:	94 f0       	brlt	.+36     	; 0x1f2c <__fpcmp_parts_f+0x88>
    1f08:	28 17       	cp	r18, r24
    1f0a:	39 07       	cpc	r19, r25
    1f0c:	bc f0       	brlt	.+46     	; 0x1f3c <__fpcmp_parts_f+0x98>
    1f0e:	14 96       	adiw	r26, 0x04	; 4
    1f10:	8d 91       	ld	r24, X+
    1f12:	9d 91       	ld	r25, X+
    1f14:	0d 90       	ld	r0, X+
    1f16:	bc 91       	ld	r27, X
    1f18:	a0 2d       	mov	r26, r0
    1f1a:	24 81       	ldd	r18, Z+4	; 0x04
    1f1c:	35 81       	ldd	r19, Z+5	; 0x05
    1f1e:	46 81       	ldd	r20, Z+6	; 0x06
    1f20:	57 81       	ldd	r21, Z+7	; 0x07
    1f22:	28 17       	cp	r18, r24
    1f24:	39 07       	cpc	r19, r25
    1f26:	4a 07       	cpc	r20, r26
    1f28:	5b 07       	cpc	r21, r27
    1f2a:	18 f4       	brcc	.+6      	; 0x1f32 <__fpcmp_parts_f+0x8e>
    1f2c:	11 23       	and	r17, r17
    1f2e:	41 f0       	breq	.+16     	; 0x1f40 <__fpcmp_parts_f+0x9c>
    1f30:	0a c0       	rjmp	.+20     	; 0x1f46 <__fpcmp_parts_f+0xa2>
    1f32:	82 17       	cp	r24, r18
    1f34:	93 07       	cpc	r25, r19
    1f36:	a4 07       	cpc	r26, r20
    1f38:	b5 07       	cpc	r27, r21
    1f3a:	40 f4       	brcc	.+16     	; 0x1f4c <__fpcmp_parts_f+0xa8>
    1f3c:	11 23       	and	r17, r17
    1f3e:	19 f0       	breq	.+6      	; 0x1f46 <__fpcmp_parts_f+0xa2>
    1f40:	61 e0       	ldi	r22, 0x01	; 1
    1f42:	70 e0       	ldi	r23, 0x00	; 0
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <__fpcmp_parts_f+0xac>
    1f46:	6f ef       	ldi	r22, 0xFF	; 255
    1f48:	7f ef       	ldi	r23, 0xFF	; 255
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <__fpcmp_parts_f+0xac>
    1f4c:	60 e0       	ldi	r22, 0x00	; 0
    1f4e:	70 e0       	ldi	r23, 0x00	; 0
    1f50:	cb 01       	movw	r24, r22
    1f52:	1f 91       	pop	r17
    1f54:	08 95       	ret

00001f56 <__divmodhi4>:
    1f56:	97 fb       	bst	r25, 7
    1f58:	09 2e       	mov	r0, r25
    1f5a:	07 26       	eor	r0, r23
    1f5c:	0a d0       	rcall	.+20     	; 0x1f72 <__divmodhi4_neg1>
    1f5e:	77 fd       	sbrc	r23, 7
    1f60:	04 d0       	rcall	.+8      	; 0x1f6a <__divmodhi4_neg2>
    1f62:	0c d0       	rcall	.+24     	; 0x1f7c <__udivmodhi4>
    1f64:	06 d0       	rcall	.+12     	; 0x1f72 <__divmodhi4_neg1>
    1f66:	00 20       	and	r0, r0
    1f68:	1a f4       	brpl	.+6      	; 0x1f70 <__divmodhi4_exit>

00001f6a <__divmodhi4_neg2>:
    1f6a:	70 95       	com	r23
    1f6c:	61 95       	neg	r22
    1f6e:	7f 4f       	sbci	r23, 0xFF	; 255

00001f70 <__divmodhi4_exit>:
    1f70:	08 95       	ret

00001f72 <__divmodhi4_neg1>:
    1f72:	f6 f7       	brtc	.-4      	; 0x1f70 <__divmodhi4_exit>
    1f74:	90 95       	com	r25
    1f76:	81 95       	neg	r24
    1f78:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7a:	08 95       	ret

00001f7c <__udivmodhi4>:
    1f7c:	aa 1b       	sub	r26, r26
    1f7e:	bb 1b       	sub	r27, r27
    1f80:	51 e1       	ldi	r21, 0x11	; 17
    1f82:	07 c0       	rjmp	.+14     	; 0x1f92 <__udivmodhi4_ep>

00001f84 <__udivmodhi4_loop>:
    1f84:	aa 1f       	adc	r26, r26
    1f86:	bb 1f       	adc	r27, r27
    1f88:	a6 17       	cp	r26, r22
    1f8a:	b7 07       	cpc	r27, r23
    1f8c:	10 f0       	brcs	.+4      	; 0x1f92 <__udivmodhi4_ep>
    1f8e:	a6 1b       	sub	r26, r22
    1f90:	b7 0b       	sbc	r27, r23

00001f92 <__udivmodhi4_ep>:
    1f92:	88 1f       	adc	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	5a 95       	dec	r21
    1f98:	a9 f7       	brne	.-22     	; 0x1f84 <__udivmodhi4_loop>
    1f9a:	80 95       	com	r24
    1f9c:	90 95       	com	r25
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	08 95       	ret

00001fa4 <__prologue_saves__>:
    1fa4:	2f 92       	push	r2
    1fa6:	3f 92       	push	r3
    1fa8:	4f 92       	push	r4
    1faa:	5f 92       	push	r5
    1fac:	6f 92       	push	r6
    1fae:	7f 92       	push	r7
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	ca 1b       	sub	r28, r26
    1fce:	db 0b       	sbc	r29, r27
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	09 94       	ijmp

00001fdc <__epilogue_restores__>:
    1fdc:	2a 88       	ldd	r2, Y+18	; 0x12
    1fde:	39 88       	ldd	r3, Y+17	; 0x11
    1fe0:	48 88       	ldd	r4, Y+16	; 0x10
    1fe2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fe4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fe6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fe8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fea:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fec:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fee:	b9 84       	ldd	r11, Y+9	; 0x09
    1ff0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ff2:	df 80       	ldd	r13, Y+7	; 0x07
    1ff4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ff6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ff8:	0c 81       	ldd	r16, Y+4	; 0x04
    1ffa:	1b 81       	ldd	r17, Y+3	; 0x03
    1ffc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ffe:	b9 81       	ldd	r27, Y+1	; 0x01
    2000:	ce 0f       	add	r28, r30
    2002:	d1 1d       	adc	r29, r1
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	ed 01       	movw	r28, r26
    2010:	08 95       	ret

00002012 <_exit>:
    2012:	f8 94       	cli

00002014 <__stop_program>:
    2014:	ff cf       	rjmp	.-2      	; 0x2014 <__stop_program>
