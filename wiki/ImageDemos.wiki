#summary Image processing demos

= Introduction =

Image processing assumes a webcam is streaming jpeg images to a file called "test.jpg" using a streamer such as mjpg_streamer.





In the /etc/init.d/mjpg_streamer I have added line

{{{
service_start /usr/bin/mjpg_streamer --input "input_uvc.so \
                --device $device --fps $fps --resolution $resolution" \
                --output "output_file.so -d 1000 -c /root/test.sh -f /tmp"
}}}

This calls a file test.sh every 1s (1000ms)
The name of the image file is passed as $1 and then test.jpg simply renames it, places it in correct directory and then signal basic using USR1 to tell it the image is ready.

{{{
# called by mjpg_streamer
mv -f $1 test.jpg
cp  test.jpg /www/test.jpg
cp  test.jpg /root/test.jpg

#signal BASIC that image ready
kill -s USR1 $(cat /root/PID)
}}}
The PID file is created when rbasic runs and contain the process ID to simplify the signal generation

=A few simple demos=

This demo loads an image as 2x2 array and then control a servo (20) which control the left / right position of the webcam.

===Demo 1 - Track bright object===

<wiki:video url="http://www.youtube.com/v/WQdsdZTa1j8?version=3&amp;hl=en_GB&amp;rel=0"/>

<code language="vb">
    'Find brightest light
    LIST M=12,0,0,1,-1,1,-1,0,-1,1,-1,1,0
LOOP:
    !IMAGE LOAD 2   '2x2 matrix 
    !IMAGE SHOW 6   'show values
    GOSUB DONET     'Process network
    WAIT 1000      
    GOTO LOOP
DONET:
    LIST !=@!.@M    'Add weights & threshhold
    NETWORK 4,2,11,2,0,0
    P=$SERVO(20)
    IF @![4]=1 then
       print "nuron 1 fired"   'turn left
       P=P-2
    ENDIF 
    IF @![5]=1 then
       print "nuron 2 fired"   'turn right
       P=P+2
    ENDIF 
    SERVO 20=P
    RETURN</code>

===Demo 2 - Use the IMAGE signal to trigger process===
Rather than looping you can control loading the image using ON IMAGE extension

<code language="vb">
' Demo of basic Image process
   Print "Load image and turn head servo (20) to brightest source"
   LIST M=12,0,0,1,-1,1,-1,0,-1,1,-1,1,0
   ON IMAGE GOSUB ImProc

Loop:
   WAIT 50
   GOTO Loop

ImProc:
   PRINT "load image"
   t=$tick
   !IMAGE LOAD 2        'load 2x2 image (grey scale)
   !IMAGE SHOW 6        'show values
   LIST !=@!.@M         'Add weights & threshhold
   NETWORK 4,2,3,2,0,0  'Do network
   P=$SERVO(20)
   IF @![4]=1 THEN
       print "nuron 1 fired"
       P=P-2
   ENDIF 
   IF @![5]=1 THEN
      print "nuron 2 fired"
      P=P+2
   ENDIF 
   SERVO 20=P
   PRINT "t=";$tick-t
   RETURN</code>

===Demo 3 - Filter processing in a Loop with a WAIT ===

<wiki:video url="http://www.youtube.com/v/YgzakRelVaM?version=3&amp;hl=en_GB&amp;rel=0"/>

The above uses the IMAGE FILT command with WAIT IMAGE

Alternatively use e a colour filter is applied using code based on CMVision2.0 library. This will filter the image and detect regions of same colour

<code language="vb">
  'set up filter
  !IMAGE COLO "orange";20;30;60;2
  !IMAGE THRE CID;120; 175; 40; 70; 30; 40
Loop:
  !WAIT IMAGE          'wait for image available
  !IMAGE RAW           'load
  !IMAGE PROC 10       'process as 10x10 image
  !IMAGE SHOW 6        'show process output
  !IMAGE REG 1         'return region in @! for colour id 1
  if $ne=0 then loop   'if no region found $NE will be zero
  PRINT @!:8           'show region info 
  goto Loop</code>

Example output given an image with an "orange ball" in it
<pre>
Run Program 
Add color orange 20,30,60 >2
Add threshold [1], (120,175) (40,70) (30,40)
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   1   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   1   1   1   0   0   0 
  0   0   0   0   1   1   1   0   0   0 
  0   0   0   1   1   1   1   0   0   0 
  0   0   0   0   1   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
  0   0   0   0   0   0   0   0   0   0 
0) orange : n=1 [20 30 60] Area>=2
   x1=3,y1=4,x2=6,y2=7</pre>