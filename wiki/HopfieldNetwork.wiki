#summary Simple Hopfield associative memory

= Introduction =

==Very simple proof of concept demo==

Notice how the $SCALE command is used in threshold mode to convert binary to bipolar (1,-1) input.  Also MAT ZERO only zero the diagonal of a square matrix. To zero the complete matrix just use LIST function $ZERO.  Also the $HAM function calculates the hamming distance between two arrays. This return 0 if they are exactly alike or non zero if not. 

For more details on Hopfield networks: http://en.wikipedia.org/wiki/Hopfield_network

= Details =

<code language="vb">
'''''''''''''''''''''''''''''''''''''''''
'train a hopfield - 4 input
'''''''''''''''''''''''''''''''''''''''''
MAT DEF A=4;1
LIST A=$SCALE(@{4,1,0,1,0},1,1,-1)
MAT B=A^
MAT PRINT A
MAT PRINT B
MAT X=B*A
MAT X=ZER
MAT PRINT X

'''''''''''''''''''''''''''''''''''''''''
'recover learned item
'''''''''''''''''''''''''''''''''''''''''
list y=4,0,0,1,0 ' create test input vector (notice different from train example)

print "check for : ";@y

Loop:
list t=@y 'remember what we start with

'update unit k (0-3)  this can be an/or random order
for k=0 to 3
   print "unit ";k; " : ";   
   s=y[k]
   print s;" + ";
   for j=0 to 3
      s=s + (y[j]*x[k*4+j])
   next j
   print s
   if s>0 then
      set y[k]=1
   else
      set y[k]=0
   endif
next k

print "Converge ?"
'does  @t=@y ?
if $HAM(@T,@Y)<>0 then Loop
print "Yes - Returned: ";@y

END</code>

= Output =
{{{
: r
Run Program 
Create matrix 'A' 4x1
matrix 'A' 4x1
  1  -1   1  -1 
matrix 'B' 1x4
  1 
 -1 
  1 
 -1 
matrix 'X' 4x4
  0  -1   1  -1 
 -1   0  -1   1 
  1  -1   0  -1 
 -1   1  -1   0 
check for : 0,0,1,0

unit 0 : 0 + 1
unit 1 : 0 + -2
unit 2 : 1 + 2
unit 3 : 0 + -2
Converge ?
unit 0 : 1 + 2
unit 1 : 0 + -2
unit 2 : 1 + 2
unit 3 : 0 + -2
Converge ?
Yes - Returned: 1,0,1,0

End of program
Elapsed Time 00:00-001
}}}

Note: Syntax of this command has changed,to be more readable !
  * MAT MULT X;B;A becomes MAT X=B*A
  * MAT TRAN A;B   becomes MAT B=A^