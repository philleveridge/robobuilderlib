#summary Simple Mini Basic complier/interpreter
#labels Phase-Requirements
= Introduction =

This is still in an early development stage !!! 

This gives Robobuilder the ability to create simple actions in an elementary basic language. Download [http://code.google.com/p/robobuilderlib/downloads/detail?name=Basic.hex basic.hex] on to the RBC module using the [http://robobuilderlib.googlecode.com/files/rbctool.jpg RBCUpgrade] tool as per manual.

Turn of the RBC and connect a vt100 terminal emulator. You should see the following:
{{{
Basic 0.1
Commands: i r l c z q
:
}}}

At the prompt type 
  * i - input a new program
  * r - run current program [or press Red button on IR remote]
  * l - list current program
  * c - clear memory
  * z - download (requires client - see below)
  * q - check servos connected

There is also a [http://code.google.com/p/robobuilderlib/downloads/detail?name=BasicClient.exe windows client application] to simplify the download of programs - http://code.google.com/p/robobuilderlib/wiki/BasicClient - for more details

See examples below of programs that have been tested

= Details =

{{{

Language Spec:
VAR    A-Z  (integer only)
OPER   + - * \ ( ) = < > % <= >= <>
CMD    LET:FOR:NEXT:GOTO:IF:THEN:ELSE:PRINT:END:SET:XACT:WAIT
STRING " ... "
EXPR1  VAR | LITERAL
EXPR2  EXPR1 | STRING
LIST   EXPR2 [,EXPR2]
EXPR   EXPR1 OPER EXPR1  

SYNTAX:
[LINE no] LET  VAR '=' EXPR 
[LINE no] GOTO [Line No]
[LINE no] PRINT LIST [;]
[LINE No] END
[LINE no] IF  EXPR THEN LINE no ELSE Line No
[LINE No] FOR VAR '=' EXPR 'To' EXPR
[LINE No] NEXT VAR
[LINE No] XACT EXPR
[LINE No] WAIT number
[Line No] SERVO ID=EXPR | '@'
[LINE No] LIST [VAR]=N,1,2,3 ..
[LINE No] MOVE @[VAR],100,20
[Line No] GOSUB [Line No]
[Line No] RETURN
[Line No] STAND [16 | 18]  ; basic pose for either 16 or 18 servo bots
[LINE No] PUT VAR '=' $PORTA|B|C:0-7
[LINE No] OUT EXPR,EXPR
[Line No] PLAY number

Special register access ($)
LET A=$IR  		 //get char from IR and transfer to A (also $ADC. $PSD, $X, $Y...)
LET A=$PORT:A:6  //Read Bit 6 of Port A
LET A=$ROM:10    // read byte 10 of ROM
LET A=$IR           //get char from IR and transfer to A 
LET A=$SERVO:id     //let A get position of servo id 

Special register access ($)
$X, $Y, $Z   accelerometer
$SERVO:id    position of servo id 
$IR          wait for OR input
$KBD         wait for keyboard press
$PSD         PSD sensor value
$VOLT        Battery voltage
$TICK        Number of tenths of a second
$RND         Random number  - (not tested)
$MIC         Microphone level
$TYPE        Number of servos i.e. 16
$ABS(x)      Absolute value of x returned
$ROM(x)      Contents of ROM location x
$MAPIR(x)    Maps value from IR to built in action code

Special Commands
SERVO ID=POS  set servo id to position POS / @ / ~
PUT 	      enable access to PORTS/SPECIAL REGISTER
LIST/MOVE     sends a Scene - 'n' Servo Positions, Plus time, no frames
POKE 10,A     Put A into Byte 10
PUT PORT:A:8 = 3 //set DDR of Port A = 3 (PIN0,PIN1 readable)
PUT PORT:A:2 = 1 //set Port A bit 1 =1 (assuming writeable)
WAIT          Wait for a an amount of time in ms
XACT          Call Built in action using code i.e. XACT 0, would punch left
Built in motions:
0x00:  PunchLeft
0x01:  PunchRight
0x02:  SidewalkLeft
0x03:  SidewalkRight
0x04:  TurnLeft
0x05:  TurnRight
0x06:  GetupBack
0x07:  GetupFront
0x08:  WalkForward
0x09:  WalkBackward
0x0A:  lshoot
0x0B:  rshoot
0x0C:  rsidewalk
0x0D:  lsidewalk
0x0E:  standupr
0x0F:  standupf
0x10:  sitdown
0x11:  hi
0x12:  kick left front turn
}}}

= Examples  =

These are available from examples sub- folder
http://code.google.com/p/robobuilderlib/source/browse/#svn/trunk/examples

{{{
a) simple loop
10 LET A=1
20 PRINT A
30 LET A=A+1
35 WAIT 500
40 IF A<10 THEN 20 
50 END

b) read from console and IR port
10 LET A=$KBD
20 PRINT A
30 LET A=$IR
40 PRINT A
50 GOTO 10

c) Loops
10 FOR A=1 to 5
20 PRINT A
30 NEXT A

d) compound PRINT
10 LET A=(5+3)*(2+1)
20 PRINT "The answer is ";A
30 END

e) read and set servo
This reads current position of servo 12 and then moves and extra 5
10 let a=$servo:12
20 print "Pos=";a
30 servo 12=a+5

f) read accelerometer values
10 print $TICK;" X=";$X;" Y=";$Y;" Z=";$Z
20 wait 500
30 goto 10

g) When fwd button pressed on IR do built in motion (8) - "walk forward"
10 let A=$IR
20 print "Received=";A
30 if a=4 then 40 else 10
40 xact 8
50 goto 10

h)Simple press a button on IR - do action (like standard firmware)
10 STAND 16
20 xact $mapir($ir)
30 Goto 20


}}}