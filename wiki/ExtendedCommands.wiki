#summary Extended command set fo Linux/Omnima Versions

= Introduction =

A set of commands only available in Linux (including Omnima) version to provide feature around IMAGE handling and processing and Matrix operations.

Functionality available from Build 511.
see here for more ImageDemos example codes. And advanced demo GestureRecognition

= Details =

new functions available:

==Record and Play==

  * PLY	mode  play moves from @!
      * mode 1 - Play all Moves return when finished
      * mode 2 - Play all modes asynchronously i.e. returns immediately but continues playing until complete
      * mode 3 - Pause play (use with mode 2)
      * mode 4 - Restart for current move (use after a pause)
      * mode 5 - restart from begining
      * mode 10+n - play 1 move from n-10.  i.e. 10 will play 0th (first move)

  * REC	mode 
      * mode 1  - record to @! Array must be initialise 
        [0]=time, [1]=nos, [2]...[2+nos]=servo ids
      * mode 16 - record to @! But initialise for 16 consecutive servos

==Typed variables==

  * LET    enhanced assignment, variables can have names and type i.e
{{{
!LET DFN="mydata.txt"
!LET PI=3.1415
}}}
  
  * PRINT
{{{
!PRINT "Hello world"
!PRINT "Hello " + "world" 
!PRINT 1.23*4.56
!PRINT DFN
}}}

== Matrices extensions==

  * !MAT LOAD  n               reads from DFN - default = data.txt
  * !MAT STOR  n               writes to DFN - default =  data.txt

Coming soon - floating point matrices.

==Image Processing==

Load and process a jpeg file. The filename is set in variable IFN and default is "test.jpg"

  * IMAGE LOAD n  loads  and greyscales IFN to @! [nxn]
{{{
!IMAGE LOAD 7;"test1.jpg"
!IMAGE SHOW 6
}}}

  * IMAGE FILT n;a;b;c;d;e;f  loads and applies filter to IFN to @!
{{{
!IMAGE FILT 7;1;10;10;100;100;100     
!IMAGE SHOW 6
}}}


===Advanced Processing===
Loosely Based on a subset of CMVision library  converted to C.

  * IMAGE RAW     reads IFN (test.jpg) => frame buffer   
  * IMAGE PROC    n  
  * IMAGE SHOW    n                                         
{{{
'0=info,  1=run,  2=reg, 3=cols,                            
'4=frame, 5=grey  6=num
!image show 3 
}}}

  * IMAGE COLOR   name; r; g; b; n 
{{{
!IMAGE COLO "orange"; 20; 30; 60; 2               // sets variable CID to value of colour ID
}}}

  * IMAGE THRES   id; minr; maxr; ming; maxg; minb; maxb    // id for colour
{{{
!IMAGE THRES  CID; 120; 175; 40; 70; 30; 40
}}}

  * IMAGE REG cid  region info sent to @!  ( area, x1,y1,x2,y2,cx,cy - for each region of color 'cid' )

== Examples ==

Example of defining a colour filter
and processing an image for that colour
{{{
30 !IMAGE COLO "orange";20;30;60;2
35 !IMAGE THRE CID;120; 175; 40; 70; 30; 40
38 !WAIT IMAGE
45 !IMAGE RAW
50 !IMAGE PROC 10
60 !IMAGE SHOW 6
70 !IMAGE SHOW 3
75 !IMAGE REG 1
78 PRINT "Area=";@![0]
80 PRINT "Box=";@![1];",";@![2];" to ";@![3];",";@![4]
85 PRINT "Center=";@![5];",";@![6]
90 GOTO 38
}}}