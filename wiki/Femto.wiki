#summary Femto -  a Micro-LISP interpreter running natively on the Robobuilder RBC unit

= Introduction =

This is still in early stages of development - get the latest binary here:
http://robobuilderlib.googlecode.com/files/femto.hex

= Details =

Femto aim is to provide a micro-lisp  language support to enable full autonomy for the robot.

==Things still to do==
  * Memory allocation and garbage collection
  * local scope variables
  * user defined functions
  * Flash/EEPROM program storage
  * Autorun LISP function on startup

==Commands core commands==
||*Command*||*Description/Example*||
||car||return head of list (car '(a b c)) -> a||
||cdr||tail of list i.e. (cdr '(a b c)) -> (b c)||
||length||(length '(1 2 3)) -> 3||
||plus||add list of numbers i.e. (plus 1 2 3) -> 6||
||cons||(cons 'a '(b c)) -> (a b c)||
||list||(list 'a 'b 'c) -> (a b c)||
||pr||pr list items i.e (pr "hello world")||
||prn|| as pr but add crlf to end of line||
||set||set symbol to value (i.e. (set 'a 5) -> 5 and binds a||
||setq||as set||
||sleep||(sleep 50) wait 50 ms||

==Command to execution logic and flow control==
||*Command*||*Description/Example*||
||env||Show current environment||
||time||time command i.e. (time (sleep 50)) -> 50||
||eval||(eval '(plus 1 2)) -> 3||
||eq||test for equality i.e. (eq 1 1) ->true||
||if||conditionals i.e. (if (eq 1 2) (prn "never") true (prn "always)) -> "always"||
||do||(do (pr "a") (prn "b")) -> "ab" ||
||while||(while cond list) i.e. (while (eq -1 (readIR)) (do (prn "loop" (sleep 100))))||

==Command to access wck Servos and sensors==
||*Command*||*Description/Example*||
||readIR||read latest IR remote value or -1 if nothing pressed||
||sendServo||(sendServo 12 50 4) -> set servo 12 to position 50 torq 4||
||getServo||(getServo 10) -> 50 - will return NIL if timeout||
||passiveServo|| (passiveServo 10) -> servo 10 set to passive state||
||synchServo|| (synchServo 'lastid 'torq '(pos0 pos1 .. pos(lastid)))||
||wckwriteIO||(wckwriteIO 10 true true) set red and blue light on servo 10 ||
||moveServo|| (moveServo time frames '(positions)) smooth move from current position to new positon ||