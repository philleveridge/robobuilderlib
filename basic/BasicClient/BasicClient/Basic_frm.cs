using System;
using System.Windows.Forms;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Diagnostics;
using System.Text.RegularExpressions;
using System.Net;

namespace RobobuilderLib
{
    public partial class Basic_frm : Form
    {
        Basic       compiler;
        SerialPort  s;
        binxfer btf;
        ServoSim sim = null;

        bool readyDownload = false;
        string bfn = "basic.exe";
        string bdn = "bindata.txt";
        string cprt = "";

        string version = "$Revision$";  

        string rx = ".";

        bool bm = false;

        bool fmono = false;

        bool editfl = false;

        public static bool IsLinux
        {
            get
            {
                int p = (int)Environment.OSVersion.Platform;
                return (p == 4) || (p == 6) || (p == 128);
            }
        }


        public Basic_frm()
        {
            string fn = "";
            InitializeComponent();
            readyDownload = false;

            if (File.Exists("BC.ini"))
            {
                string[] r = File.ReadAllLines("BC.ini");
                foreach (string l in r)
                {
                    if (l.StartsWith("BASIC=") && l.Substring(6)!="" ) bfn = l.Substring(6);
                    if (l.StartsWith("BIN=") && l.Substring(4)!="")    bdn = l.Substring(4);
                    if (l.StartsWith("COM="))   cprt = l.Substring(4);
                    if (l.StartsWith("FILE="))  fn = l.Substring(5);
                    if (l.StartsWith("MONO=")) fmono = (l.Substring(5, 1).ToUpper() == "Y") ? true : false;
                }
            }

            if (IsLinux && fmono == false) fmono = true; //overide user setting only if actually on linux

            if (!File.Exists(bfn))
            {
                simulatorToolStripMenuItem.Visible = false;
            }

            if (File.Exists(fn))
            {
                input.Text = File.ReadAllText(fn);
                output.Text = "";
                fname.Text = fn;
            }

            comselect.Items.Clear();
            foreach (string s2 in System.IO.Ports.SerialPort.GetPortNames())
            {
                    string s1 = s2;
                    if (!Char.IsDigit(s1[s1.Length - 1]))
                    {
                        Debug.Print("? [" + s1[s1.Length - 1]+"]");
                         s1 = s1.Substring(0, s1.Length-1);
                    }
                    Debug.Print("com port = [" + s1 + "]");
                    comselect.Items.Add(s1);
            }

            if (comselect.Items.Count <= 0)
            {
                MessageBox.Show("No serial ports detected");
            }

            if (comselect.Items.Count == 1)
            {
                comselect.SelectedIndex = 0;
                comPort.Text = (string)comselect.Items[0];
            }

            if (comselect.Items.Count > 1)
            {
                comPort.Text = cprt;
            }

            if (cprt!="") s = new SerialPort(comPort.Text, 115200);

            compiler = new Basic();


            term.KeyPress += new KeyPressEventHandler(output_KeyPress);

            if (version.StartsWith("$Revision: "))
                version = version.Substring(11, 4);

            this.Text += version;
            if (fmono) this.Text += "[Mono]";
            input.Select();

            syntaxcheck(); //!
            editfl = false;

            clear();
        }

        void writeini()
        {
            string s = "#Autogenerated\n";
            s += "FILE=" + fname.Text + "\n";
            s += "COM=" + comPort.Text + "\n";
            s += "BIN=" + bdn + "\n";
            s += "BASIC=" + bfn + "\n";
            s += "MONO=" + (fmono?"Y":"N") + "\n";

            File.WriteAllText("BC.ini", s);
        }

        void output_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (bm) return;

            if (s != null && s.IsOpen)
            {
                s.Write(e.KeyChar.ToString());
            }
        }

        private void runBtn_Click(object sender, EventArgs e)
        {
            if (bm) return;

            groupBox1.Visible = true;

            if (s != null && s.IsOpen)
            {
                s.Write("r");
            }
        }

        private void listBtn_Click(object sender, EventArgs e)
        {
            if (bm) return;

            if (s != null && s.IsOpen)
            {
                s.Write("l");
            }

        }

        private void stopBtn_Click(object sender, EventArgs e)
        {
            if (bm) return;

            if (s != null && s.IsOpen)
            {
                s.Write(Char.ToString((char)27));
            }
        }


        private void processCompletedOrCanceled(object sender, EventArgs e)
        {
            button1.BackColor = System.Drawing.Color.Red;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                if (s!=null && s.IsOpen)
                {
                    s.Close();
                    button1.BackColor = System.Drawing.Color.Red;
                    s.DataReceived -= new SerialDataReceivedEventHandler(s_DataReceived);

                    runBtn.Visible = false;
                    listBtn.Visible = false;
                    stopBtn.Visible = false;
                }
                else
                {
                    s.PortName = comPort.Text;
                    s.ReadTimeout = 250;
                    s.Open();
                    s.Write("V");
                    s.ReadTo("v=");
                    string v = s.ReadLine();

                    if (!v.StartsWith("$Rev")) 
                        throw new Exception("Not BASIC firmware?");

                    label1.Text = "FIRMWARE " + v;
                    label1.Visible = true;

                    if (Convert.ToInt32(v.Substring(11, 3)) < Basic.REQ_FIRMWARE) 
                        throw new Exception("BASIC firmware v" + Basic.REQ_FIRMWARE + " or better needed?");

                    if (!fmono) 
                        s.DataReceived += new SerialDataReceivedEventHandler(s_DataReceived);

                    button1.BackColor = System.Drawing.Color.Green;
                    term.Text = "";
                    term.Select();

                    runBtn.Visible = true;
                    listBtn.Visible = true;
                    stopBtn.Visible = true;

                    if (fmono)
                    {
                        readData();

                        if (s.IsOpen)
                        {
                            s.Close();
                        }
                        button1.BackColor = System.Drawing.Color.Red;
                        runBtn.Visible = false;
                        listBtn.Visible = false;
                        stopBtn.Visible = false;
                        return;
                    }
                }
            }
            catch (Exception em)
            {
                MessageBox.Show("Error - can't connect to serial port - " + comPort.Text + "\r\nExeception=" + em.Message, "Error", MessageBoxButtons.OK);
            }
        }

        void readData()
        {
            // mono read routine - doesn't handle serial events
            s.ReadTimeout = 5;
            int b;
            rx = "";

            while (s.IsOpen)
            {
                if (!bm)
                {
                    try
                    {
                        if ((b = s.ReadByte()) > 0)
                        {
                            while (b > 0 && b != 255)
                            {
                                //Console.WriteLine("{0} - {1}", b, rx);
                                rx += Char.ToString((char)b);
                                b = s.ReadByte();
                            }

                        }
                    }
                    catch
                    {
                    }
                    DisplayText(null, null);
                    rx = "";
                }
                Application.DoEvents();
            }


        }

        void p_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            rx = e.Data;
            this.Invoke(new EventHandler(DisplayText));
        }

        private void DisplayText(object sender, EventArgs e)
        {
            if (rx != null && rx != "")
            {
                if (rx == "\b")
                {
                    term.Text = term.Text.Substring(0, term.Text.Length - 1);
                    term.SelectionStart = term.Text.Length;
                }
                else
                    term.AppendText(rx);

                rx = term.Text;

                if (rx.IndexOf(Char.ToString((char)27) + "[2J") >= 0)
                {
                    rx = rx.Substring(rx.LastIndexOf(Char.ToString((char)27) + "[2J") + 4);
                    term.Text = rx;
                }
            }
            rx = "";
        }

        void s_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            if (bm) return;

            switch (e.EventType)
            {
                case SerialData.Chars:
                    rx = s.ReadExisting();
                    this.Invoke(new EventHandler(DisplayText));
                    break;
                case SerialData.Eof:
                    rx = "@@";
                    this.Invoke(new EventHandler(DisplayText));
                    break;
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void loadToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog s = new OpenFileDialog();
            s.AddExtension = true;
            s.Filter = "Basic (*.rbas)|*.rbas";
            if (s.ShowDialog() != DialogResult.OK)
                return;
            try
            {
                input.Text = File.ReadAllText(s.FileName);
                output.Text = "";
                //download_btn.Enabled = false;
                fname.Text = s.FileName;

                syntaxcheck(); //!

                editfl = false;
            }
            catch (Exception e1)
            {
                MessageBox.Show("can't open file - " + e1.Message);
                output.Text = "";
                //download_btn.Enabled = false;
                fname.Text = "";
            }
        }

        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            AboutBox1 n = new AboutBox1(version);
            n.Show();
        }

        private void syntaxcheck()
        {
            int n;
            input.SelectAll();
            input.SelectionColor = Color.Black;

            int sc = -1; int cc = -1;
            for (int c = 0; c < input.Text.Length; c++)
            {
                char ch = input.Text[c];
                if (ch == '\"' && sc < 0)
                {
                    sc = c;
                    continue;
                }
                if (ch == '\'' && cc < 0)
                {
                    cc = c;
                    continue;
                }

                if (ch == '\"' && sc >= 0)
                {
                    input.SelectionStart = sc;
                    input.SelectionLength = c - sc + 1;
                    input.SelectionColor = Color.Green;
                    sc = -1;
                }

                if (ch == 10 && cc >= 0)
                {
                    input.SelectionStart = cc;
                    input.SelectionLength = c - cc;
                    input.SelectionColor = Color.Gray;
                    cc = -1;
                }
            }

            foreach (string s in Basic.specials)
            {
                n = -1;
                while ((n = input.Find("$" + s, n + 1, RichTextBoxFinds.WholeWord)) > 0)
                {
                    if (input.SelectionColor == Color.Black)
                    {
                        input.SelectionColor = Color.Blue;
                        input.SelectedText = input.SelectedText.ToUpper();
                    }
                }
            }

            foreach (string s in Basic.tokens)
            {
                n = -1;
                while ((n = input.Find(s, n + 1, RichTextBoxFinds.WholeWord)) >= 0)
                {
                    if (input.SelectionColor == Color.Black)
                    {
                        input.SelectionColor = Color.Red;
                        input.SelectedText = input.SelectedText.ToUpper();
                    }
                }
            }
            n = -1;
            while ((n = input.Find("TO", n + 1, RichTextBoxFinds.WholeWord)) > 0)
            {
                if (input.SelectionColor == Color.Black)
                {
                    input.SelectionColor = Color.Red;
                    input.SelectedText = input.SelectedText.ToUpper();
                }
            }

        }

        private void compileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            syntaxcheck();
            if (compiler.Compile(input.Text))
            {
                MessageBox.Show(String.Format("Complete - ready to download [{0} Bytes = {1}% Used]", compiler.Download().Length / 2, (50*compiler.Download().Length / compiler.MAX_PROG_SPACE)), "Compiler");
                output.Text = compiler.precomp + "\r\n";
                output.Text += compiler.Dump();
                readyDownload = true;
                File.WriteAllText(bdn, compiler.Download());
            }
            else
            {
                MessageBox.Show("Failed to compile - see output for error");
                output.Text = "Error on line " + compiler.lineno + " : " + compiler.error_msgs[compiler.errno] + "\r\n";
                output.Text += "Line ::      " + compiler.curline;              

                readyDownload = false;
            }
        }

        private void downloadToolStripMenuItem_Click(object sender, EventArgs e)
        {

            if (!readyDownload) // if not already built
            {
                compileToolStripMenuItem_Click(sender, e);
                if (!readyDownload)
                {
                    return; // if failed return
                }
            }

            string c = compiler.Download();
            bm = true;

            if (!s.IsOpen)
            {
                MessageBox.Show("Please connect first");
                return;
            }

            progressBar1.Visible = true;
            progressBar1.Value = 0;
            timer1.Enabled = true;

            try
            {
                s.Write(".z"); // Auto set up download mode

                btf = new binxfer(s);
                btf.dbg = false;
                btf.send_msg_raw('l', c);

                if (btf.recv_packet())
                {
                    bm = false;
                    MessageBox.Show("Download ok");
                }
                else
                {
                    output.Text += "download failed";
                    bm = false;
                }

            }
            catch (Exception err)
            {
                MessageBox.Show("Download failed - connection problem" + err.Message);
                output.Text += "Download failed - connection problem" + err.Message;
            }

            timer1.Enabled = false;
            progressBar1.Visible = false;

            s.ReadTimeout = 50;
            s.WriteTimeout = 50;

        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (btf != null && progressBar1.Visible)
            {          
                progressBar1.Increment((int)(100.0*btf.progress));
            }
            this.Update();
        }

        private void simulatorToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (sim == null)
            {
                sim = new ServoSim();
                sim.bfn = bfn;
                sim.Disposed += new EventHandler(sim_Disposed);
            }
            sim.Show();
        }

        void sim_Disposed(object sender, EventArgs e)
        {
            sim = null;
        }


        void Basic_frm_SizeChanged(object sender, System.EventArgs e)
        {
            tabControl1.Width = this.Width - 18;
            tabControl1.Height = this.Height - 18;

            input.Width = tabControl1.Width-16;
            output.Width = tabControl1.Width-16;
            term.Width = tabControl1.Width-16;

            input.Height = tabControl1.Height - 100;
            output.Height = tabControl1.Height - 80;
            term.Height = tabControl1.Height - 100;

            fname.Width = input.Width;
            fname.Location = new Point (0, input.Height + 5);

            progressBar1.Location = new Point(progressBar1.Location.X, term.Height + 5);
            comPort.Location = new Point(comPort.Location.X, term.Height + 5);
            label1.Location = new Point(label1.Location.X, term.Height + 5);
            comselect.Location = new Point(comselect.Location.X, term.Height + 5);
            button1.Location = new Point(button1.Location.X, term.Height + 5);

            runBtn.Location = new Point(runBtn.Location.X, term.Height + 5);
            stopBtn.Location = new Point(stopBtn.Location.X, term.Height + 5);
            listBtn.Location = new Point(listBtn.Location.X, term.Height + 5);
        
        }

        
        void input_MouseHover(object sender, System.EventArgs e)
        {
            if (input.SelectedText != "")
            {
                string h = "";
                if (compiler.help.Contains(input.SelectedText.Trim()))
                {
                    h=(string)compiler.help[input.SelectedText.Trim()];
                    helptext.Text = h;
                    helptext.Visible = true;
                }
            }
            else
            {
                helptext.Visible = false;
            }
        }

        void input_MouseLeave(object sender, System.EventArgs e)
        {
            helptext.Visible = false;
        }

        void input_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
        {
            if (!helptext.Visible) 
                helptext.Location = new Point(e.X ,e.Y);
        }

        void input_SelectionChanged(object sender, System.EventArgs e)
        {
            helptext.Visible = false;
        }


        void process_OutputDataReceived(object sender, DataReceivedEventArgs e)
        {
            //term.AppendText(e.Data);
            Console.WriteLine(e.Data);
        }

        private void newToolStripMenuItem_Click(object sender, EventArgs e)
        {
            input.Clear();
            fname.Text = "";
            editfl = false;
        }

        private void comselect_SelectedIndexChanged(object sender, EventArgs e)
        {
            comPort.Text = (string)comselect.Items[comselect.SelectedIndex];
            if (comPort.Text != "") s = new SerialPort(comPort.Text, 115200);
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            {
                File.WriteAllText(fname.Text, input.Text);
                editfl = false;
            }
            catch (Exception e1)
            {
                MessageBox.Show("can't save file - " + e1.Message);
                fname.Text = "";
            }
        }
        
        private void saveAsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog s = new SaveFileDialog();
            if (s.ShowDialog() != DialogResult.OK)
                return;
            try
            {
                File.WriteAllText(s.FileName, input.Text);
                fname.Text = s.FileName;
                editfl = false;
            }
            catch (Exception e1)
            {
                MessageBox.Show("can't save file - " + e1.Message);
                fname.Text = "";
            }
        }

        private void extendToolStripMenuItem_Click(object sender, EventArgs e)
        {
            extendToolStripMenuItem.Checked = !extendToolStripMenuItem.Checked;
            if (extendToolStripMenuItem.Checked)
            {
                compiler.MAX_PROG_SPACE=3072;
            }
            else
            {
                compiler.MAX_PROG_SPACE = 64000;
            }
        }

        private void loadBinaryToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // tbd
            OpenFileDialog s = new OpenFileDialog();
            s.Filter = "Bindata.txt|bindata.txt";
            if (s.ShowDialog() != DialogResult.OK)
                return;
            try
            {
                string bf = File.ReadAllText(s.FileName);
                input.Text = compiler.LoadBin(bf);
                output.Text = "Binary download";
                fname.Text = "";
                //download_btn.Enabled = true;
                readyDownload = true;
            }
            catch (Exception e1)
            {
                MessageBox.Show("can't open file - " + e1.Message);
                output.Text = "";
                //download_btn.Enabled = false;
                fname.Text = "";
            }
        }

        Bitmap n = null;
        int minR, minG, minB;
        int maxR, maxG, maxB;

        void clear()
        {
            maxR = 0; maxG = 0; maxB = 0;
            minR = 255; minG = 255; minB = 255;
            show();
        }

        void show()
        {
            label4.Text = minB.ToString();
            label5.Text = minG.ToString();
            label6.Text = minR.ToString();

            label7.Text = maxB.ToString();
            label8.Text = maxG.ToString();
            label9.Text = maxR.ToString();

            textBox3.Text = String.Format("!IMAGE FILT {6};{0};{1};{2};{3};{4};{5}",
                minR, maxR, minG, maxG, minB, maxB, textBox2.Text);
        }

        void loadimage()
        {
            if (textBox1.Text.StartsWith("http://"))
            {
                Stream stream = File.OpenRead("temp.jpg");
                n = new Bitmap(stream);
                stream.Close();
            }
            else
            {
                n = new Bitmap(textBox1.Text);
            }
            pictureBox1.Image = n;
            //clear();
        }

        void filter()
        {
            if (n == null) return;

            for (int i = 0; i < n.Height; i++)
            {
                for (int j = 0; j < n.Width; j++)
                {
                    Color c = n.GetPixel(j, i);
                    if (c.R >= minR && c.R <= maxR && c.B >= minB && c.B <= maxB && c.G >= minG && c.G <= maxG)
                    {
                        n.SetPixel(j, i, Color.White);
                    }
                    else
                    {
                        n.SetPixel(j, i, Color.Black);
                    }
                }

                pictureBox1.Image = n;
                pictureBox1.Update();
            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            Console.Out.WriteLine("E=" + e.ToString() + sender.ToString());
            MouseEventArgs m = (MouseEventArgs)e;
            Console.Out.WriteLine("X=" + m.X + " Y=" + m.Y);
            double fx = (double)pictureBox1.Image.Width * ((double)m.X / (double)pictureBox1.Size.Width);
            double fy = (double)pictureBox1.Image.Height * ((double)m.Y / (double)pictureBox1.Size.Height);
            Console.Out.WriteLine("X=" + (int)fx + " Y=" + (int)fy);
            int x = (int)fx;
            int y = (int)fy;
            if (n != null)
            {
                if (minB > n.GetPixel(x, y).B) minB = n.GetPixel(x, y).B;
                if (minG > n.GetPixel(x, y).G) minG = n.GetPixel(x, y).G;
                if (minR > n.GetPixel(x, y).R) minR = n.GetPixel(x, y).R;

                if (maxB < n.GetPixel(x, y).B) maxB = n.GetPixel(x, y).B;
                if (maxG < n.GetPixel(x, y).G) maxG = n.GetPixel(x, y).G;
                if (maxR < n.GetPixel(x, y).R) maxR = n.GetPixel(x, y).R;

                show();
            }
        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (n == null) return;
            if (filtercb.Checked)
                filter();
            else
            {
                loadimage();
            }
        }

        private void ldFile_Click(object sender, EventArgs e)
        {
            if (openFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                textBox1.Text = openFileDialog1.FileName;
                loadimage();
                clear();
            }
        }

        private void ldWeb_Click(object sender, EventArgs e)
        {
            try
            {
                WebClient webClient = new WebClient();
                webClient.DownloadFile(textBox1.Text, "temp.jpg");
                loadimage();
                clear();
            }
            catch
            {
            }
        }

        private void imageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            imageToolStripMenuItem.Checked = !imageToolStripMenuItem.Checked;
            if (imageToolStripMenuItem.Checked)
                ;
        }

        private void checkBox1_CheckedChanged_1(object sender, EventArgs e)
        {
            if (!checkBox1.Checked)
            {
                loadimage();
                return;
            }

            try
            {
                long sz = Convert.ToInt64(textBox2.Text);
                if (sz < 2)  { sz = 2; textBox2.Text = sz.ToString(); }
                if (sz >100) { sz = 100; textBox2.Text = sz.ToString(); }

                long[,] m = new long[sz, sz];

                for (int i = 0; i < n.Height; i++)
                {
                    for (int j = 0; j < n.Width; j++)
                    {
                        long v = (n.GetPixel(j, i).R + n.GetPixel(j, i).G + n.GetPixel(j, i).B) / 3;
                        m[sz*j/n.Width,sz*i/n.Height] += v;
                    }
                }

                long mv = (n.Height * n.Width) / (sz * sz);

                for (int i = 0; i < n.Height; i++)
                {
                    for (int j = 0; j < n.Width; j++)
                    {
                        long v=(m[sz*j/n.Width,sz*i/n.Height]/mv)%256;
                        n.SetPixel(j, i, Color.FromArgb((int)v,(int)v,(int)v));
                    }

                    pictureBox1.Image = n;
                    pictureBox1.Update();

                }

            }
            catch (Exception e1)
            {
                Console.WriteLine("error - " + e1.Message);
            }
        }

        void normalise()
        {
            if (n == null) return;

            for (int i = 0; i < n.Height; i++)
            {
                for (int j = 0; j < n.Width; j++)
                {
                    long v = (n.GetPixel(j, i).R + n.GetPixel(j, i).G + n.GetPixel(j, i).B);
                    if (v>0) 
                        n.SetPixel(j, i, Color.FromArgb(
                            (768*n.GetPixel(j, i).R/(int)v)%256, 
                            (768*n.GetPixel(j, i).G/(int)v)%256, 
                            (768*n.GetPixel(j, i).B/(int)v)%256));
                }
                pictureBox1.Image = n;
                pictureBox1.Update();

            }


        }

        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox2.Checked)
            {
                normalise();
            }
            else
            {
                loadimage();
            }

        }

        private void reLoadToolStripMenuItem_Click(object sender, EventArgs e)
        {
            input.Text = File.ReadAllText(fname.Text);
            output.Text = "Reloading .. " + fname.Text;
            syntaxcheck(); //!
            editfl = false;
        }

        private void button7_Click(object sender, EventArgs e)
        {

        }

        private void button23_Click(object sender, EventArgs e)
        {
            if (bm) return;

            if (s != null && s.IsOpen)
            {
                s.Write("\001");
            }
        }

        private void button24_Click(object sender, EventArgs e)
        {
            if (bm) return;

            if (s != null && s.IsOpen)
            {
                s.Write("\002");
            }
        }

        private void button15_Click(object sender, EventArgs e)
        {
            if (bm) return;

            if (s != null && s.IsOpen)
            {
                s.Write("\007"); //stop
            }
        }




    }
}
