!DO
(SET RULES
'(
(RULE IDENTIFY1 (IF (ANIMAL HAS HAIR ))                 (THEN (ANIMAL IS MAMMAL)))
(RULE IDENTIFY2 (IF (ANIMAL GIVES MILK ))               (THEN (ANIMAL IS MAMMAL)))
(RULE IDENTIFY3 (IF (ANIMAL HAS FEATHER ))              (THEN (ANIMAL IS BIRD)))
(RULE IDENTIFY4 (IF (ANIMAL FLIES ) (ANIMAL LAYS EGGS)) (THEN (ANIMAL IS BIRD)))
)
)
 
(SETQ FACTS '((ANIMAL IS CHEETAH) (ANIMAL HAS DARK SPOTS) (ANIMAL EATS MEAT)))
 
(FUNC REM    (NEW) (DO (IF (NOT (MEMBER NEW FACTS)) (SETQ FACTS (CONS NEW FACTS))) (PR "new facts = " FACTS)))
 
(FUNC RECALL (F) (IF (MEMBER F FACTS) 1 0))
 
(FUNC TESTIF  (R)
   (SETQ IFS (CDR (CAR (CDR (CDR R)))) F 1)
   (PR "If=" IFS)
   (WHILE (AND F (NOT (NULL IFS)) )
      (IF (RECALL (CAR IFS)) (DO (SETQ F 0) (CAR IFS)) (SETQ IFS (CDR IFS))  )
   )
)
 
(FUNC USETHEN (R)
  (SETQ THENS (CDR (CAR (CDR (CDR (CDR R))))) F 1)
  (PR "Then= " THENS)
  (WHILE (AND F (NOT (NULL THENS)))
    (IF (NOT (NULL (REM (CAR THENS)))) (DO (SETQ F 0) (PR "Rule matches .. " " Deduces: " (CAR THENS))))
    (SETQ THENS (CDR THENS))
  )
)
 
(FUNC TRYRULE (R) (IF (NOT (NULL (TESTIF R))) (USETHEN R)))
 
(PR "t1 " (RECALL '(ANIMAL EATS VEG)))
(PR "t2 " ; ) (REM '(ANIMAL HAS HAIR))
(PR "t3 " ; ) (REM '(ANIMAL GIVES MILK))
 
(PR "t4 " (TESTIF  '(RULE IDENTIFY4 (IF (ANIMAL FLIES ) (ANIMAL LAYS EGGS)) (THEN (ANIMAL IS BIRD)))))
 
(PR "t5 " (TESTIF '(RULE IDENTIFY2 (IF (ANIMAL EATS MEAT ))               (THEN (ANIMAL IS MAMMAL)))))
 
(PR "t6 " (USETHEN '(RULE IDENTIFY4 (IF (ANIMAL FLIES ) (ANIMAL LAYS EGGS)) (THEN (ANIMAL IS BIRD)))))
 
(PR "t7 " (TRYRULE '(RULE IDENTIFY2 (IF (ANIMAL GIVES MILK ))               (THEN (ANIMAL IS MAMMAL)))))
 
(PR "t8 " (TRYRULE '(RULE IDENTIFY2 (IF (ANIMAL EATS MEAT ))               (THEN (ANIMAL IS MAMMAL)))))
 
(FUNC STEPF ()
	(PR "Step")
     (SETQ RL RULES)
     (WHILE  RL
         (SETQ T (TRYRULE (CAR RL))  RL (CDR RL))
     )
     (PR T))
 
(STEPF)
 
(
FUNC TESTIFP (FACT R1 R2)
)
